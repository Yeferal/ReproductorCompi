Pista RitmoFondo
	keep var entero contador
	var boolean bandera = verdadero
	var cadena texto = "hasta aca todo bien" + " " + "!!" + "#n"
	keep var doble uno, dos, tres, cuatro = 50.4*6
	var entero arreglo arr1 [(a+b+(c+(d+1)))^3] // arreglo con 1 dimensión y errores semanticos
	var cadena cad1, cad2, cad3 = texto + "aca empieza otra linea :D"
	>> en la linea anterior se ejemplifica que se puede hacer una inicializacion que usa a otra variable
	
	entero primer_ritmo(entero veces)
		<- este medoto pretende
		crear un ritmo de fondo
		indicando la velocidad ->
		entero tiempo >> esta variable almacena la duracion de la pista
		mientras (permitido == verdadero)
			si (bandera == verdadero)
				esperar(200, 1)
				tiempo += 200
			sino
				Reproducir(Do, 5, (20*10)*2, 1)
				tiempo +=(20*10)*2
			bandera= !(bandera)
			contador++
			si (contador >= veces)
				permitido=falso
				contador--
		retorna (tiempo + 1)
		
	keep boolean asignaciones(boolean parametro1)
		boolean var0
		boolean var1=(5/(5+5))< (8*8)%3
		hacer
			var0=var1!=(var1 == verdadero)
			bandera = var0 || var1
			bandera = !bandera
			si (!!contador)
				mensaje("la varialbe contador es nula")
			sino
				mensaje(texto)
		mientras(!!contador)
		retorna bandera
		
	keep principal()
		<- puede agregarse el prefijo keep en el metodo principal
		pere este no cumple ninguna funcion ya que nunca se
		hereda este método ->
		contador = 0
		entero lleva = primer_ritmo(15)
		asignaciones(true && (lleva>=200000))
		matrices(3,1,2,3,4)
		ciclos()
		
	keep entero matrices(entero multiplicador, entero a, entero b, entero c, entero d)
		Keep var entero arreglo arr2, arr3, arr4[d^multiplicador][a*b+c] >> error ya que Keep no se debe agregar a declaracion de variables locales de metodos
		
		arr1={5,10} >> esta inicializacion hace que la casilla 0 tenga el valor de 5, la casilla 2 tenga el valor de 10 y el resto tenga valor null
		var entero reg=arr3[1][2] + arr1[1]
		retorna reg
	ciclos()
		para( entero a= 10; a> 0; a --)
			mensaje("el valor de a es#n")
			mensaje(a)
			si (a==5)
				continuar
			mientras(primer_ritmo(a) < 1000)
				a++
				Reproducir(Re, 3, 1000,9)
				esperar(500,9)
				Reproducir(Re, 3, 1000, 9)
				esperar(500,9)
				
	keep entero Ordenar()
		var entero rev = 0
		Ordenar(arr1, descendente)
		rev=Longitud(arr1)
		retorna rev
