
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Aug 20 16:13:58 CST 2021
//----------------------------------------------------

package gui.editor;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.Stack;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Aug 20 16:13:58 CST 2021
  */
public class AnalizadorSintacticoCode extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoCode() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoCode(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoCode(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\223\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\005\004\000\002\005\002\000\002\006\006\000" +
    "\002\010\003\000\002\010\002\000\002\007\005\000\002" +
    "\007\004\000\002\011\004\000\002\011\004\000\002\011" +
    "\004\000\002\011\004\000\002\011\004\000\002\011\004" +
    "\000\002\011\004\000\002\011\004\000\002\011\004\000" +
    "\002\011\004\000\002\011\004\000\002\011\004\000\002" +
    "\011\004\000\002\011\004\000\002\011\004\000\002\011" +
    "\004\000\002\011\004\000\002\011\004\000\002\011\004" +
    "\000\002\011\004\000\002\011\004\000\002\011\002\000" +
    "\002\012\005\000\002\012\007\000\002\012\010\000\002" +
    "\012\006\000\002\013\003\000\002\013\002\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\047\006\000\002\051\005\000\002\051\003\000" +
    "\002\052\003\000\002\052\002\000\002\050\004\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\004\000\002\020\003\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\003\000\002\016\005" +
    "\000\002\022\006\000\002\022\005\000\002\022\012\000" +
    "\002\022\014\000\002\022\007\000\002\022\010\000\002" +
    "\023\006\000\002\023\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\007\000\002\025\005\000\002\025\003" +
    "\000\002\032\006\000\002\026\006\000\002\027\006\000" +
    "\002\027\003\000\002\030\006\000\002\030\004\000\002" +
    "\030\003\000\002\030\003\000\002\033\012\000\002\053" +
    "\007\000\002\053\005\000\002\054\003\000\002\055\005" +
    "\000\002\055\005\000\002\055\004\000\002\055\004\000" +
    "\002\034\006\000\002\035\003\000\002\035\003\000\002" +
    "\036\007\000\002\036\010\000\002\036\003\000\002\037" +
    "\006\000\002\037\007\000\002\056\007\000\002\056\005" +
    "\000\002\040\014\000\002\041\010\000\002\042\010\000" +
    "\002\043\005\000\002\044\006\000\002\045\006\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
    "\002\057\003\000\002\057\003\000\002\060\003\000\002" +
    "\060\003\000\002\060\003\000\002\060\003\000\002\060" +
    "\003\000\002\046\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012d\000\012\002\ufffe\004\006\005\005\006\ufffe\001" +
    "\002\000\012\002\ufffe\004\006\005\005\006\ufffe\001\002" +
    "\000\102\002\ufffc\003\ufffc\004\ufffc\005\ufffc\006\ufffc\007" +
    "\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\043\ufffc" +
    "\044\ufffc\064\ufffc\065\ufffc\070\ufffc\071\ufffc\072\ufffc\073" +
    "\ufffc\074\ufffc\075\ufffc\076\ufffc\077\ufffc\100\ufffc\102\ufffc" +
    "\103\ufffc\104\ufffc\112\ufffc\113\ufffc\114\ufffc\115\ufffc\131" +
    "\ufffc\001\002\000\102\002\ufffd\003\ufffd\004\ufffd\005\ufffd" +
    "\006\ufffd\007\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017" +
    "\ufffd\043\ufffd\044\ufffd\064\ufffd\065\ufffd\070\ufffd\071\ufffd" +
    "\072\ufffd\073\ufffd\074\ufffd\075\ufffd\076\ufffd\077\ufffd\100" +
    "\ufffd\102\ufffd\103\ufffd\104\ufffd\112\ufffd\113\ufffd\114\ufffd" +
    "\115\ufffd\131\ufffd\001\002\000\006\002\ufffa\006\014\001" +
    "\002\000\004\002\011\001\002\000\004\002\001\001\002" +
    "\000\006\002\ufffa\006\014\001\002\000\004\002\000\001" +
    "\002\000\004\007\015\001\002\000\104\002\ufff7\003\ufff7" +
    "\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\017\013\ufff7\014" +
    "\ufff7\015\ufff7\016\ufff7\017\ufff7\043\ufff7\044\ufff7\064\ufff7" +
    "\065\ufff7\070\ufff7\071\ufff7\072\ufff7\073\ufff7\074\ufff7\075" +
    "\ufff7\076\ufff7\077\ufff7\100\ufff7\102\ufff7\103\ufff7\104\ufff7" +
    "\112\ufff7\113\ufff7\114\ufff7\115\ufff7\131\ufff7\001\002\000" +
    "\104\002\ufff8\003\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8" +
    "\011\u012c\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\043" +
    "\ufff8\044\ufff8\064\ufff8\065\ufff8\070\ufff8\071\ufff8\072\ufff8" +
    "\073\ufff8\074\ufff8\075\ufff8\076\ufff8\077\ufff8\100\ufff8\102" +
    "\ufff8\103\ufff8\104\ufff8\112\ufff8\113\ufff8\114\ufff8\115\ufff8" +
    "\131\ufff8\001\002\000\004\007\u012b\001\002\000\102\002" +
    "\uffdf\003\055\004\006\005\005\006\uffdf\007\036\013\033" +
    "\014\057\015\053\016\040\017\023\043\047\044\uffd9\064" +
    "\032\065\037\070\060\071\024\072\052\073\073\074\077" +
    "\075\043\076\075\077\044\100\100\102\054\103\076\104" +
    "\030\112\070\113\067\114\027\115\035\131\026\001\002" +
    "\000\004\007\u0127\001\002\000\102\002\uffdf\003\055\004" +
    "\006\005\005\006\uffdf\007\036\013\033\014\057\015\053" +
    "\016\040\017\023\043\047\044\uffd9\064\032\065\037\070" +
    "\060\071\024\072\052\073\073\074\077\075\043\076\075" +
    "\077\044\100\100\102\054\103\076\104\030\112\070\113" +
    "\067\114\027\115\035\131\026\001\002\000\006\007\uffbe" +
    "\057\uffbe\001\002\000\022\007\127\046\121\047\113\050" +
    "\112\051\115\052\122\053\130\066\117\001\002\000\102" +
    "\002\uffdf\003\055\004\006\005\005\006\uffdf\007\036\013" +
    "\033\014\057\015\053\016\040\017\023\043\047\044\uffd9" +
    "\064\032\065\037\070\060\071\024\072\052\073\073\074" +
    "\077\075\043\076\075\077\044\100\100\102\054\103\076" +
    "\104\030\112\070\113\067\114\027\115\035\131\026\001" +
    "\002\000\004\066\u0121\001\002\000\004\066\u011e\001\002" +
    "\000\004\066\u0114\001\002\000\102\002\uffdf\003\055\004" +
    "\006\005\005\006\uffdf\007\036\013\033\014\057\015\053" +
    "\016\040\017\023\043\047\044\uffd9\064\032\065\037\070" +
    "\060\071\024\072\052\073\073\074\077\075\043\076\075" +
    "\077\044\100\100\102\054\103\076\104\030\112\070\113" +
    "\067\114\027\115\035\131\026\001\002\000\004\066\u0110" +
    "\001\002\000\006\007\uffc0\057\uffc0\001\002\000\102\002" +
    "\uffdf\003\055\004\006\005\005\006\uffdf\007\036\013\033" +
    "\014\057\015\053\016\040\017\023\043\047\044\uffd9\064" +
    "\032\065\037\070\060\071\024\072\052\073\073\074\077" +
    "\075\043\076\075\077\044\100\100\102\054\103\076\104" +
    "\030\112\070\113\067\114\027\115\035\131\026\001\002" +
    "\000\004\066\u010d\001\002\000\010\045\u0105\060\133\066" +
    "\u0107\001\002\000\102\002\uff9d\003\uff9d\004\uff9d\005\uff9d" +
    "\006\uff9d\007\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d\017" +
    "\uff9d\043\uff9d\044\uff9d\064\uff9d\065\uff9d\070\uff9d\071\uff9d" +
    "\072\uff9d\073\uff9d\074\uff9d\075\uff9d\076\uff9d\077\uff9d\100" +
    "\uff9d\102\uff9d\103\uff9d\104\uff9d\112\uff9d\113\uff9d\114\uff9d" +
    "\115\uff9d\131\uff9d\001\002\000\006\007\uffbf\057\uffbf\001" +
    "\002\000\102\002\uffdf\003\055\004\006\005\005\006\uffdf" +
    "\007\036\013\033\014\057\015\053\016\040\017\023\043" +
    "\047\044\uffd9\064\032\065\037\070\060\071\024\072\052" +
    "\073\073\074\077\075\043\076\075\077\044\100\100\102" +
    "\054\103\076\104\030\112\070\113\067\114\027\115\035" +
    "\131\026\001\002\000\104\002\uffdf\003\055\004\006\005" +
    "\005\006\uffdf\007\036\011\374\013\033\014\057\015\053" +
    "\016\040\017\023\043\047\044\uffd9\064\032\065\037\070" +
    "\060\071\024\072\052\073\073\074\077\075\043\076\075" +
    "\077\044\100\100\102\054\103\076\104\030\112\070\113" +
    "\067\114\027\115\035\131\026\001\002\000\004\066\371" +
    "\001\002\000\102\002\uff8e\003\uff8e\004\uff8e\005\uff8e\006" +
    "\uff8e\007\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e\017\uff8e" +
    "\043\uff8e\044\uff8e\064\uff8e\065\uff8e\070\uff8e\071\uff8e\072" +
    "\uff8e\073\uff8e\074\uff8e\075\uff8e\076\uff8e\077\uff8e\100\uff8e" +
    "\102\uff8e\103\uff8e\104\uff8e\112\uff8e\113\uff8e\114\uff8e\115" +
    "\uff8e\131\uff8e\001\002\000\102\002\uffdf\003\055\004\006" +
    "\005\005\006\uffdf\007\036\013\033\014\057\015\053\016" +
    "\040\017\023\043\047\044\uffd9\064\032\065\037\070\060" +
    "\071\024\072\052\073\073\074\077\075\043\076\075\077" +
    "\044\100\100\102\054\103\076\104\030\112\070\113\067" +
    "\114\027\115\035\131\026\001\002\000\102\002\uffdf\003" +
    "\055\004\006\005\005\006\uffdf\007\036\013\033\014\057" +
    "\015\053\016\040\017\023\043\047\044\uffd9\064\032\065" +
    "\037\070\060\071\024\072\052\073\073\074\077\075\043" +
    "\076\075\077\044\100\100\102\054\103\076\104\030\112" +
    "\070\113\067\114\027\115\035\131\026\001\002\000\020" +
    "\007\350\013\033\014\057\015\053\016\040\017\023\044" +
    "\uffda\001\002\000\004\044\317\001\002\000\102\002\uffdf" +
    "\003\055\004\006\005\005\006\uffdf\007\036\013\033\014" +
    "\057\015\053\016\040\017\023\043\047\044\uffd9\064\032" +
    "\065\037\070\060\071\024\072\052\073\073\074\077\075" +
    "\043\076\075\077\044\100\100\102\054\103\076\104\030" +
    "\112\070\113\067\114\027\115\035\131\026\001\002\000" +
    "\102\002\uff9a\003\uff9a\004\uff9a\005\uff9a\006\uff9a\007\uff9a" +
    "\013\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a\043\uff9a\044" +
    "\uff9a\064\uff9a\065\uff9a\070\uff9a\071\uff9a\072\uff9a\073\uff9a" +
    "\074\uff9a\075\uff9a\076\uff9a\077\uff9a\100\uff9a\102\uff9a\103" +
    "\uff9a\104\uff9a\112\uff9a\113\uff9a\114\uff9a\115\uff9a\131\uff9a" +
    "\001\002\000\006\007\uffbd\057\uffbd\001\002\000\004\066" +
    "\271\001\002\000\102\002\uffdf\003\055\004\006\005\005" +
    "\006\uffdf\007\036\013\033\014\057\015\053\016\040\017" +
    "\023\043\047\044\uffd9\064\032\065\037\070\060\071\024" +
    "\072\052\073\073\074\077\075\043\076\075\077\044\100" +
    "\100\102\054\103\076\104\030\112\070\113\067\114\027" +
    "\115\035\131\026\001\002\000\102\002\uffdf\003\055\004" +
    "\006\005\005\006\uffdf\007\036\013\033\014\057\015\053" +
    "\016\040\017\023\043\047\044\uffd9\064\032\065\037\070" +
    "\060\071\024\072\052\073\073\074\077\075\043\076\075" +
    "\077\044\100\100\102\054\103\076\104\030\112\070\113" +
    "\067\114\027\115\035\131\026\001\002\000\006\007\uffc1" +
    "\057\uffc1\001\002\000\004\066\264\001\002\000\104\002" +
    "\uffdf\003\055\004\006\005\005\006\uffdf\007\036\011\237" +
    "\013\033\014\057\015\053\016\040\017\023\043\047\044" +
    "\uffd9\064\032\065\037\070\060\071\024\072\052\073\073" +
    "\074\077\075\043\076\075\077\044\100\100\102\054\103" +
    "\076\104\030\112\070\113\067\114\027\115\035\131\026" +
    "\001\002\000\102\002\uffdf\003\055\004\006\005\005\006" +
    "\uffdf\007\036\013\033\014\057\015\053\016\040\017\023" +
    "\043\047\044\uffd9\064\032\065\037\070\060\071\024\072" +
    "\052\073\073\074\077\075\043\076\075\077\044\100\100" +
    "\102\054\103\076\104\030\112\070\113\067\114\027\115" +
    "\035\131\026\001\002\000\006\002\ufff9\006\ufff9\001\002" +
    "\000\102\002\uffdf\003\055\004\006\005\005\006\uffdf\007" +
    "\036\013\033\014\057\015\053\016\040\017\023\043\047" +
    "\044\uffd9\064\032\065\037\070\060\071\024\072\052\073" +
    "\073\074\077\075\043\076\075\077\044\100\100\102\054" +
    "\103\076\104\030\112\070\113\067\114\027\115\035\131" +
    "\026\001\002\000\102\002\uffdf\003\055\004\006\005\005" +
    "\006\uffdf\007\036\013\033\014\057\015\053\016\040\017" +
    "\023\043\047\044\uffd9\064\032\065\037\070\060\071\024" +
    "\072\052\073\073\074\077\075\043\076\075\077\044\100" +
    "\100\102\054\103\076\104\030\112\070\113\067\114\027" +
    "\115\035\131\026\001\002\000\102\002\uffdf\003\055\004" +
    "\006\005\005\006\uffdf\007\036\013\033\014\057\015\053" +
    "\016\040\017\023\043\047\044\uffd9\064\032\065\037\070" +
    "\060\071\024\072\052\073\073\074\077\075\043\076\075" +
    "\077\044\100\100\102\054\103\076\104\030\112\070\113" +
    "\067\114\027\115\035\131\026\001\002\000\004\066\230" +
    "\001\002\000\004\066\226\001\002\000\102\002\uffdf\003" +
    "\055\004\006\005\005\006\uffdf\007\036\013\033\014\057" +
    "\015\053\016\040\017\023\043\047\044\uffd9\064\032\065" +
    "\037\070\060\071\024\072\052\073\073\074\077\075\043" +
    "\076\075\077\044\100\100\102\054\103\076\104\030\112" +
    "\070\113\067\114\027\115\035\131\026\001\002\000\102" +
    "\002\uffdf\003\055\004\006\005\005\006\uffdf\007\036\013" +
    "\033\014\057\015\053\016\040\017\023\043\047\044\uffd9" +
    "\064\032\065\037\070\060\071\024\072\052\073\073\074" +
    "\077\075\043\076\075\077\044\100\100\102\054\103\076" +
    "\104\030\112\070\113\067\114\027\115\035\131\026\001" +
    "\002\000\102\002\uff99\003\uff99\004\uff99\005\uff99\006\uff99" +
    "\007\uff99\013\uff99\014\uff99\015\uff99\016\uff99\017\uff99\043" +
    "\uff99\044\uff99\064\uff99\065\uff99\070\uff99\071\uff99\072\uff99" +
    "\073\uff99\074\uff99\075\uff99\076\uff99\077\uff99\100\uff99\102" +
    "\uff99\103\uff99\104\uff99\112\uff99\113\uff99\114\uff99\115\uff99" +
    "\131\uff99\001\002\000\102\002\uffdf\003\055\004\006\005" +
    "\005\006\uffdf\007\036\013\033\014\057\015\053\016\040" +
    "\017\023\043\047\044\uffd9\064\032\065\037\070\060\071" +
    "\024\072\052\073\073\074\077\075\043\076\075\077\044" +
    "\100\100\102\054\103\076\104\030\112\070\113\067\114" +
    "\027\115\035\131\026\001\002\000\102\002\uff8f\003\uff8f" +
    "\004\uff8f\005\uff8f\006\uff8f\007\uff8f\013\uff8f\014\uff8f\015" +
    "\uff8f\016\uff8f\017\uff8f\043\uff8f\044\uff8f\064\uff8f\065\uff8f" +
    "\070\uff8f\071\uff8f\072\uff8f\073\uff8f\074\uff8f\075\uff8f\076" +
    "\uff8f\077\uff8f\100\uff8f\102\uff8f\103\uff8f\104\uff8f\112\uff8f" +
    "\113\uff8f\114\uff8f\115\uff8f\131\uff8f\001\002\000\004\066" +
    "\216\001\002\000\004\066\105\001\002\000\102\002\uff8b" +
    "\003\uff8b\004\uff8b\005\uff8b\006\uff8b\007\uff8b\013\uff8b\014" +
    "\uff8b\015\uff8b\016\uff8b\017\uff8b\043\uff8b\044\uff8b\064\uff8b" +
    "\065\uff8b\070\uff8b\071\uff8b\072\uff8b\073\uff8b\074\uff8b\075" +
    "\uff8b\076\uff8b\077\uff8b\100\uff8b\102\uff8b\103\uff8b\104\uff8b" +
    "\112\uff8b\113\uff8b\114\uff8b\115\uff8b\131\uff8b\001\002\000" +
    "\102\002\uffdf\003\055\004\006\005\005\006\uffdf\007\036" +
    "\013\033\014\057\015\053\016\040\017\023\043\047\044" +
    "\uffd9\064\032\065\037\070\060\071\024\072\052\073\073" +
    "\074\077\075\043\076\075\077\044\100\100\102\054\103" +
    "\076\104\030\112\070\113\067\114\027\115\035\131\026" +
    "\001\002\000\102\002\uffdf\003\055\004\006\005\005\006" +
    "\uffdf\007\036\013\033\014\057\015\053\016\040\017\023" +
    "\043\047\044\uffd9\064\032\065\037\070\060\071\024\072" +
    "\052\073\073\074\077\075\043\076\075\077\044\100\100" +
    "\102\054\103\076\104\030\112\070\113\067\114\027\115" +
    "\035\131\026\001\002\000\006\002\uffe9\006\uffe9\001\002" +
    "\000\006\002\uffeb\006\uffeb\001\002\000\006\007\107\044" +
    "\106\001\002\000\014\013\033\014\057\015\053\016\040" +
    "\017\023\001\002\000\004\045\210\001\002\000\004\012" +
    "\111\001\002\000\024\007\127\034\126\046\121\047\113" +
    "\050\112\051\115\052\122\053\130\066\117\001\002\000" +
    "\142\002\uffcb\003\uffcb\004\uffcb\005\uffcb\006\uffcb\007\uffcb" +
    "\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017" +
    "\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\035\uffcb" +
    "\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044" +
    "\uffcb\061\uffcb\063\uffcb\064\uffcb\065\uffcb\067\uffcb\070\uffcb" +
    "\071\uffcb\072\uffcb\073\uffcb\074\uffcb\075\uffcb\076\uffcb\077" +
    "\uffcb\100\uffcb\102\uffcb\103\uffcb\104\uffcb\112\uffcb\113\uffcb" +
    "\114\uffcb\115\uffcb\131\uffcb\001\002\000\142\002\uffcc\003" +
    "\uffcc\004\uffcc\005\uffcc\006\uffcc\007\uffcc\011\uffcc\012\uffcc" +
    "\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\027\uffcc\030" +
    "\uffcc\031\uffcc\032\uffcc\033\uffcc\035\uffcc\036\uffcc\037\uffcc" +
    "\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\061\uffcc\063" +
    "\uffcc\064\uffcc\065\uffcc\067\uffcc\070\uffcc\071\uffcc\072\uffcc" +
    "\073\uffcc\074\uffcc\075\uffcc\076\uffcc\077\uffcc\100\uffcc\102" +
    "\uffcc\103\uffcc\104\uffcc\112\uffcc\113\uffcc\114\uffcc\115\uffcc" +
    "\131\uffcc\001\002\000\136\002\uffb6\003\uffb6\004\uffb6\005" +
    "\uffb6\006\uffb6\007\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6" +
    "\015\uffb6\016\uffb6\017\uffb6\027\uffb6\030\uffb6\031\uffb6\032" +
    "\uffb6\033\uffb6\035\135\036\140\040\141\041\137\042\136" +
    "\043\uffb6\044\uffb6\063\uffb6\064\uffb6\065\uffb6\067\uffb6\070" +
    "\uffb6\071\uffb6\072\uffb6\073\uffb6\074\uffb6\075\uffb6\076\uffb6" +
    "\077\uffb6\100\uffb6\102\uffb6\103\uffb6\104\uffb6\112\uffb6\113" +
    "\uffb6\114\uffb6\115\uffb6\131\uffb6\001\002\000\142\002\uffc9" +
    "\003\uffc9\004\uffc9\005\uffc9\006\uffc9\007\uffc9\011\uffc9\012" +
    "\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\027\uffc9" +
    "\030\uffc9\031\uffc9\032\uffc9\033\uffc9\035\uffc9\036\uffc9\037" +
    "\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\061\uffc9" +
    "\063\uffc9\064\uffc9\065\uffc9\067\uffc9\070\uffc9\071\uffc9\072" +
    "\uffc9\073\uffc9\074\uffc9\075\uffc9\076\uffc9\077\uffc9\100\uffc9" +
    "\102\uffc9\103\uffc9\104\uffc9\112\uffc9\113\uffc9\114\uffc9\115" +
    "\uffc9\131\uffc9\001\002\000\140\002\uffaf\003\uffaf\004\uffaf" +
    "\005\uffaf\006\uffaf\007\uffaf\011\uffaf\012\uffaf\013\uffaf\014" +
    "\uffaf\015\uffaf\016\uffaf\017\uffaf\027\uffaf\030\uffaf\031\uffaf" +
    "\032\uffaf\033\uffaf\035\uffaf\036\uffaf\040\uffaf\041\uffaf\042" +
    "\uffaf\043\uffaf\044\uffaf\061\uffaf\063\uffaf\064\uffaf\065\uffaf" +
    "\067\uffaf\070\uffaf\071\uffaf\072\uffaf\073\uffaf\074\uffaf\075" +
    "\uffaf\076\uffaf\077\uffaf\100\uffaf\102\uffaf\103\uffaf\104\uffaf" +
    "\112\uffaf\113\uffaf\114\uffaf\115\uffaf\131\uffaf\001\002\000" +
    "\022\007\127\046\121\047\113\050\112\051\115\052\122" +
    "\053\130\066\117\001\002\000\142\002\uffce\003\uffce\004" +
    "\uffce\005\uffce\006\uffce\007\uffce\011\uffce\012\uffce\013\uffce" +
    "\014\uffce\015\uffce\016\uffce\017\uffce\027\uffce\030\uffce\031" +
    "\uffce\032\uffce\033\uffce\035\uffce\036\uffce\037\uffce\040\uffce" +
    "\041\uffce\042\uffce\043\uffce\044\uffce\061\uffce\063\uffce\064" +
    "\uffce\065\uffce\067\uffce\070\uffce\071\uffce\072\uffce\073\uffce" +
    "\074\uffce\075\uffce\076\uffce\077\uffce\100\uffce\102\uffce\103" +
    "\uffce\104\uffce\112\uffce\113\uffce\114\uffce\115\uffce\131\uffce" +
    "\001\002\000\142\002\uffcd\003\uffcd\004\uffcd\005\uffcd\006" +
    "\uffcd\007\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd" +
    "\016\uffcd\017\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033" +
    "\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd" +
    "\043\uffcd\044\uffcd\061\uffcd\063\uffcd\064\uffcd\065\uffcd\067" +
    "\uffcd\070\uffcd\071\uffcd\072\uffcd\073\uffcd\074\uffcd\075\uffcd" +
    "\076\uffcd\077\uffcd\100\uffcd\102\uffcd\103\uffcd\104\uffcd\112" +
    "\uffcd\113\uffcd\114\uffcd\115\uffcd\131\uffcd\001\002\000\142" +
    "\002\uffc8\003\uffc8\004\uffc8\005\uffc8\006\uffc8\007\uffc8\011" +
    "\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8" +
    "\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\035\uffc8\036" +
    "\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8" +
    "\061\uffc8\063\uffc8\064\uffc8\065\uffc8\067\uffc8\070\uffc8\071" +
    "\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8\076\uffc8\077\uffc8" +
    "\100\uffc8\102\uffc8\103\uffc8\104\uffc8\112\uffc8\113\uffc8\114" +
    "\uffc8\115\uffc8\131\uffc8\001\002\000\142\002\uffcf\003\uffcf" +
    "\004\uffcf\005\uffcf\006\uffcf\007\uffcf\011\uffcf\012\uffcf\013" +
    "\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\032\uffcf\033\uffcf\035\uffcf\036\uffcf\037\uffcf\040" +
    "\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\061\uffcf\063\uffcf" +
    "\064\uffcf\065\uffcf\067\uffcf\070\uffcf\071\uffcf\072\uffcf\073" +
    "\uffcf\074\uffcf\075\uffcf\076\uffcf\077\uffcf\100\uffcf\102\uffcf" +
    "\103\uffcf\104\uffcf\112\uffcf\113\uffcf\114\uffcf\115\uffcf\131" +
    "\uffcf\001\002\000\004\012\174\001\002\000\016\012\uff95" +
    "\027\163\030\162\031\165\032\164\033\166\001\002\000" +
    "\024\007\127\034\126\046\121\047\113\050\112\051\115" +
    "\052\122\053\130\066\117\001\002\000\146\002\uffd0\003" +
    "\uffd0\004\uffd0\005\uffd0\006\uffd0\007\uffd0\011\uffd0\012\uffd0" +
    "\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\027\uffd0\030" +
    "\uffd0\031\uffd0\032\uffd0\033\uffd0\035\uffd0\036\uffd0\037\uffd0" +
    "\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\060\133\061" +
    "\uffd0\063\uffd0\064\uffd0\065\uffd0\066\132\067\uffd0\070\uffd0" +
    "\071\uffd0\072\uffd0\073\uffd0\074\uffd0\075\uffd0\076\uffd0\077" +
    "\uffd0\100\uffd0\102\uffd0\103\uffd0\104\uffd0\112\uffd0\113\uffd0" +
    "\114\uffd0\115\uffd0\131\uffd0\001\002\000\142\002\uffca\003" +
    "\uffca\004\uffca\005\uffca\006\uffca\007\uffca\011\uffca\012\uffca" +
    "\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca\027\uffca\030" +
    "\uffca\031\uffca\032\uffca\033\uffca\035\uffca\036\uffca\037\uffca" +
    "\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca\061\uffca\063" +
    "\uffca\064\uffca\065\uffca\067\uffca\070\uffca\071\uffca\072\uffca" +
    "\073\uffca\074\uffca\075\uffca\076\uffca\077\uffca\100\uffca\102" +
    "\uffca\103\uffca\104\uffca\112\uffca\113\uffca\114\uffca\115\uffca" +
    "\131\uffca\001\002\000\144\002\uffc2\003\uffc2\004\uffc2\005" +
    "\uffc2\006\uffc2\007\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2" +
    "\015\uffc2\016\uffc2\017\uffc2\027\uffc2\030\uffc2\031\uffc2\032" +
    "\uffc2\033\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2" +
    "\042\uffc2\043\uffc2\044\uffc2\060\156\061\uffc2\063\uffc2\064" +
    "\uffc2\065\uffc2\067\uffc2\070\uffc2\071\uffc2\072\uffc2\073\uffc2" +
    "\074\uffc2\075\uffc2\076\uffc2\077\uffc2\100\uffc2\102\uffc2\103" +
    "\uffc2\104\uffc2\112\uffc2\113\uffc2\114\uffc2\115\uffc2\131\uffc2" +
    "\001\002\000\024\007\127\046\121\047\113\050\112\051" +
    "\115\052\122\053\130\066\117\067\uffc3\001\002\000\022" +
    "\007\127\046\121\047\113\050\112\051\115\052\122\053" +
    "\130\066\117\001\002\000\016\035\135\036\140\040\141" +
    "\041\137\042\136\061\142\001\002\000\022\007\127\046" +
    "\121\047\113\050\112\051\115\052\122\053\130\066\117" +
    "\001\002\000\022\007\127\046\121\047\113\050\112\051" +
    "\115\052\122\053\130\066\117\001\002\000\022\007\127" +
    "\046\121\047\113\050\112\051\115\052\122\053\130\066" +
    "\117\001\002\000\022\007\127\046\121\047\113\050\112" +
    "\051\115\052\122\053\130\066\117\001\002\000\022\007" +
    "\127\046\121\047\113\050\112\051\115\052\122\053\130" +
    "\066\117\001\002\000\146\002\uffa6\003\uffa6\004\uffa6\005" +
    "\uffa6\006\uffa6\007\uffa6\011\uffa6\012\uffa6\013\uffa6\014\uffa6" +
    "\015\uffa6\016\uffa6\017\uffa6\027\uffa6\030\uffa6\031\uffa6\032" +
    "\uffa6\033\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6" +
    "\042\uffa6\043\uffa6\044\uffa6\045\uffa6\060\uffa6\061\uffa6\063" +
    "\uffa6\064\uffa6\065\uffa6\067\uffa6\070\uffa6\071\uffa6\072\uffa6" +
    "\073\uffa6\074\uffa6\075\uffa6\076\uffa6\077\uffa6\100\uffa6\102" +
    "\uffa6\103\uffa6\104\uffa6\112\uffa6\113\uffa6\114\uffa6\115\uffa6" +
    "\131\uffa6\001\002\000\140\002\uffb3\003\uffb3\004\uffb3\005" +
    "\uffb3\006\uffb3\007\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3" +
    "\015\uffb3\016\uffb3\017\uffb3\027\uffb3\030\uffb3\031\uffb3\032" +
    "\uffb3\033\uffb3\035\uffb3\036\uffb3\040\uffb3\041\uffb3\042\136" +
    "\043\uffb3\044\uffb3\061\uffb3\063\uffb3\064\uffb3\065\uffb3\067" +
    "\uffb3\070\uffb3\071\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3" +
    "\076\uffb3\077\uffb3\100\uffb3\102\uffb3\103\uffb3\104\uffb3\112" +
    "\uffb3\113\uffb3\114\uffb3\115\uffb3\131\uffb3\001\002\000\140" +
    "\002\uffb4\003\uffb4\004\uffb4\005\uffb4\006\uffb4\007\uffb4\011" +
    "\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4" +
    "\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\035\uffb4\036" +
    "\uffb4\040\141\041\137\042\136\043\uffb4\044\uffb4\061\uffb4" +
    "\063\uffb4\064\uffb4\065\uffb4\067\uffb4\070\uffb4\071\uffb4\072" +
    "\uffb4\073\uffb4\074\uffb4\075\uffb4\076\uffb4\077\uffb4\100\uffb4" +
    "\102\uffb4\103\uffb4\104\uffb4\112\uffb4\113\uffb4\114\uffb4\115" +
    "\uffb4\131\uffb4\001\002\000\140\002\uffb2\003\uffb2\004\uffb2" +
    "\005\uffb2\006\uffb2\007\uffb2\011\uffb2\012\uffb2\013\uffb2\014" +
    "\uffb2\015\uffb2\016\uffb2\017\uffb2\027\uffb2\030\uffb2\031\uffb2" +
    "\032\uffb2\033\uffb2\035\uffb2\036\uffb2\040\uffb2\041\uffb2\042" +
    "\136\043\uffb2\044\uffb2\061\uffb2\063\uffb2\064\uffb2\065\uffb2" +
    "\067\uffb2\070\uffb2\071\uffb2\072\uffb2\073\uffb2\074\uffb2\075" +
    "\uffb2\076\uffb2\077\uffb2\100\uffb2\102\uffb2\103\uffb2\104\uffb2" +
    "\112\uffb2\113\uffb2\114\uffb2\115\uffb2\131\uffb2\001\002\000" +
    "\140\002\uffb1\003\uffb1\004\uffb1\005\uffb1\006\uffb1\007\uffb1" +
    "\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017" +
    "\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\035\uffb1" +
    "\036\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\061" +
    "\uffb1\063\uffb1\064\uffb1\065\uffb1\067\uffb1\070\uffb1\071\uffb1" +
    "\072\uffb1\073\uffb1\074\uffb1\075\uffb1\076\uffb1\077\uffb1\100" +
    "\uffb1\102\uffb1\103\uffb1\104\uffb1\112\uffb1\113\uffb1\114\uffb1" +
    "\115\uffb1\131\uffb1\001\002\000\140\002\uffb5\003\uffb5\004" +
    "\uffb5\005\uffb5\006\uffb5\007\uffb5\011\uffb5\012\uffb5\013\uffb5" +
    "\014\uffb5\015\uffb5\016\uffb5\017\uffb5\027\uffb5\030\uffb5\031" +
    "\uffb5\032\uffb5\033\uffb5\035\uffb5\036\uffb5\040\141\041\137" +
    "\042\136\043\uffb5\044\uffb5\061\uffb5\063\uffb5\064\uffb5\065" +
    "\uffb5\067\uffb5\070\uffb5\071\uffb5\072\uffb5\073\uffb5\074\uffb5" +
    "\075\uffb5\076\uffb5\077\uffb5\100\uffb5\102\uffb5\103\uffb5\104" +
    "\uffb5\112\uffb5\113\uffb5\114\uffb5\115\uffb5\131\uffb5\001\002" +
    "\000\020\011\uffc5\035\135\036\140\040\141\041\137\042" +
    "\136\067\uffc5\001\002\000\004\067\155\001\002\000\006" +
    "\011\153\067\uffc4\001\002\000\022\007\127\046\121\047" +
    "\113\050\112\051\115\052\122\053\130\066\117\001\002" +
    "\000\020\011\uffc6\035\135\036\140\040\141\041\137\042" +
    "\136\067\uffc6\001\002\000\142\002\uffc7\003\uffc7\004\uffc7" +
    "\005\uffc7\006\uffc7\007\uffc7\011\uffc7\012\uffc7\013\uffc7\014" +
    "\uffc7\015\uffc7\016\uffc7\017\uffc7\027\uffc7\030\uffc7\031\uffc7" +
    "\032\uffc7\033\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041" +
    "\uffc7\042\uffc7\043\uffc7\044\uffc7\061\uffc7\063\uffc7\064\uffc7" +
    "\065\uffc7\067\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7\074" +
    "\uffc7\075\uffc7\076\uffc7\077\uffc7\100\uffc7\102\uffc7\103\uffc7" +
    "\104\uffc7\112\uffc7\113\uffc7\114\uffc7\115\uffc7\131\uffc7\001" +
    "\002\000\022\007\127\046\121\047\113\050\112\051\115" +
    "\052\122\053\130\066\117\001\002\000\016\035\135\036" +
    "\140\040\141\041\137\042\136\061\160\001\002\000\146" +
    "\002\uffa7\003\uffa7\004\uffa7\005\uffa7\006\uffa7\007\uffa7\011" +
    "\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7" +
    "\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\035\uffa7\036" +
    "\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7" +
    "\045\uffa7\060\uffa7\061\uffa7\063\uffa7\064\uffa7\065\uffa7\067" +
    "\uffa7\070\uffa7\071\uffa7\072\uffa7\073\uffa7\074\uffa7\075\uffa7" +
    "\076\uffa7\077\uffa7\100\uffa7\102\uffa7\103\uffa7\104\uffa7\112" +
    "\uffa7\113\uffa7\114\uffa7\115\uffa7\131\uffa7\001\002\000\124" +
    "\002\uffb7\003\uffb7\004\uffb7\005\uffb7\006\uffb7\007\uffb7\011" +
    "\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7" +
    "\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\043\uffb7\044" +
    "\uffb7\063\uffb7\064\uffb7\065\uffb7\067\uffb7\070\uffb7\071\uffb7" +
    "\072\uffb7\073\uffb7\074\uffb7\075\uffb7\076\uffb7\077\uffb7\100" +
    "\uffb7\102\uffb7\103\uffb7\104\uffb7\112\uffb7\113\uffb7\114\uffb7" +
    "\115\uffb7\131\uffb7\001\002\000\024\007\127\034\126\046" +
    "\121\047\113\050\112\051\115\052\122\053\130\066\117" +
    "\001\002\000\024\007\127\034\126\046\121\047\113\050" +
    "\112\051\115\052\122\053\130\066\117\001\002\000\024" +
    "\007\127\034\126\046\121\047\113\050\112\051\115\052" +
    "\122\053\130\066\117\001\002\000\024\007\127\034\126" +
    "\046\121\047\113\050\112\051\115\052\122\053\130\066" +
    "\117\001\002\000\024\007\127\034\126\046\121\047\113" +
    "\050\112\051\115\052\122\053\130\066\117\001\002\000" +
    "\124\002\uffba\003\uffba\004\uffba\005\uffba\006\uffba\007\uffba" +
    "\011\uffba\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017" +
    "\uffba\027\163\030\162\031\uffba\032\uffba\033\uffba\043\uffba" +
    "\044\uffba\063\uffba\064\uffba\065\uffba\067\uffba\070\uffba\071" +
    "\uffba\072\uffba\073\uffba\074\uffba\075\uffba\076\uffba\077\uffba" +
    "\100\uffba\102\uffba\103\uffba\104\uffba\112\uffba\113\uffba\114" +
    "\uffba\115\uffba\131\uffba\001\002\000\124\002\uffbc\003\uffbc" +
    "\004\uffbc\005\uffbc\006\uffbc\007\uffbc\011\uffbc\012\uffbc\013" +
    "\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\027\163\030\162" +
    "\031\uffbc\032\uffbc\033\uffbc\043\uffbc\044\uffbc\063\uffbc\064" +
    "\uffbc\065\uffbc\067\uffbc\070\uffbc\071\uffbc\072\uffbc\073\uffbc" +
    "\074\uffbc\075\uffbc\076\uffbc\077\uffbc\100\uffbc\102\uffbc\103" +
    "\uffbc\104\uffbc\112\uffbc\113\uffbc\114\uffbc\115\uffbc\131\uffbc" +
    "\001\002\000\124\002\uffbb\003\uffbb\004\uffbb\005\uffbb\006" +
    "\uffbb\007\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb" +
    "\016\uffbb\017\uffbb\027\163\030\162\031\uffbb\032\uffbb\033" +
    "\uffbb\043\uffbb\044\uffbb\063\uffbb\064\uffbb\065\uffbb\067\uffbb" +
    "\070\uffbb\071\uffbb\072\uffbb\073\uffbb\074\uffbb\075\uffbb\076" +
    "\uffbb\077\uffbb\100\uffbb\102\uffbb\103\uffbb\104\uffbb\112\uffbb" +
    "\113\uffbb\114\uffbb\115\uffbb\131\uffbb\001\002\000\124\002" +
    "\uffb9\003\uffb9\004\uffb9\005\uffb9\006\uffb9\007\uffb9\011\uffb9" +
    "\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\027" +
    "\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\043\uffb9\044\uffb9" +
    "\063\uffb9\064\uffb9\065\uffb9\067\uffb9\070\uffb9\071\uffb9\072" +
    "\uffb9\073\uffb9\074\uffb9\075\uffb9\076\uffb9\077\uffb9\100\uffb9" +
    "\102\uffb9\103\uffb9\104\uffb9\112\uffb9\113\uffb9\114\uffb9\115" +
    "\uffb9\131\uffb9\001\002\000\124\002\uffb8\003\uffb8\004\uffb8" +
    "\005\uffb8\006\uffb8\007\uffb8\011\uffb8\012\uffb8\013\uffb8\014" +
    "\uffb8\015\uffb8\016\uffb8\017\uffb8\027\uffb8\030\uffb8\031\uffb8" +
    "\032\uffb8\033\uffb8\043\uffb8\044\uffb8\063\uffb8\064\uffb8\065" +
    "\uffb8\067\uffb8\070\uffb8\071\uffb8\072\uffb8\073\uffb8\074\uffb8" +
    "\075\uffb8\076\uffb8\077\uffb8\100\uffb8\102\uffb8\103\uffb8\104" +
    "\uffb8\112\uffb8\113\uffb8\114\uffb8\115\uffb8\131\uffb8\001\002" +
    "\000\004\007\175\001\002\000\012\045\202\054\200\055" +
    "\203\056\201\001\002\000\004\067\177\001\002\000\102" +
    "\002\uff98\003\uff98\004\uff98\005\uff98\006\uff98\007\uff98\013" +
    "\uff98\014\uff98\015\uff98\016\uff98\017\uff98\043\uff98\044\uff98" +
    "\064\uff98\065\uff98\070\uff98\071\uff98\072\uff98\073\uff98\074" +
    "\uff98\075\uff98\076\uff98\077\uff98\100\uff98\102\uff98\103\uff98" +
    "\104\uff98\112\uff98\113\uff98\114\uff98\115\uff98\131\uff98\001" +
    "\002\000\022\007\127\046\121\047\113\050\112\051\115" +
    "\052\122\053\130\066\117\001\002\000\004\067\uff91\001" +
    "\002\000\022\007\127\046\121\047\113\050\112\051\115" +
    "\052\122\053\130\066\117\001\002\000\004\067\uff92\001" +
    "\002\000\016\035\135\036\140\040\141\041\137\042\136" +
    "\067\uff94\001\002\000\016\035\135\036\140\040\141\041" +
    "\137\042\136\067\uff93\001\002\000\016\035\135\036\140" +
    "\040\141\041\137\042\136\067\207\001\002\000\140\002" +
    "\uffb0\003\uffb0\004\uffb0\005\uffb0\006\uffb0\007\uffb0\011\uffb0" +
    "\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\027" +
    "\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\035\uffb0\036\uffb0" +
    "\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\061\uffb0\063" +
    "\uffb0\064\uffb0\065\uffb0\067\uffb0\070\uffb0\071\uffb0\072\uffb0" +
    "\073\uffb0\074\uffb0\075\uffb0\076\uffb0\077\uffb0\100\uffb0\102" +
    "\uffb0\103\uffb0\104\uffb0\112\uffb0\113\uffb0\114\uffb0\115\uffb0" +
    "\131\uffb0\001\002\000\022\007\127\046\121\047\113\050" +
    "\112\051\115\052\122\053\130\066\117\001\002\000\016" +
    "\012\uff96\035\135\036\140\040\141\041\137\042\136\001" +
    "\002\000\004\007\213\001\002\000\004\045\214\001\002" +
    "\000\022\007\127\046\121\047\113\050\112\051\115\052" +
    "\122\053\130\066\117\001\002\000\016\012\uff97\035\135" +
    "\036\140\040\141\041\137\042\136\001\002\000\022\007" +
    "\127\046\121\047\113\050\112\051\115\052\122\053\130" +
    "\066\117\001\002\000\016\011\220\035\135\036\140\040" +
    "\141\041\137\042\136\001\002\000\022\007\127\046\121" +
    "\047\113\050\112\051\115\052\122\053\130\066\117\001" +
    "\002\000\016\035\135\036\140\040\141\041\137\042\136" +
    "\067\222\001\002\000\102\002\uff85\003\uff85\004\uff85\005" +
    "\uff85\006\uff85\007\uff85\013\uff85\014\uff85\015\uff85\016\uff85" +
    "\017\uff85\043\uff85\044\uff85\064\uff85\065\uff85\070\uff85\071" +
    "\uff85\072\uff85\073\uff85\074\uff85\075\uff85\076\uff85\077\uff85" +
    "\100\uff85\102\uff85\103\uff85\104\uff85\112\uff85\113\uff85\114" +
    "\uff85\115\uff85\131\uff85\001\002\000\006\002\ufff1\006\ufff1" +
    "\001\002\000\006\002\uffe5\006\uffe5\001\002\000\006\002" +
    "\uffea\006\uffea\001\002\000\004\067\227\001\002\000\102" +
    "\002\uff83\003\uff83\004\uff83\005\uff83\006\uff83\007\uff83\013" +
    "\uff83\014\uff83\015\uff83\016\uff83\017\uff83\043\uff83\044\uff83" +
    "\064\uff83\065\uff83\070\uff83\071\uff83\072\uff83\073\uff83\074" +
    "\uff83\075\uff83\076\uff83\077\uff83\100\uff83\102\uff83\103\uff83" +
    "\104\uff83\112\uff83\113\uff83\114\uff83\115\uff83\131\uff83\001" +
    "\002\000\022\007\127\046\121\047\113\050\112\051\115" +
    "\052\122\053\130\066\117\001\002\000\016\035\135\036" +
    "\140\040\141\041\137\042\136\067\232\001\002\000\102" +
    "\002\uff82\003\uff82\004\uff82\005\uff82\006\uff82\007\uff82\013" +
    "\uff82\014\uff82\015\uff82\016\uff82\017\uff82\043\uff82\044\uff82" +
    "\064\uff82\065\uff82\070\uff82\071\uff82\072\uff82\073\uff82\074" +
    "\uff82\075\uff82\076\uff82\077\uff82\100\uff82\102\uff82\103\uff82" +
    "\104\uff82\112\uff82\113\uff82\114\uff82\115\uff82\131\uff82\001" +
    "\002\000\006\002\uffee\006\uffee\001\002\000\006\002\uffe3" +
    "\006\uffe3\001\002\000\006\002\uffe6\006\uffe6\001\002\000" +
    "\006\002\uffed\006\uffed\001\002\000\004\007\241\001\002" +
    "\000\006\002\ufff4\006\ufff4\001\002\000\106\002\uffde\003" +
    "\uffde\004\uffde\005\uffde\006\uffde\007\uffde\011\uffde\013\uffde" +
    "\014\uffde\015\uffde\016\uffde\017\uffde\043\uffde\044\uffde\045" +
    "\242\064\uffde\065\uffde\070\uffde\071\uffde\072\uffde\073\uffde" +
    "\074\uffde\075\uffde\076\uffde\077\uffde\100\uffde\102\uffde\103" +
    "\uffde\104\uffde\112\uffde\113\uffde\114\uffde\115\uffde\131\uffde" +
    "\001\002\000\022\007\127\046\121\047\113\050\112\051" +
    "\115\052\122\053\130\066\245\001\002\000\120\002\uffdd" +
    "\003\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\011\uffdd\013" +
    "\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\035\247\036\253" +
    "\037\255\040\252\041\251\042\250\043\uffdd\044\uffdd\064" +
    "\uffdd\065\uffdd\070\uffdd\071\uffdd\072\uffdd\073\uffdd\074\uffdd" +
    "\075\uffdd\076\uffdd\077\uffdd\100\uffdd\102\uffdd\103\uffdd\104" +
    "\uffdd\112\uffdd\113\uffdd\114\uffdd\115\uffdd\131\uffdd\001\002" +
    "\000\122\002\uffd1\003\uffd1\004\uffd1\005\uffd1\006\uffd1\007" +
    "\uffd1\011\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1" +
    "\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043" +
    "\uffd1\044\uffd1\064\uffd1\065\uffd1\067\uffd1\070\uffd1\071\uffd1" +
    "\072\uffd1\073\uffd1\074\uffd1\075\uffd1\076\uffd1\077\uffd1\100" +
    "\uffd1\102\uffd1\103\uffd1\104\uffd1\112\uffd1\113\uffd1\114\uffd1" +
    "\115\uffd1\131\uffd1\001\002\000\022\007\127\046\121\047" +
    "\113\050\112\051\115\052\122\053\130\066\245\001\002" +
    "\000\020\035\247\036\253\037\255\040\252\041\251\042" +
    "\250\067\254\001\002\000\022\007\127\046\121\047\113" +
    "\050\112\051\115\052\122\053\130\066\245\001\002\000" +
    "\022\007\127\046\121\047\113\050\112\051\115\052\122" +
    "\053\130\066\245\001\002\000\022\007\127\046\121\047" +
    "\113\050\112\051\115\052\122\053\130\066\245\001\002" +
    "\000\022\007\127\046\121\047\113\050\112\051\115\052" +
    "\122\053\130\066\245\001\002\000\022\007\127\046\121" +
    "\047\113\050\112\051\115\052\122\053\130\066\245\001" +
    "\002\000\122\002\uffd2\003\uffd2\004\uffd2\005\uffd2\006\uffd2" +
    "\007\uffd2\011\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017" +
    "\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2" +
    "\043\uffd2\044\uffd2\064\uffd2\065\uffd2\067\uffd2\070\uffd2\071" +
    "\uffd2\072\uffd2\073\uffd2\074\uffd2\075\uffd2\076\uffd2\077\uffd2" +
    "\100\uffd2\102\uffd2\103\uffd2\104\uffd2\112\uffd2\113\uffd2\114" +
    "\uffd2\115\uffd2\131\uffd2\001\002\000\022\007\127\046\121" +
    "\047\113\050\112\051\115\052\122\053\130\066\245\001" +
    "\002\000\122\002\uffd6\003\uffd6\004\uffd6\005\uffd6\006\uffd6" +
    "\007\uffd6\011\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017" +
    "\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\250" +
    "\043\uffd6\044\uffd6\064\uffd6\065\uffd6\067\uffd6\070\uffd6\071" +
    "\uffd6\072\uffd6\073\uffd6\074\uffd6\075\uffd6\076\uffd6\077\uffd6" +
    "\100\uffd6\102\uffd6\103\uffd6\104\uffd6\112\uffd6\113\uffd6\114" +
    "\uffd6\115\uffd6\131\uffd6\001\002\000\122\002\uffd7\003\uffd7" +
    "\004\uffd7\005\uffd7\006\uffd7\007\uffd7\011\uffd7\013\uffd7\014" +
    "\uffd7\015\uffd7\016\uffd7\017\uffd7\035\uffd7\036\uffd7\037\255" +
    "\040\252\041\251\042\250\043\uffd7\044\uffd7\064\uffd7\065" +
    "\uffd7\067\uffd7\070\uffd7\071\uffd7\072\uffd7\073\uffd7\074\uffd7" +
    "\075\uffd7\076\uffd7\077\uffd7\100\uffd7\102\uffd7\103\uffd7\104" +
    "\uffd7\112\uffd7\113\uffd7\114\uffd7\115\uffd7\131\uffd7\001\002" +
    "\000\122\002\uffd5\003\uffd5\004\uffd5\005\uffd5\006\uffd5\007" +
    "\uffd5\011\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5" +
    "\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\250\043" +
    "\uffd5\044\uffd5\064\uffd5\065\uffd5\067\uffd5\070\uffd5\071\uffd5" +
    "\072\uffd5\073\uffd5\074\uffd5\075\uffd5\076\uffd5\077\uffd5\100" +
    "\uffd5\102\uffd5\103\uffd5\104\uffd5\112\uffd5\113\uffd5\114\uffd5" +
    "\115\uffd5\131\uffd5\001\002\000\122\002\uffd4\003\uffd4\004" +
    "\uffd4\005\uffd4\006\uffd4\007\uffd4\011\uffd4\013\uffd4\014\uffd4" +
    "\015\uffd4\016\uffd4\017\uffd4\035\uffd4\036\uffd4\037\uffd4\040" +
    "\uffd4\041\uffd4\042\250\043\uffd4\044\uffd4\064\uffd4\065\uffd4" +
    "\067\uffd4\070\uffd4\071\uffd4\072\uffd4\073\uffd4\074\uffd4\075" +
    "\uffd4\076\uffd4\077\uffd4\100\uffd4\102\uffd4\103\uffd4\104\uffd4" +
    "\112\uffd4\113\uffd4\114\uffd4\115\uffd4\131\uffd4\001\002\000" +
    "\122\002\uffd3\003\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3" +
    "\011\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\035" +
    "\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3" +
    "\044\uffd3\064\uffd3\065\uffd3\067\uffd3\070\uffd3\071\uffd3\072" +
    "\uffd3\073\uffd3\074\uffd3\075\uffd3\076\uffd3\077\uffd3\100\uffd3" +
    "\102\uffd3\103\uffd3\104\uffd3\112\uffd3\113\uffd3\114\uffd3\115" +
    "\uffd3\131\uffd3\001\002\000\122\002\uffd8\003\uffd8\004\uffd8" +
    "\005\uffd8\006\uffd8\007\uffd8\011\uffd8\013\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\017\uffd8\035\uffd8\036\uffd8\037\255\040\252" +
    "\041\251\042\250\043\uffd8\044\uffd8\064\uffd8\065\uffd8\067" +
    "\uffd8\070\uffd8\071\uffd8\072\uffd8\073\uffd8\074\uffd8\075\uffd8" +
    "\076\uffd8\077\uffd8\100\uffd8\102\uffd8\103\uffd8\104\uffd8\112" +
    "\uffd8\113\uffd8\114\uffd8\115\uffd8\131\uffd8\001\002\000\004" +
    "\007\265\001\002\000\004\067\266\001\002\000\102\002" +
    "\uff9c\003\uff9c\004\uff9c\005\uff9c\006\uff9c\007\uff9c\013\uff9c" +
    "\014\uff9c\015\uff9c\016\uff9c\017\uff9c\043\uff9c\044\uff9c\064" +
    "\uff9c\065\uff9c\070\uff9c\071\uff9c\072\uff9c\073\uff9c\074\uff9c" +
    "\075\uff9c\076\uff9c\077\uff9c\100\uff9c\102\uff9c\103\uff9c\104" +
    "\uff9c\112\uff9c\113\uff9c\114\uff9c\115\uff9c\131\uff9c\001\002" +
    "\000\006\002\ufff0\006\ufff0\001\002\000\006\002\uffe1\006" +
    "\uffe1\001\002\000\032\064\305\116\303\117\276\120\273" +
    "\121\302\122\275\123\300\124\301\125\306\126\274\127" +
    "\272\130\277\001\002\000\004\011\uff76\001\002\000\004" +
    "\011\uff7e\001\002\000\004\011\uff77\001\002\000\004\011" +
    "\uff7c\001\002\000\004\011\uff7f\001\002\000\004\011\uff75" +
    "\001\002\000\004\011\uff7b\001\002\000\004\011\uff79\001" +
    "\002\000\004\011\uff7d\001\002\000\004\011\uff80\001\002" +
    "\000\004\011\307\001\002\000\004\011\uff7a\001\002\000" +
    "\004\011\uff78\001\002\000\022\007\127\046\121\047\113" +
    "\050\112\051\115\052\122\053\130\066\117\001\002\000" +
    "\016\011\311\035\135\036\140\040\141\041\137\042\136" +
    "\001\002\000\022\007\127\046\121\047\113\050\112\051" +
    "\115\052\122\053\130\066\117\001\002\000\016\011\313" +
    "\035\135\036\140\040\141\041\137\042\136\001\002\000" +
    "\022\007\127\046\121\047\113\050\112\051\115\052\122" +
    "\053\130\066\117\001\002\000\016\035\135\036\140\040" +
    "\141\041\137\042\136\067\315\001\002\000\102\002\uff86" +
    "\003\uff86\004\uff86\005\uff86\006\uff86\007\uff86\013\uff86\014" +
    "\uff86\015\uff86\016\uff86\017\uff86\043\uff86\044\uff86\064\uff86" +
    "\065\uff86\070\uff86\071\uff86\072\uff86\073\uff86\074\uff86\075" +
    "\uff86\076\uff86\077\uff86\100\uff86\102\uff86\103\uff86\104\uff86" +
    "\112\uff86\113\uff86\114\uff86\115\uff86\131\uff86\001\002\000" +
    "\006\002\uffe7\006\uffe7\001\002\000\014\013\033\014\057" +
    "\015\053\016\040\017\023\001\002\000\006\007\321\057" +
    "\322\001\002\000\106\002\uffdb\003\uffdb\004\uffdb\005\uffdb" +
    "\006\uffdb\007\uffdb\011\uffdb\013\uffdb\014\uffdb\015\uffdb\016" +
    "\uffdb\017\uffdb\043\uffdb\044\uffdb\045\345\064\uffdb\065\uffdb" +
    "\070\uffdb\071\uffdb\072\uffdb\073\uffdb\074\uffdb\075\uffdb\076" +
    "\uffdb\077\uffdb\100\uffdb\102\uffdb\103\uffdb\104\uffdb\112\uffdb" +
    "\113\uffdb\114\uffdb\115\uffdb\131\uffdb\001\002\000\004\007" +
    "\323\001\002\000\106\002\uffa9\003\uffa9\004\uffa9\005\uffa9" +
    "\006\uffa9\007\uffa9\011\uffa9\013\uffa9\014\uffa9\015\uffa9\016" +
    "\uffa9\017\uffa9\043\uffa9\044\uffa9\060\133\064\uffa9\065\uffa9" +
    "\070\uffa9\071\uffa9\072\uffa9\073\uffa9\074\uffa9\075\uffa9\076" +
    "\uffa9\077\uffa9\100\uffa9\102\uffa9\103\uffa9\104\uffa9\112\uffa9" +
    "\113\uffa9\114\uffa9\115\uffa9\131\uffa9\001\002\000\110\002" +
    "\uffa8\003\uffa8\004\uffa8\005\uffa8\006\uffa8\007\uffa8\011\uffa8" +
    "\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\043\uffa8\044" +
    "\uffa8\045\325\060\156\064\uffa8\065\uffa8\070\uffa8\071\uffa8" +
    "\072\uffa8\073\uffa8\074\uffa8\075\uffa8\076\uffa8\077\uffa8\100" +
    "\uffa8\102\uffa8\103\uffa8\104\uffa8\112\uffa8\113\uffa8\114\uffa8" +
    "\115\uffa8\131\uffa8\001\002\000\004\062\326\001\002\000" +
    "\004\062\330\001\002\000\006\011\334\063\344\001\002" +
    "\000\026\007\127\034\126\046\121\047\113\050\112\051" +
    "\115\052\122\053\130\062\330\066\117\001\002\000\020" +
    "\011\uffa1\027\163\030\162\031\165\032\164\033\166\063" +
    "\uffa1\001\002\000\006\011\340\063\343\001\002\000\006" +
    "\011\334\063\335\001\002\000\004\062\336\001\002\000" +
    "\006\011\uffa5\063\uffa5\001\002\000\024\007\127\034\126" +
    "\046\121\047\113\050\112\051\115\052\122\053\130\066" +
    "\117\001\002\000\006\011\340\063\341\001\002\000\024" +
    "\007\127\034\126\046\121\047\113\050\112\051\115\052" +
    "\122\053\130\066\117\001\002\000\006\011\uffa3\063\uffa3" +
    "\001\002\000\020\011\uffa2\027\163\030\162\031\165\032" +
    "\164\033\166\063\uffa2\001\002\000\006\011\uffa4\063\uffa4" +
    "\001\002\000\104\002\uffaa\003\uffaa\004\uffaa\005\uffaa\006" +
    "\uffaa\007\uffaa\011\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa" +
    "\017\uffaa\043\uffaa\044\uffaa\064\uffaa\065\uffaa\070\uffaa\071" +
    "\uffaa\072\uffaa\073\uffaa\074\uffaa\075\uffaa\076\uffaa\077\uffaa" +
    "\100\uffaa\102\uffaa\103\uffaa\104\uffaa\112\uffaa\113\uffaa\114" +
    "\uffaa\115\uffaa\131\uffaa\001\002\000\022\007\127\046\121" +
    "\047\113\050\112\051\115\052\122\053\130\066\245\001" +
    "\002\000\120\002\uffdc\003\uffdc\004\uffdc\005\uffdc\006\uffdc" +
    "\007\uffdc\011\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017" +
    "\uffdc\035\247\036\253\037\255\040\252\041\251\042\250" +
    "\043\uffdc\044\uffdc\064\uffdc\065\uffdc\070\uffdc\071\uffdc\072" +
    "\uffdc\073\uffdc\074\uffdc\075\uffdc\076\uffdc\077\uffdc\100\uffdc" +
    "\102\uffdc\103\uffdc\104\uffdc\112\uffdc\113\uffdc\114\uffdc\115" +
    "\uffdc\131\uffdc\001\002\000\004\007\363\001\002\000\004" +
    "\066\351\001\002\000\004\044\352\001\002\000\014\013" +
    "\033\014\057\015\053\016\040\017\023\001\002\000\006" +
    "\011\354\067\355\001\002\000\004\044\356\001\002\000" +
    "\102\002\uff89\003\uff89\004\uff89\005\uff89\006\uff89\007\uff89" +
    "\013\uff89\014\uff89\015\uff89\016\uff89\017\uff89\043\uff89\044" +
    "\uff89\064\uff89\065\uff89\070\uff89\071\uff89\072\uff89\073\uff89" +
    "\074\uff89\075\uff89\076\uff89\077\uff89\100\uff89\102\uff89\103" +
    "\uff89\104\uff89\112\uff89\113\uff89\114\uff89\115\uff89\131\uff89" +
    "\001\002\000\014\013\033\014\057\015\053\016\040\017" +
    "\023\001\002\000\004\007\360\001\002\000\006\011\uff88" +
    "\067\uff88\001\002\000\004\007\362\001\002\000\006\011" +
    "\uff87\067\uff87\001\002\000\004\066\364\001\002\000\004" +
    "\044\352\001\002\000\006\011\354\067\366\001\002\000" +
    "\102\002\uff8c\003\uff8c\004\uff8c\005\uff8c\006\uff8c\007\uff8c" +
    "\013\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c\043\uff8c\044" +
    "\uff8c\064\uff8c\065\uff8c\070\uff8c\071\uff8c\072\uff8c\073\uff8c" +
    "\074\uff8c\075\uff8c\076\uff8c\077\uff8c\100\uff8c\102\uff8c\103" +
    "\uff8c\104\uff8c\112\uff8c\113\uff8c\114\uff8c\115\uff8c\131\uff8c" +
    "\001\002\000\006\002\uffe4\006\uffe4\001\002\000\006\002" +
    "\uffe0\006\uffe0\001\002\000\024\007\127\034\126\046\121" +
    "\047\113\050\112\051\115\052\122\053\130\066\117\001" +
    "\002\000\016\027\163\030\162\031\165\032\164\033\166" +
    "\067\373\001\002\000\102\002\uff90\003\uff90\004\uff90\005" +
    "\uff90\006\uff90\007\uff90\013\uff90\014\uff90\015\uff90\016\uff90" +
    "\017\uff90\043\uff90\044\uff90\064\uff90\065\uff90\070\uff90\071" +
    "\uff90\072\uff90\073\uff90\074\uff90\075\uff90\076\uff90\077\uff90" +
    "\100\uff90\102\uff90\103\uff90\104\uff90\112\uff90\113\uff90\114" +
    "\uff90\115\uff90\131\uff90\001\002\000\004\007\376\001\002" +
    "\000\006\002\ufff2\006\ufff2\001\002\000\106\002\uffac\003" +
    "\uffac\004\uffac\005\uffac\006\uffac\007\uffac\011\uffac\013\uffac" +
    "\014\uffac\015\uffac\016\uffac\017\uffac\043\uffac\044\uffac\060" +
    "\133\064\uffac\065\uffac\070\uffac\071\uffac\072\uffac\073\uffac" +
    "\074\uffac\075\uffac\076\uffac\077\uffac\100\uffac\102\uffac\103" +
    "\uffac\104\uffac\112\uffac\113\uffac\114\uffac\115\uffac\131\uffac" +
    "\001\002\000\110\002\uffad\003\uffad\004\uffad\005\uffad\006" +
    "\uffad\007\uffad\011\uffad\013\uffad\014\uffad\015\uffad\016\uffad" +
    "\017\uffad\043\uffad\044\uffad\045\u0100\060\156\064\uffad\065" +
    "\uffad\070\uffad\071\uffad\072\uffad\073\uffad\074\uffad\075\uffad" +
    "\076\uffad\077\uffad\100\uffad\102\uffad\103\uffad\104\uffad\112" +
    "\uffad\113\uffad\114\uffad\115\uffad\131\uffad\001\002\000\004" +
    "\062\u0101\001\002\000\004\062\330\001\002\000\006\011" +
    "\334\063\u0103\001\002\000\104\002\uffab\003\uffab\004\uffab" +
    "\005\uffab\006\uffab\007\uffab\011\uffab\013\uffab\014\uffab\015" +
    "\uffab\016\uffab\017\uffab\043\uffab\044\uffab\064\uffab\065\uffab" +
    "\070\uffab\071\uffab\072\uffab\073\uffab\074\uffab\075\uffab\076" +
    "\uffab\077\uffab\100\uffab\102\uffab\103\uffab\104\uffab\112\uffab" +
    "\113\uffab\114\uffab\115\uffab\131\uffab\001\002\000\006\002" +
    "\uffe8\006\uffe8\001\002\000\024\007\127\034\126\046\121" +
    "\047\113\050\112\051\115\052\122\053\130\066\117\001" +
    "\002\000\006\045\u010a\060\156\001\002\000\004\044\352" +
    "\001\002\000\006\011\354\067\u0109\001\002\000\102\002" +
    "\uff8a\003\uff8a\004\uff8a\005\uff8a\006\uff8a\007\uff8a\013\uff8a" +
    "\014\uff8a\015\uff8a\016\uff8a\017\uff8a\043\uff8a\044\uff8a\064" +
    "\uff8a\065\uff8a\070\uff8a\071\uff8a\072\uff8a\073\uff8a\074\uff8a" +
    "\075\uff8a\076\uff8a\077\uff8a\100\uff8a\102\uff8a\103\uff8a\104" +
    "\uff8a\112\uff8a\113\uff8a\114\uff8a\115\uff8a\131\uff8a\001\002" +
    "\000\024\007\127\034\126\046\121\047\113\050\112\051" +
    "\115\052\122\053\130\066\117\001\002\000\114\002\uffa0" +
    "\003\uffa0\004\uffa0\005\uffa0\006\uffa0\007\uffa0\013\uffa0\014" +
    "\uffa0\015\uffa0\016\uffa0\017\uffa0\027\163\030\162\031\165" +
    "\032\164\033\166\043\uffa0\044\uffa0\064\uffa0\065\uffa0\070" +
    "\uffa0\071\uffa0\072\uffa0\073\uffa0\074\uffa0\075\uffa0\076\uffa0" +
    "\077\uffa0\100\uffa0\102\uffa0\103\uffa0\104\uffa0\112\uffa0\113" +
    "\uffa0\114\uffa0\115\uffa0\131\uffa0\001\002\000\114\002\uffae" +
    "\003\uffae\004\uffae\005\uffae\006\uffae\007\uffae\013\uffae\014" +
    "\uffae\015\uffae\016\uffae\017\uffae\027\163\030\162\031\165" +
    "\032\164\033\166\043\uffae\044\uffae\064\uffae\065\uffae\070" +
    "\uffae\071\uffae\072\uffae\073\uffae\074\uffae\075\uffae\076\uffae" +
    "\077\uffae\100\uffae\102\uffae\103\uffae\104\uffae\112\uffae\113" +
    "\uffae\114\uffae\115\uffae\131\uffae\001\002\000\004\067\u010e" +
    "\001\002\000\102\002\uff6f\003\uff6f\004\uff6f\005\uff6f\006" +
    "\uff6f\007\uff6f\013\uff6f\014\uff6f\015\uff6f\016\uff6f\017\uff6f" +
    "\043\uff6f\044\uff6f\064\uff6f\065\uff6f\070\uff6f\071\uff6f\072" +
    "\uff6f\073\uff6f\074\uff6f\075\uff6f\076\uff6f\077\uff6f\100\uff6f" +
    "\102\uff6f\103\uff6f\104\uff6f\112\uff6f\113\uff6f\114\uff6f\115" +
    "\uff6f\131\uff6f\001\002\000\006\002\uffe2\006\uffe2\001\002" +
    "\000\024\007\127\034\126\046\121\047\113\050\112\051" +
    "\115\052\122\053\130\066\117\001\002\000\016\027\163" +
    "\030\162\031\165\032\164\033\166\067\u0112\001\002\000" +
    "\102\002\uff9f\003\uff9f\004\uff9f\005\uff9f\006\uff9f\007\uff9f" +
    "\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f\043\uff9f\044" +
    "\uff9f\064\uff9f\065\uff9f\070\uff9f\071\uff9f\072\uff9f\073\uff9f" +
    "\074\uff9f\075\uff9f\076\uff9f\077\uff9f\100\uff9f\102\uff9f\103" +
    "\uff9f\104\uff9f\112\uff9f\113\uff9f\114\uff9f\115\uff9f\131\uff9f" +
    "\001\002\000\006\002\uffef\006\uffef\001\002\000\004\007" +
    "\u0115\001\002\000\004\011\u0116\001\002\000\014\105\u0118" +
    "\106\u011a\107\u0117\110\u011c\111\u0119\001\002\000\004\067" +
    "\uff72\001\002\000\004\067\uff74\001\002\000\004\067\uff70" +
    "\001\002\000\004\067\uff73\001\002\000\004\067\u011d\001" +
    "\002\000\004\067\uff71\001\002\000\102\002\uff84\003\uff84" +
    "\004\uff84\005\uff84\006\uff84\007\uff84\013\uff84\014\uff84\015" +
    "\uff84\016\uff84\017\uff84\043\uff84\044\uff84\064\uff84\065\uff84" +
    "\070\uff84\071\uff84\072\uff84\073\uff84\074\uff84\075\uff84\076" +
    "\uff84\077\uff84\100\uff84\102\uff84\103\uff84\104\uff84\112\uff84" +
    "\113\uff84\114\uff84\115\uff84\131\uff84\001\002\000\024\007" +
    "\127\034\126\046\121\047\113\050\112\051\115\052\122" +
    "\053\130\066\117\001\002\000\016\027\163\030\162\031" +
    "\165\032\164\033\166\067\u0120\001\002\000\102\002\uff81" +
    "\003\uff81\004\uff81\005\uff81\006\uff81\007\uff81\013\uff81\014" +
    "\uff81\015\uff81\016\uff81\017\uff81\043\uff81\044\uff81\064\uff81" +
    "\065\uff81\070\uff81\071\uff81\072\uff81\073\uff81\074\uff81\075" +
    "\uff81\076\uff81\077\uff81\100\uff81\102\uff81\103\uff81\104\uff81" +
    "\112\uff81\113\uff81\114\uff81\115\uff81\131\uff81\001\002\000" +
    "\024\007\127\034\126\046\121\047\113\050\112\051\115" +
    "\052\122\053\130\066\117\001\002\000\016\027\163\030" +
    "\162\031\165\032\164\033\166\067\u0123\001\002\000\102" +
    "\002\uff9e\003\uff9e\004\uff9e\005\uff9e\006\uff9e\007\uff9e\013" +
    "\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e\043\uff9e\044\uff9e" +
    "\064\uff9e\065\uff9e\070\uff9e\071\uff9e\072\uff9e\073\uff9e\074" +
    "\uff9e\075\uff9e\076\uff9e\077\uff9e\100\uff9e\102\uff9e\103\uff9e" +
    "\104\uff9e\112\uff9e\113\uff9e\114\uff9e\115\uff9e\131\uff9e\001" +
    "\002\000\006\002\ufff3\006\ufff3\001\002\000\114\002\uff9b" +
    "\003\uff9b\004\uff9b\005\uff9b\006\uff9b\007\uff9b\013\uff9b\014" +
    "\uff9b\015\uff9b\016\uff9b\017\uff9b\035\135\036\140\040\141" +
    "\041\137\042\136\043\uff9b\044\uff9b\064\uff9b\065\uff9b\070" +
    "\uff9b\071\uff9b\072\uff9b\073\uff9b\074\uff9b\075\uff9b\076\uff9b" +
    "\077\uff9b\100\uff9b\102\uff9b\103\uff9b\104\uff9b\112\uff9b\113" +
    "\uff9b\114\uff9b\115\uff9b\131\uff9b\001\002\000\006\002\uffec" +
    "\006\uffec\001\002\000\004\066\u0128\001\002\000\004\044" +
    "\352\001\002\000\006\011\354\067\u012a\001\002\000\102" +
    "\002\uff8d\003\uff8d\004\uff8d\005\uff8d\006\uff8d\007\uff8d\013" +
    "\uff8d\014\uff8d\015\uff8d\016\uff8d\017\uff8d\043\uff8d\044\uff8d" +
    "\064\uff8d\065\uff8d\070\uff8d\071\uff8d\072\uff8d\073\uff8d\074" +
    "\uff8d\075\uff8d\076\uff8d\077\uff8d\100\uff8d\102\uff8d\103\uff8d" +
    "\104\uff8d\112\uff8d\113\uff8d\114\uff8d\115\uff8d\131\uff8d\001" +
    "\002\000\104\002\ufff5\003\ufff5\004\ufff5\005\ufff5\006\ufff5" +
    "\007\ufff5\011\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017" +
    "\ufff5\043\ufff5\044\ufff5\064\ufff5\065\ufff5\070\ufff5\071\ufff5" +
    "\072\ufff5\073\ufff5\074\ufff5\075\ufff5\076\ufff5\077\ufff5\100" +
    "\ufff5\102\ufff5\103\ufff5\104\ufff5\112\ufff5\113\ufff5\114\ufff5" +
    "\115\ufff5\131\ufff5\001\002\000\004\007\u012d\001\002\000" +
    "\104\002\ufff6\003\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6" +
    "\011\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\043" +
    "\ufff6\044\ufff6\064\ufff6\065\ufff6\070\ufff6\071\ufff6\072\ufff6" +
    "\073\ufff6\074\ufff6\075\ufff6\076\ufff6\077\ufff6\100\ufff6\102" +
    "\ufff6\103\ufff6\104\ufff6\112\ufff6\113\ufff6\114\ufff6\115\ufff6" +
    "\131\ufff6\001\002\000\004\002\ufffb\001\002\000\006\002" +
    "\uffff\006\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012d\000\010\002\007\003\006\004\003\001\001\000" +
    "\006\003\u012e\004\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\012\006\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\u012d\006\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\015\010" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\004\044\011\062\012\060\013\047\016\024\017\020\022" +
    "\041\026\055\027\030\030\065\032\073\033\061\034\021" +
    "\035\100\036\070\037\101\040\040\041\050\042\063\043" +
    "\071\044\045\045\064\046\033\001\001\000\002\001\001" +
    "\000\060\004\044\011\u0125\012\060\013\047\016\024\017" +
    "\020\022\041\026\055\027\030\030\065\032\073\033\061" +
    "\034\021\035\100\036\070\037\101\040\040\041\050\042" +
    "\063\043\071\044\045\045\064\046\033\001\001\000\002" +
    "\001\001\000\012\015\115\021\u0124\047\122\050\117\001" +
    "\001\000\060\004\044\011\u0123\012\060\013\047\016\024" +
    "\017\020\022\041\026\055\027\030\030\065\032\073\033" +
    "\061\034\021\035\100\036\070\037\101\040\040\041\050" +
    "\042\063\043\071\044\045\045\064\046\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\004\044\011\u0112\012\060\013\047\016\024\017\020\022" +
    "\041\026\055\027\030\030\065\032\073\033\061\034\021" +
    "\035\100\036\070\037\101\040\040\041\050\042\063\043" +
    "\071\044\045\045\064\046\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\004\044\011\u010e\012\060\013" +
    "\047\016\024\017\020\022\041\026\055\027\030\030\065" +
    "\032\073\033\061\034\021\035\100\036\070\037\101\040" +
    "\040\041\050\042\063\043\071\044\045\045\064\046\033" +
    "\001\001\000\002\001\001\000\004\023\u0105\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\004\044\011\u0103" +
    "\012\060\013\047\016\024\017\020\022\041\026\055\027" +
    "\030\030\065\032\073\033\061\034\021\035\100\036\070" +
    "\037\101\040\040\041\050\042\063\043\071\044\045\045" +
    "\064\046\033\001\001\000\060\004\044\011\374\012\060" +
    "\013\047\016\024\017\020\022\041\026\055\027\030\030" +
    "\065\032\073\033\061\034\021\035\100\036\070\037\101" +
    "\040\040\041\050\042\063\043\071\044\045\045\064\046" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\004\044\011\367\012\060\013\047\016\024\017\020\022" +
    "\041\026\055\027\030\030\065\032\073\033\061\034\021" +
    "\035\100\036\070\037\101\040\040\041\050\042\063\043" +
    "\071\044\045\045\064\046\033\001\001\000\060\004\044" +
    "\011\366\012\060\013\047\016\024\017\020\022\041\026" +
    "\055\027\030\030\065\032\073\033\061\034\021\035\100" +
    "\036\070\037\101\040\040\041\050\042\063\043\071\044" +
    "\045\045\064\046\033\001\001\000\004\017\346\001\001" +
    "\000\002\001\001\000\060\004\044\011\315\012\060\013" +
    "\047\016\024\017\020\022\041\026\055\027\030\030\065" +
    "\032\073\033\061\034\021\035\100\036\070\037\101\040" +
    "\040\041\050\042\063\043\071\044\045\045\064\046\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\004\044\011\267\012\060\013\047\016\024" +
    "\017\020\022\041\026\055\027\030\030\065\032\073\033" +
    "\061\034\021\035\100\036\070\037\101\040\040\041\050" +
    "\042\063\043\071\044\045\045\064\046\033\001\001\000" +
    "\060\004\044\011\266\012\060\013\047\016\024\017\020" +
    "\022\041\026\055\027\030\030\065\032\073\033\061\034" +
    "\021\035\100\036\070\037\101\040\040\041\050\042\063" +
    "\043\071\044\045\045\064\046\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\004\044\011\237\012\060" +
    "\013\047\016\024\017\020\022\041\026\055\027\030\030" +
    "\065\032\073\033\061\034\021\035\100\036\070\037\101" +
    "\040\040\041\050\042\063\043\071\044\045\045\064\046" +
    "\033\001\001\000\060\004\044\011\235\012\060\013\047" +
    "\016\024\017\020\022\041\026\055\027\030\030\065\032" +
    "\073\033\061\034\021\035\100\036\070\037\101\040\040" +
    "\041\050\042\063\043\071\044\045\045\064\046\033\001" +
    "\001\000\002\001\001\000\060\004\044\011\234\012\060" +
    "\013\047\016\024\017\020\022\041\026\055\027\030\030" +
    "\065\032\073\033\061\034\021\035\100\036\070\037\101" +
    "\040\040\041\050\042\063\043\071\044\045\045\064\046" +
    "\033\001\001\000\060\004\044\011\233\012\060\013\047" +
    "\016\024\017\020\022\041\026\055\027\030\030\065\032" +
    "\073\033\061\034\021\035\100\036\070\037\101\040\040" +
    "\041\050\042\063\043\071\044\045\045\064\046\033\001" +
    "\001\000\060\004\044\011\232\012\060\013\047\016\024" +
    "\017\020\022\041\026\055\027\030\030\065\032\073\033" +
    "\061\034\021\035\100\036\070\037\101\040\040\041\050" +
    "\042\063\043\071\044\045\045\064\046\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\004\044\011\224" +
    "\012\060\013\047\016\024\017\020\022\041\026\055\027" +
    "\030\030\065\032\073\033\061\034\021\035\100\036\070" +
    "\037\101\040\040\041\050\042\063\043\071\044\045\045" +
    "\064\046\033\001\001\000\060\004\044\011\223\012\060" +
    "\013\047\016\024\017\020\022\041\026\055\027\030\030" +
    "\065\032\073\033\061\034\021\035\100\036\070\037\101" +
    "\040\040\041\050\042\063\043\071\044\045\045\064\046" +
    "\033\001\001\000\002\001\001\000\060\004\044\011\222" +
    "\012\060\013\047\016\024\017\020\022\041\026\055\027" +
    "\030\030\065\032\073\033\061\034\021\035\100\036\070" +
    "\037\101\040\040\041\050\042\063\043\071\044\045\045" +
    "\064\046\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\060\004\044\011" +
    "\103\012\060\013\047\016\024\017\020\022\041\026\055" +
    "\027\030\030\065\032\073\033\061\034\021\035\100\036" +
    "\070\037\101\040\040\041\050\042\063\043\071\044\045" +
    "\045\064\046\033\001\001\000\060\004\044\011\102\012" +
    "\060\013\047\016\024\017\020\022\041\026\055\027\030" +
    "\030\065\032\073\033\061\034\021\035\100\036\070\037" +
    "\101\040\040\041\050\042\063\043\071\044\045\045\064" +
    "\046\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\053\107\001\001\000\004\017\211\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\015\115\020\124\021" +
    "\113\047\122\050\117\054\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\015\115\021\205\047\122\050\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\015\115\020\160\021\113\047\122\050\117\001" +
    "\001\000\004\023\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\015\115\021\147\047\122\050\117\051" +
    "\151\052\150\001\001\000\012\015\115\021\133\047\122" +
    "\050\117\001\001\000\002\001\001\000\012\015\115\021" +
    "\146\047\122\050\117\001\001\000\012\015\115\021\145" +
    "\047\122\050\117\001\001\000\012\015\115\021\144\047" +
    "\122\050\117\001\001\000\012\015\115\021\143\047\122" +
    "\050\117\001\001\000\012\015\115\021\142\047\122\050" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\015\115\021\153\047\122\050\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\015\115\021\156" +
    "\047\122\050\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\015\115\020\172\021\113" +
    "\047\122\050\117\001\001\000\014\015\115\020\171\021" +
    "\113\047\122\050\117\001\001\000\014\015\115\020\170" +
    "\021\113\047\122\050\117\001\001\000\014\015\115\020" +
    "\167\021\113\047\122\050\117\001\001\000\014\015\115" +
    "\020\166\021\113\047\122\050\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\015\115" +
    "\021\204\047\122\050\117\001\001\000\002\001\001\000" +
    "\012\015\115\021\203\047\122\050\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\015\115\021\210\047\122" +
    "\050\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\015\115\021\214\047\122\050\117" +
    "\001\001\000\002\001\001\000\012\015\115\021\216\047" +
    "\122\050\117\001\001\000\002\001\001\000\012\015\115" +
    "\021\220\047\122\050\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\015" +
    "\115\021\230\047\122\050\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\014\242\015\243\047" +
    "\122\050\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\014\245\015\243\047\122\050\117\001\001\000" +
    "\002\001\001\000\012\014\262\015\243\047\122\050\117" +
    "\001\001\000\012\014\261\015\243\047\122\050\117\001" +
    "\001\000\012\014\260\015\243\047\122\050\117\001\001" +
    "\000\012\014\257\015\243\047\122\050\117\001\001\000" +
    "\012\014\256\015\243\047\122\050\117\001\001\000\002" +
    "\001\001\000\012\014\255\015\243\047\122\050\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\057\303\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\015\115\021\307\047\122\050\117\001\001\000\002" +
    "\001\001\000\012\015\115\021\311\047\122\050\117\001" +
    "\001\000\002\001\001\000\012\015\115\021\313\047\122" +
    "\050\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\317\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\323\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\326" +
    "\001\001\000\002\001\001\000\020\015\115\020\330\021" +
    "\113\024\332\025\331\047\122\050\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\015\115\020\330\021\113" +
    "\025\336\047\122\050\117\001\001\000\002\001\001\000" +
    "\014\015\115\020\341\021\113\047\122\050\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\014\345\015\243\047\122\050\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\056\352\001\001\000\004\017\360\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\356\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\056\364\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\015\115\020" +
    "\371\021\113\047\122\050\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\376\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\u0101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\015\115\020\u010b\021\113" +
    "\047\122\050\117\001\001\000\002\001\001\000\004\056" +
    "\u0107\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\015\115\020\u010a\021\113\047\122\050\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\015\115\020\u0110\021" +
    "\113\047\122\050\117\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\060\u011a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\015\115" +
    "\020\u011e\021\113\047\122\050\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\015\115\020\u0121\021\113" +
    "\047\122\050\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\056\u0128\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoCode$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoCode$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoCode$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //codigo
/*
	public void syntax_error(Symbol s) {
		//System.out.println("fallo");
	}

	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
		//System.out.println("fallo en algo");
	}*/


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoCode$actions {


    

  private final AnalizadorSintacticoCode parser;

  /** Constructor */
  CUP$AnalizadorSintacticoCode$actions(AnalizadorSintacticoCode parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoCode$do_action(
    int                        CUP$AnalizadorSintacticoCode$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoCode$parser,
    java.util.Stack            CUP$AnalizadorSintacticoCode$stack,
    int                        CUP$AnalizadorSintacticoCode$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoCode$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoCode$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // struct_principal ::= PRINCIPAL PA_A PA_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_principal",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // tipo_orden ::= PRIMOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("tipo_orden",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // tipo_orden ::= IMPARES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("tipo_orden",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // tipo_orden ::= PARES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("tipo_orden",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // tipo_orden ::= DESCENDENTE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("tipo_orden",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // tipo_orden ::= ASCENDENTE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("tipo_orden",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // notas ::= LA_S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // notas ::= SOL_S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // notas ::= FA_S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // notas ::= RE_S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // notas ::= DO_S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // notas ::= SI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // notas ::= LA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // notas ::= SOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // notas ::= FA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // notas ::= MI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // notas ::= RE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // notas ::= DO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // struct_mensaje ::= MENSAJE PA_A struct_valor_logico PA_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_mensaje",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // struct_longitud ::= LONGITUD PA_A valor_operacion PA_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_longitud",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // struct_sumarizar ::= SUMARIZAR PA_A PA_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_sumarizar",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // struct_ordenar ::= ORDENAR PA_A IDENTIFICADOR COMA tipo_orden PA_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_ordenar",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // struct_esperar ::= ESPERAR PA_A valor_operacion COMA valor_operacion PA_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_esperar",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // struct_reproducir ::= REPRODUCIR PA_A notas COMA valor_operacion COMA valor_operacion COMA valor_operacion PA_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_reproducir",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // struct_parametros ::= VAR tipo_dato IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_parametros",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // struct_parametros ::= struct_parametros COMA VAR tipo_dato IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_parametros",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // struct_procedimiento ::= KEEP IDENTIFICADOR PA_A struct_parametros PA_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_procedimiento",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // struct_procedimiento ::= IDENTIFICADOR PA_A struct_parametros PA_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_procedimiento",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // struct_funcion ::= RETORNAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_funcion",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // struct_funcion ::= KEEP tipo_dato IDENTIFICADOR PA_A struct_parametros PA_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_funcion",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // struct_funcion ::= tipo_dato IDENTIFICADOR PA_A struct_parametros PA_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_funcion",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // struct_hacer ::= CONTINUAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_hacer",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // struct_hacer ::= HACER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_hacer",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // struct_mientras ::= MIENTRAS PA_A struct_valor_logico PA_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_mientras",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // incremento_para ::= IDENTIFICADOR MENOS_MENOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("incremento_para",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // incremento_para ::= IDENTIFICADOR MAS_MAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("incremento_para",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // incremento_para ::= IDENTIFICADOR MAS_IGUAL valor_operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("incremento_para",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // incremento_para ::= IDENTIFICADOR IGUAL valor_operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("incremento_para",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // condicion_para ::= struct_valor_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("condicion_para",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // para_asig_var ::= IDENTIFICADOR IGUAL valor_operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("para_asig_var",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // para_asig_var ::= VAR tipo_dato IDENTIFICADOR IGUAL valor_operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("para_asig_var",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // struct_para ::= PARA PA_A para_asig_var PUNTO_COMA condicion_para PUNTO_COMA incremento_para PA_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_para",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // struct_switch ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_switch",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // struct_switch ::= SALIR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_switch",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // struct_switch ::= CASO valor_operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_switch",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // struct_switch ::= SWITCH PA_A IDENTIFICADOR PA_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_switch",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // struct_sino ::= SINO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_sino",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // struct_sino ::= SINO_SI PA_A struct_valor_logico PA_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_sino",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // struct_si ::= SI PA_A struct_valor_logico PA_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_si",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // struct_asig_arreglo ::= IDENTIFICADOR dim_arreglo IGUAL struct_valor_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_asig_arreglo",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // valores_array ::= struct_valor_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("valores_array",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // valores_array ::= valores_array COMA struct_valor_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("valores_array",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // valor_arreglo ::= valor_arreglo COMA LLAVE_A valores_array LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("valor_arreglo",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // valor_arreglo ::= LLAVE_A valores_array LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("valor_arreglo",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // valor_arreglo ::= LLAVE_A valor_arreglo LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("valor_arreglo",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // dim_arreglo ::= CORCHETE_A valor_operacion CORCHETE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("dim_arreglo",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // dim_arreglo ::= dim_arreglo CORCHETE_A valor_operacion CORCHETE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("dim_arreglo",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // struct_declaracion_array ::= keep_state VAR tipo_dato ARREGLO IDENTIFICADOR dim_arreglo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // struct_declaracion_array ::= keep_state VAR tipo_dato ARREGLO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // struct_declaracion_array ::= keep_state VAR tipo_dato ARREGLO IDENTIFICADOR dim_arreglo IGUAL LLAVE_A valor_arreglo LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // struct_declaracion_array ::= struct_declaracion_array COMA IDENTIFICADOR dim_arreglo IGUAL LLAVE_A valor_arreglo LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // struct_declaracion_array ::= struct_declaracion_array COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // struct_declaracion_array ::= struct_declaracion_array COMA IDENTIFICADOR dim_arreglo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // struc_asig_var ::= IDENTIFICADOR IGUAL struct_valor_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struc_asig_var",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // valor_operacion ::= valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("valor_operacion",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // valor_operacion ::= PA_A valor_operacion PA_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("valor_operacion",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // valor_operacion ::= valor_operacion POTENCIA valor_operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("valor_operacion",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // valor_operacion ::= valor_operacion MODULO valor_operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("valor_operacion",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // valor_operacion ::= valor_operacion DIVISION valor_operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("valor_operacion",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // valor_operacion ::= valor_operacion MENOS valor_operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("valor_operacion",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // valor_operacion ::= valor_operacion MAS valor_operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("valor_operacion",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // struct_valor_logico ::= valor_operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_valor_logico",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // struct_valor_logico ::= NOT struct_valor_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_valor_logico",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // struct_valor_logico ::= struct_valor_logico NAND struct_valor_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_valor_logico",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // struct_valor_logico ::= struct_valor_logico AND struct_valor_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_valor_logico",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // struct_valor_logico ::= struct_valor_logico XOR struct_valor_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_valor_logico",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // struct_valor_logico ::= struct_valor_logico NOR struct_valor_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_valor_logico",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // struct_valor_logico ::= struct_valor_logico OR struct_valor_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_valor_logico",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // tipo_dato ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("tipo_dato",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // tipo_dato ::= CADENA_RSV 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("tipo_dato",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tipo_dato ::= CARACTER_RSV 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("tipo_dato",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // tipo_dato ::= ENTERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("tipo_dato",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // tipo_dato ::= DOBLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("tipo_dato",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // struct_llamada_arreglo ::= IDENTIFICADOR dim_arreglo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_llamada_arreglo",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // state_params ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("state_params",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // state_params ::= parametros 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("state_params",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // parametros ::= valor_operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("parametros",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // parametros ::= parametros COMA valor_operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("parametros",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // strunt_llamada_funcion ::= IDENTIFICADOR PA_A state_params PA_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("strunt_llamada_funcion",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // valor ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // valor ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // valor ::= CARACTER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // valor ::= CADENA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // valor ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // valor ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // valor ::= struct_llamada_arreglo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // valor ::= strunt_llamada_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // valor ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // valor_declaracion_operacion ::= valor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("valor_declaracion_operacion",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // valor_declaracion_operacion ::= PA_A valor_declaracion_operacion PA_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("valor_declaracion_operacion",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // valor_declaracion_operacion ::= valor_declaracion_operacion POTENCIA valor_declaracion_operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("valor_declaracion_operacion",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // valor_declaracion_operacion ::= valor_declaracion_operacion MODULO valor_declaracion_operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("valor_declaracion_operacion",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // valor_declaracion_operacion ::= valor_declaracion_operacion DIVISION valor_declaracion_operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("valor_declaracion_operacion",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // valor_declaracion_operacion ::= valor_declaracion_operacion POR valor_declaracion_operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("valor_declaracion_operacion",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // valor_declaracion_operacion ::= valor_declaracion_operacion MENOS valor_declaracion_operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("valor_declaracion_operacion",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // valor_declaracion_operacion ::= valor_declaracion_operacion MAS valor_declaracion_operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("valor_declaracion_operacion",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // keep_state ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("keep_state",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // keep_state ::= KEEP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("keep_state",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // struct_declaracion_var ::= keep_state VAR tipo_dato IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // struct_declaracion_var ::= keep_state VAR tipo_dato IDENTIFICADOR IGUAL valor_declaracion_operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // struct_declaracion_var ::= struct_declaracion_var COMA IDENTIFICADOR IGUAL valor_declaracion_operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // struct_declaracion_var ::= struct_declaracion_var COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // struc_code ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struc_code",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // struc_code ::= comentarios struc_code 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struc_code",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // struc_code ::= error struc_code 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struc_code",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // struc_code ::= struct_principal struc_code 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struc_code",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // struc_code ::= struct_mensaje struc_code 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struc_code",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // struc_code ::= struct_longitud struc_code 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struc_code",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // struc_code ::= struct_sumarizar struc_code 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struc_code",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // struc_code ::= struct_ordenar struc_code 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struc_code",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // struc_code ::= struct_esperar struc_code 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struc_code",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // struc_code ::= struct_reproducir struc_code 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struc_code",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // struc_code ::= struct_procedimiento struc_code 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struc_code",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // struc_code ::= struct_funcion struc_code 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struc_code",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // struc_code ::= struct_hacer struc_code 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struc_code",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // struc_code ::= struct_mientras struc_code 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struc_code",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // struc_code ::= struct_para struc_code 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struc_code",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // struc_code ::= struct_switch struc_code 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struc_code",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // struc_code ::= struct_sino struc_code 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struc_code",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // struc_code ::= struct_si struc_code 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struc_code",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // struc_code ::= struct_asig_arreglo struc_code 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struc_code",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // struc_code ::= struct_declaracion_array struc_code 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struc_code",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // struc_code ::= struc_asig_var struc_code 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struc_code",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // struc_code ::= struct_declaracion_var struc_code 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struc_code",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // struct_extiende ::= EXTIENDE IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_extiende",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // struct_extiende ::= struct_extiende COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_extiende",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // extiende_state ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("extiende_state",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // extiende_state ::= struct_extiende 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("extiende_state",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // struct_pista ::= PISTA IDENTIFICADOR extiende_state struc_code 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("struct_pista",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigo ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigo ::= struct_pista codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // comentarios ::= COMENTARIO_BLOQUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("comentarios",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // comentarios ::= COMENTARIO_LINEA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("comentarios",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // blanco ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("blanco",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // blanco ::= comentarios blanco 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("blanco",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= blanco codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoCode$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.elementAt(CUP$AnalizadorSintacticoCode$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCode$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoCode$parser.done_parsing();
          return CUP$AnalizadorSintacticoCode$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

