// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: Lexico.jflex

package frontend.gui.editor;

import java_cup.runtime.*;
import java.util.ArrayList;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class AnalizadorLexicoCode implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  3,  4,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     5,  6,  7,  8,  0,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
    20, 20, 20, 20, 20, 20, 20, 20, 20, 20,  0, 21, 22, 23, 24,  0, 
    25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 32, 35, 36, 37, 32, 38, 
    39, 32, 40, 41, 42, 32, 43, 32, 32, 32, 32, 44,  0, 45, 46, 47, 
     0, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 
    63, 32, 64, 65, 66, 67, 43, 68, 69, 32, 70, 71, 72, 73,  0,  0, 
     0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 32,  0,  0,  0,  0,  0,  0,  0, 32,  0,  0,  0, 32,  0,  0, 
     0, 32,  0, 32,  0,  0,  0,  0,  0,  0, 32,  0,  0,  0,  0,  0, 
     0, 32,  0,  0,  0,  0,  0,  0,  0, 32,  0,  0,  0, 32,  0,  0, 
     0, 32,  0, 32,  0,  0,  0,  0,  0,  0, 32,  0,  0,  0,  0,  0
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\2\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\1\22\20\1\21\1\22\1\23\6\20"+
    "\1\24\1\1\1\25\1\26\1\0\1\27\2\0\1\30"+
    "\1\31\1\32\2\0\1\33\1\34\1\35\2\0\1\36"+
    "\1\37\1\40\1\0\1\41\7\20\1\42\3\20\1\43"+
    "\3\20\1\44\2\20\1\45\4\20\1\46\1\20\1\47"+
    "\13\20\1\50\1\51\1\52\2\53\1\54\2\0\1\55"+
    "\1\0\11\20\1\56\4\20\1\57\4\20\1\60\7\20"+
    "\1\61\4\20\1\62\3\20\1\63\2\20\1\0\1\64"+
    "\6\20\1\65\11\20\1\66\4\20\1\67\7\20\1\70"+
    "\1\71\2\20\1\72\1\20\1\73\1\64\10\20\1\74"+
    "\3\20\1\75\1\76\5\20\1\77\1\100\4\20\1\101"+
    "\1\0\7\20\1\102\3\20\1\103\7\20\1\104\3\20"+
    "\1\0\1\20\1\105\2\20\1\106\1\20\1\107\2\20"+
    "\1\110\1\111\1\20\1\112\1\20\1\113\1\20\1\114"+
    "\3\20\1\115\4\20\1\116\1\20\1\117\1\120\1\121"+
    "\2\20\1\122\4\20\1\123\1\124\1\20\1\125\1\20"+
    "\1\126\1\127\1\130";

  private static int [] zzUnpackAction() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\112\0\224\0\336\0\u0128\0\112\0\u0172\0\u01bc"+
    "\0\112\0\112\0\112\0\u0206\0\112\0\u0250\0\112\0\u029a"+
    "\0\112\0\u02e4\0\u032e\0\u0378\0\u03c2\0\u040c\0\u0456\0\u04a0"+
    "\0\u04ea\0\u0534\0\u057e\0\u05c8\0\u0612\0\u065c\0\u06a6\0\u06f0"+
    "\0\u073a\0\u0784\0\u07ce\0\u0818\0\u0862\0\u08ac\0\112\0\112"+
    "\0\112\0\u08f6\0\u0940\0\u098a\0\u09d4\0\u0a1e\0\u0a68\0\112"+
    "\0\u0ab2\0\112\0\112\0\u0afc\0\112\0\u0b46\0\u0128\0\112"+
    "\0\112\0\112\0\u0b90\0\u0bda\0\112\0\112\0\112\0\u0c24"+
    "\0\u0c6e\0\112\0\112\0\112\0\u0cb8\0\112\0\u0d02\0\u0d4c"+
    "\0\u0d96\0\u0de0\0\u0e2a\0\u0e74\0\u0ebe\0\u0f08\0\u0f52\0\u0f9c"+
    "\0\u0fe6\0\u1030\0\u107a\0\u10c4\0\u110e\0\u1158\0\u11a2\0\u11ec"+
    "\0\u1236\0\u1280\0\u12ca\0\u1314\0\u135e\0\u13a8\0\u13f2\0\u143c"+
    "\0\u1486\0\u14d0\0\u151a\0\u1564\0\u15ae\0\u15f8\0\u1642\0\u168c"+
    "\0\u16d6\0\u1236\0\u1720\0\112\0\112\0\112\0\112\0\u0b90"+
    "\0\u0c24\0\u176a\0\u17b4\0\112\0\u17fe\0\u1848\0\u1892\0\u18dc"+
    "\0\u1926\0\u1970\0\u19ba\0\u1a04\0\u1a4e\0\u1a98\0\112\0\u1ae2"+
    "\0\u1b2c\0\u1b76\0\u1bc0\0\112\0\u1c0a\0\u1c54\0\u1c9e\0\u1ce8"+
    "\0\112\0\u1d32\0\u1d7c\0\u1dc6\0\u1e10\0\u1e5a\0\u1ea4\0\u1eee"+
    "\0\112\0\u1f38\0\u1f82\0\u1fcc\0\u2016\0\u2060\0\u20aa\0\u20f4"+
    "\0\u213e\0\u057e\0\u2188\0\u21d2\0\u221c\0\u176a\0\u2266\0\u22b0"+
    "\0\u22fa\0\u2344\0\u238e\0\u23d8\0\u057e\0\u2422\0\u246c\0\u24b6"+
    "\0\u2500\0\u254a\0\u2594\0\u25de\0\u2628\0\u2672\0\u057e\0\u26bc"+
    "\0\u2706\0\u2750\0\u279a\0\u057e\0\u27e4\0\u282e\0\u2878\0\u28c2"+
    "\0\u290c\0\u2956\0\u29a0\0\u29ea\0\112\0\u2a34\0\u2a7e\0\u057e"+
    "\0\u2ac8\0\u057e\0\112\0\u2b12\0\u2b5c\0\u2ba6\0\u2bf0\0\u2c3a"+
    "\0\u2c84\0\u2cce\0\u2d18\0\u057e\0\u2d62\0\u2dac\0\u2df6\0\u057e"+
    "\0\u057e\0\u2e40\0\u2e8a\0\u2ed4\0\u2f1e\0\u2f68\0\u057e\0\u057e"+
    "\0\u2fb2\0\u2ffc\0\u3046\0\u3090\0\u057e\0\u30da\0\u3124\0\u316e"+
    "\0\u31b8\0\u3202\0\u324c\0\u3296\0\u32e0\0\u057e\0\u332a\0\u3374"+
    "\0\u33be\0\u057e\0\u3408\0\u3452\0\u349c\0\u34e6\0\u3530\0\u357a"+
    "\0\u35c4\0\u057e\0\u360e\0\u3658\0\u36a2\0\u36ec\0\u3736\0\u057e"+
    "\0\u3780\0\u37ca\0\u057e\0\u3814\0\u057e\0\u385e\0\u38a8\0\u057e"+
    "\0\u057e\0\u38f2\0\u057e\0\u393c\0\u057e\0\u3986\0\u057e\0\u39d0"+
    "\0\u3a1a\0\u3a64\0\112\0\u3aae\0\u3af8\0\u3b42\0\u3b8c\0\u057e"+
    "\0\u3bd6\0\u057e\0\u057e\0\u057e\0\u3c20\0\u3c6a\0\u057e\0\u3cb4"+
    "\0\u3cfe\0\u3d48\0\u3d92\0\u057e\0\u057e\0\u3ddc\0\u057e\0\u3e26"+
    "\0\u057e\0\u057e\0\u057e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\2\0\1\3\1\4\1\5\1\2\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\2\1\17\1\20\1\21\1\22\1\23\1\24\1\2"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\2\1\25\1\26"+
    "\1\27\1\52\1\31\1\53\1\33\1\34\1\35\1\33"+
    "\1\36\1\54\1\55\1\33\1\41\1\42\1\56\1\57"+
    "\1\45\4\33\1\60\1\61\1\62\113\0\2\3\2\0"+
    "\1\3\112\0\1\63\3\0\1\64\14\0\1\65\60\0"+
    "\1\66\1\0\7\67\1\70\102\67\12\0\1\71\75\0"+
    "\1\72\7\0\1\73\1\0\1\74\2\73\3\0\1\73"+
    "\2\0\4\73\4\0\23\73\3\0\30\73\1\0\1\73"+
    "\20\0\1\75\7\0\1\76\103\0\1\77\112\0\1\100"+
    "\1\0\1\20\106\0\1\101\5\0\1\102\111\0\1\103"+
    "\111\0\1\104\1\105\41\0\1\106\43\0\1\33\5\0"+
    "\22\33\3\0\5\33\1\107\13\33\1\110\1\111\5\33"+
    "\27\0\1\33\5\0\22\33\3\0\17\33\1\112\10\33"+
    "\27\0\1\33\5\0\22\33\3\0\1\33\1\113\15\33"+
    "\1\114\10\33\27\0\1\33\5\0\22\33\3\0\5\33"+
    "\1\115\11\33\1\116\10\33\27\0\1\33\5\0\22\33"+
    "\3\0\16\33\1\117\3\33\1\120\3\33\1\121\1\33"+
    "\27\0\1\33\5\0\22\33\3\0\1\33\1\122\26\33"+
    "\27\0\1\33\5\0\22\33\3\0\30\33\27\0\1\33"+
    "\5\0\22\33\3\0\1\33\1\123\26\33\27\0\1\33"+
    "\5\0\22\33\3\0\15\33\1\124\12\33\27\0\1\33"+
    "\5\0\22\33\3\0\5\33\1\125\22\33\27\0\1\33"+
    "\5\0\22\33\3\0\1\33\1\126\15\33\1\127\10\33"+
    "\27\0\1\33\5\0\22\33\3\0\5\33\1\130\3\33"+
    "\1\131\16\33\27\0\1\33\5\0\22\33\3\0\21\33"+
    "\1\132\6\33\27\0\1\33\5\0\22\33\3\0\1\33"+
    "\1\133\7\33\1\134\7\33\1\135\6\33\27\0\1\33"+
    "\5\0\22\33\3\0\5\33\1\136\22\33\27\0\1\33"+
    "\5\0\22\33\3\0\1\33\1\137\7\33\1\140\5\33"+
    "\1\141\4\33\1\142\1\143\2\33\27\0\1\33\5\0"+
    "\22\33\3\0\21\33\1\144\6\33\27\0\1\33\5\0"+
    "\22\33\3\0\1\33\1\145\3\33\1\146\11\33\1\147"+
    "\10\33\27\0\1\33\5\0\22\33\3\0\5\33\1\115"+
    "\11\33\1\150\10\33\27\0\1\33\5\0\22\33\3\0"+
    "\1\33\1\151\26\33\27\0\1\33\5\0\22\33\3\0"+
    "\17\33\1\127\10\33\27\0\1\33\5\0\22\33\3\0"+
    "\5\33\1\130\3\33\1\152\16\33\27\0\1\33\5\0"+
    "\22\33\3\0\5\33\1\153\22\33\27\0\1\33\5\0"+
    "\22\33\3\0\1\33\1\137\7\33\1\140\12\33\1\142"+
    "\1\143\2\33\113\0\1\154\13\0\1\155\207\0\1\156"+
    "\14\0\1\157\106\0\1\73\2\0\1\160\61\0\1\73"+
    "\2\0\1\73\1\0\1\73\33\0\1\161\65\0\16\162"+
    "\1\0\2\162\1\163\70\162\1\0\1\105\1\164\1\0"+
    "\3\105\1\165\3\105\3\0\1\105\2\0\4\105\4\0"+
    "\23\105\3\0\30\105\1\0\1\105\25\0\1\33\5\0"+
    "\22\33\3\0\22\33\1\166\5\33\27\0\1\33\5\0"+
    "\22\33\3\0\21\33\1\167\6\33\27\0\1\33\5\0"+
    "\22\33\3\0\3\33\1\170\24\33\27\0\1\33\5\0"+
    "\22\33\3\0\17\33\1\171\10\33\27\0\1\33\5\0"+
    "\22\33\3\0\4\33\1\172\14\33\1\173\1\174\5\33"+
    "\27\0\1\33\5\0\22\33\3\0\16\33\1\175\11\33"+
    "\27\0\1\33\5\0\22\33\3\0\6\33\1\176\21\33"+
    "\13\0\1\177\13\0\1\33\5\0\22\33\3\0\2\33"+
    "\1\200\25\33\27\0\1\33\5\0\22\33\3\0\23\33"+
    "\1\201\4\33\27\0\1\33\5\0\22\33\3\0\20\33"+
    "\1\202\7\33\27\0\1\33\5\0\22\33\3\0\23\33"+
    "\1\203\4\33\13\0\1\204\13\0\1\33\5\0\22\33"+
    "\3\0\14\33\1\205\13\33\27\0\1\33\5\0\22\33"+
    "\3\0\3\33\1\206\24\33\27\0\1\33\5\0\22\33"+
    "\3\0\20\33\1\207\7\33\27\0\1\33\5\0\22\33"+
    "\3\0\5\33\1\210\22\33\13\0\1\211\13\0\1\33"+
    "\5\0\22\33\3\0\30\33\27\0\1\33\5\0\22\33"+
    "\3\0\16\33\1\212\11\33\27\0\1\33\5\0\22\33"+
    "\3\0\16\33\1\213\11\33\27\0\1\33\5\0\22\33"+
    "\3\0\5\33\1\214\22\33\27\0\1\33\5\0\22\33"+
    "\3\0\4\33\1\215\23\33\27\0\1\33\5\0\22\33"+
    "\3\0\21\33\1\216\6\33\27\0\1\33\5\0\22\33"+
    "\3\0\22\33\1\217\5\33\27\0\1\33\5\0\22\33"+
    "\3\0\11\33\1\220\16\33\13\0\1\221\13\0\1\33"+
    "\5\0\22\33\3\0\20\33\1\222\2\33\1\223\4\33"+
    "\27\0\1\33\5\0\22\33\3\0\14\33\1\224\13\33"+
    "\27\0\1\33\5\0\22\33\3\0\16\33\1\225\11\33"+
    "\27\0\1\33\5\0\22\33\3\0\14\33\1\226\13\33"+
    "\27\0\1\33\5\0\22\33\3\0\15\33\1\227\12\33"+
    "\27\0\1\33\5\0\22\33\3\0\11\33\1\230\16\33"+
    "\27\0\1\33\5\0\22\33\3\0\24\33\1\231\3\33"+
    "\27\0\1\33\5\0\22\33\3\0\21\33\1\232\6\33"+
    "\27\0\1\33\5\0\22\33\3\0\21\33\1\233\6\33"+
    "\27\0\1\33\5\0\22\33\3\0\11\33\1\234\16\33"+
    "\27\0\1\33\5\0\22\33\3\0\2\33\1\200\25\33"+
    "\27\0\1\33\5\0\22\33\3\0\14\33\1\205\13\33"+
    "\27\0\1\33\5\0\22\33\3\0\20\33\1\222\2\33"+
    "\1\223\4\33\3\0\21\162\1\235\111\162\1\235\6\162"+
    "\1\236\61\162\7\165\1\105\102\165\24\0\1\33\5\0"+
    "\22\33\3\0\3\33\1\237\24\33\27\0\1\33\5\0"+
    "\22\33\3\0\5\33\1\240\22\33\27\0\1\33\5\0"+
    "\22\33\3\0\5\33\1\241\22\33\27\0\1\33\5\0"+
    "\22\33\3\0\14\33\1\242\13\33\27\0\1\33\5\0"+
    "\22\33\3\0\5\33\1\243\22\33\27\0\1\33\5\0"+
    "\22\33\3\0\1\33\1\244\26\33\27\0\1\33\5\0"+
    "\22\33\3\0\17\33\1\245\10\33\27\0\1\33\5\0"+
    "\22\33\3\0\23\33\1\246\4\33\27\0\1\33\5\0"+
    "\22\33\3\0\1\33\1\247\26\33\27\0\1\33\5\0"+
    "\22\33\3\0\14\33\1\250\13\33\27\0\1\33\5\0"+
    "\22\33\3\0\5\33\1\251\22\33\27\0\1\33\5\0"+
    "\22\33\3\0\5\33\1\252\22\33\27\0\1\33\5\0"+
    "\22\33\3\0\11\33\1\253\16\33\27\0\1\33\5\0"+
    "\22\33\3\0\22\33\1\254\5\33\27\0\1\33\5\0"+
    "\22\33\3\0\5\33\1\255\22\33\27\0\1\33\5\0"+
    "\22\33\3\0\1\33\1\256\26\33\27\0\1\33\5\0"+
    "\22\33\3\0\20\33\1\257\7\33\27\0\1\33\5\0"+
    "\22\33\3\0\7\33\1\260\20\33\27\0\1\33\5\0"+
    "\22\33\3\0\22\33\1\261\5\33\27\0\1\33\5\0"+
    "\22\33\3\0\16\33\1\262\11\33\27\0\1\33\5\0"+
    "\22\33\3\0\5\33\1\263\22\33\27\0\1\33\5\0"+
    "\22\33\3\0\1\33\1\264\3\33\1\265\22\33\27\0"+
    "\1\33\5\0\22\33\3\0\23\33\1\266\4\33\27\0"+
    "\1\33\5\0\22\33\3\0\15\33\1\267\1\270\11\33"+
    "\27\0\1\33\5\0\22\33\3\0\21\33\1\271\6\33"+
    "\27\0\1\33\5\0\22\33\3\0\17\33\1\272\10\33"+
    "\27\0\1\33\5\0\22\33\3\0\11\33\1\273\16\33"+
    "\27\0\1\33\5\0\22\33\3\0\17\33\1\274\10\33"+
    "\13\0\1\275\13\0\1\33\5\0\22\33\3\0\30\33"+
    "\27\0\1\33\5\0\22\33\3\0\1\33\1\276\26\33"+
    "\27\0\1\33\5\0\22\33\3\0\23\33\1\277\4\33"+
    "\27\0\1\33\5\0\22\33\3\0\5\33\1\300\22\33"+
    "\27\0\1\33\5\0\22\33\3\0\4\33\1\301\23\33"+
    "\27\0\1\33\5\0\22\33\3\0\4\33\1\302\23\33"+
    "\3\0\21\162\1\235\6\162\1\303\61\162\24\0\1\33"+
    "\5\0\22\33\3\0\5\33\1\304\22\33\27\0\1\33"+
    "\5\0\22\33\3\0\7\33\1\305\20\33\27\0\1\33"+
    "\5\0\22\33\3\0\16\33\1\306\11\33\27\0\1\33"+
    "\5\0\22\33\3\0\5\33\1\307\22\33\27\0\1\33"+
    "\5\0\22\33\3\0\16\33\1\310\11\33\27\0\1\33"+
    "\5\0\22\33\3\0\3\33\1\311\24\33\27\0\1\33"+
    "\5\0\22\33\3\0\11\33\1\312\16\33\27\0\1\33"+
    "\5\0\22\33\3\0\24\33\1\313\3\33\27\0\1\33"+
    "\5\0\22\33\3\0\5\33\1\314\22\33\27\0\1\33"+
    "\5\0\22\33\3\0\21\33\1\315\6\33\27\0\1\33"+
    "\5\0\22\33\3\0\21\33\1\316\6\33\27\0\1\33"+
    "\5\0\22\33\3\0\5\33\1\317\22\33\27\0\1\33"+
    "\5\0\22\33\3\0\5\33\1\320\11\33\1\320\10\33"+
    "\27\0\1\33\5\0\22\33\3\0\21\33\1\321\6\33"+
    "\27\0\1\33\5\0\22\33\3\0\21\33\1\322\6\33"+
    "\27\0\1\33\5\0\22\33\3\0\11\33\1\323\16\33"+
    "\27\0\1\33\5\0\22\33\3\0\1\33\1\324\26\33"+
    "\27\0\1\33\5\0\22\33\3\0\23\33\1\325\4\33"+
    "\27\0\1\33\5\0\22\33\3\0\16\33\1\326\11\33"+
    "\27\0\1\33\5\0\22\33\3\0\22\33\1\327\5\33"+
    "\27\0\1\33\5\0\22\33\3\0\1\33\1\330\26\33"+
    "\27\0\1\33\5\0\22\33\3\0\17\33\1\331\10\33"+
    "\27\0\1\33\5\0\22\33\3\0\3\33\1\332\24\33"+
    "\27\0\1\33\5\0\22\33\3\0\17\33\1\333\10\33"+
    "\27\0\1\33\5\0\22\33\3\0\21\33\1\334\6\33"+
    "\27\0\1\33\5\0\22\33\3\0\21\33\1\335\6\33"+
    "\10\0\1\336\16\0\1\33\5\0\22\33\3\0\30\33"+
    "\27\0\1\33\5\0\22\33\3\0\21\33\1\337\6\33"+
    "\27\0\1\33\5\0\22\33\3\0\3\33\1\340\24\33"+
    "\27\0\1\33\5\0\22\33\3\0\1\33\1\341\26\33"+
    "\27\0\1\33\5\0\22\33\3\0\16\33\1\342\11\33"+
    "\27\0\1\33\5\0\22\33\3\0\14\33\1\343\13\33"+
    "\27\0\1\33\5\0\22\33\3\0\4\33\1\344\23\33"+
    "\27\0\1\33\5\0\22\33\3\0\1\33\1\345\26\33"+
    "\27\0\1\33\5\0\22\33\3\0\1\33\1\346\26\33"+
    "\27\0\1\33\5\0\22\33\3\0\23\33\1\347\4\33"+
    "\27\0\1\33\5\0\22\33\3\0\16\33\1\350\11\33"+
    "\27\0\1\33\5\0\22\33\3\0\14\33\1\351\13\33"+
    "\27\0\1\33\5\0\22\33\3\0\17\33\1\352\10\33"+
    "\27\0\1\33\5\0\22\33\3\0\1\33\1\353\26\33"+
    "\27\0\1\33\5\0\22\33\3\0\16\33\1\354\11\33"+
    "\27\0\1\33\5\0\22\33\3\0\5\33\1\355\22\33"+
    "\27\0\1\33\5\0\22\33\3\0\23\33\1\356\4\33"+
    "\27\0\1\33\5\0\22\33\3\0\12\33\1\357\15\33"+
    "\27\0\1\33\5\0\22\33\3\0\21\33\1\360\6\33"+
    "\27\0\1\33\5\0\22\33\3\0\1\33\1\361\26\33"+
    "\27\0\1\33\5\0\22\33\3\0\22\33\1\362\5\33"+
    "\27\0\1\33\5\0\22\33\3\0\11\33\1\363\16\33"+
    "\27\0\1\33\5\0\22\33\3\0\4\33\1\364\23\33"+
    "\27\0\1\33\5\0\22\33\3\0\16\33\1\365\11\33"+
    "\104\0\1\366\34\0\1\33\5\0\22\33\3\0\11\33"+
    "\1\367\16\33\27\0\1\33\5\0\22\33\3\0\10\33"+
    "\1\370\17\33\27\0\1\33\5\0\22\33\3\0\4\33"+
    "\1\371\23\33\27\0\1\33\5\0\22\33\3\0\4\33"+
    "\1\372\23\33\27\0\1\33\5\0\22\33\3\0\17\33"+
    "\1\373\10\33\27\0\1\33\5\0\22\33\3\0\5\33"+
    "\1\374\22\33\27\0\1\33\5\0\22\33\3\0\16\33"+
    "\1\375\11\33\27\0\1\33\5\0\22\33\3\0\5\33"+
    "\1\376\22\33\27\0\1\33\5\0\22\33\3\0\24\33"+
    "\1\377\3\33\27\0\1\33\5\0\22\33\3\0\23\33"+
    "\1\u0100\4\33\27\0\1\33\5\0\22\33\3\0\21\33"+
    "\1\u0101\6\33\27\0\1\33\5\0\22\33\3\0\4\33"+
    "\1\u0102\23\33\27\0\1\33\5\0\22\33\3\0\22\33"+
    "\1\u0103\5\33\27\0\1\33\5\0\22\33\3\0\24\33"+
    "\1\u0104\3\33\27\0\1\33\5\0\22\33\3\0\5\33"+
    "\1\u0105\22\33\27\0\1\33\5\0\22\33\3\0\1\33"+
    "\1\u0106\26\33\27\0\1\33\5\0\22\33\3\0\21\33"+
    "\1\u0107\6\33\27\0\1\33\5\0\22\33\3\0\20\33"+
    "\1\u0108\7\33\27\0\1\33\5\0\22\33\3\0\24\33"+
    "\1\u0109\3\33\27\0\1\33\5\0\22\33\3\0\1\33"+
    "\1\u010a\26\33\73\0\1\u010b\45\0\1\33\5\0\22\33"+
    "\3\0\27\33\1\u010c\27\0\1\33\5\0\22\33\3\0"+
    "\5\33\1\u010d\22\33\27\0\1\33\5\0\22\33\3\0"+
    "\5\33\1\u010e\22\33\27\0\1\33\5\0\22\33\3\0"+
    "\16\33\1\u010f\11\33\27\0\1\33\5\0\22\33\3\0"+
    "\21\33\1\u0110\6\33\27\0\1\33\5\0\22\33\3\0"+
    "\1\33\1\u0111\26\33\27\0\1\33\5\0\22\33\3\0"+
    "\5\33\1\u0112\22\33\27\0\1\33\5\0\22\33\3\0"+
    "\4\33\1\u0113\23\33\27\0\1\33\5\0\22\33\3\0"+
    "\22\33\1\u0114\5\33\27\0\1\33\5\0\22\33\3\0"+
    "\1\33\1\u0115\26\33\27\0\1\33\5\0\22\33\3\0"+
    "\3\33\1\u0116\24\33\27\0\1\33\5\0\22\33\3\0"+
    "\21\33\1\u0117\6\33\27\0\1\33\5\0\22\33\3\0"+
    "\1\33\1\u0118\26\33\27\0\1\33\5\0\22\33\3\0"+
    "\21\33\1\u0119\6\33\27\0\1\33\5\0\22\33\3\0"+
    "\16\33\1\u011a\11\33\27\0\1\33\5\0\22\33\3\0"+
    "\23\33\1\u011b\4\33\27\0\1\33\5\0\22\33\3\0"+
    "\21\33\1\u011c\6\33\27\0\1\33\5\0\22\33\3\0"+
    "\14\33\1\u011d\13\33\27\0\1\33\5\0\22\33\3\0"+
    "\11\33\1\u011e\16\33\27\0\1\33\5\0\22\33\3\0"+
    "\21\33\1\u011f\6\33\27\0\1\33\5\0\22\33\3\0"+
    "\17\33\1\300\10\33\27\0\1\33\5\0\22\33\3\0"+
    "\23\33\1\u0120\4\33\27\0\1\33\5\0\22\33\3\0"+
    "\5\33\1\u0121\22\33\27\0\1\33\5\0\22\33\3\0"+
    "\21\33\1\u0122\6\33\27\0\1\33\5\0\22\33\3\0"+
    "\5\33\1\u0123\22\33\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15984];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\2\1\3\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\25\1\3\11\6\1\1\11"+
    "\1\1\2\11\1\0\1\11\2\0\3\11\2\0\3\11"+
    "\2\0\3\11\1\0\1\11\45\1\4\11\2\1\2\0"+
    "\1\11\1\0\11\1\1\11\4\1\1\11\4\1\1\11"+
    "\7\1\1\11\13\1\1\0\37\1\1\11\5\1\1\11"+
    "\32\1\1\0\27\1\1\0\24\1\1\11\30\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    //coidgo de usuario en sintaxis java
    public void printConsole(String s){
        //System.out.print(s);
    }
    String cadena="";
    public Pintar pintar = new Pintar();



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexicoCode(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(SimbolosCode.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { //System.out.println("CUALQUIER_SIM: "+yytext()); 
                                    //ErrorG e = new ErrorG(yyline+1, yycolumn+1,yytext(),"Lexico","Error Lexico token: " + yytext()+"   Linea: " + (yyline+1) + " ,    Columna: " + (yycolumn+1));
                                    //listaErrores.add(e);
                                    //return new Symbol(Simbolos.CUALQUIER_SIM , yycolumn, yyline, yytext());
                                            //printConsole("ERR: "+yytext()+"\n"); pintar.pintaNegro((int) yychar,yylength()); /*return new Symbol(SimbolosCode.OTROS , yycolumn, yyline, yytext());*/
            }
            // fall through
          case 89: break;
          case 2:
            { /*Ignore*/
            }
            // fall through
          case 90: break;
          case 3:
            { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SimbolosCode.NOT , yycolumn, yyline, yytext());
            }
            // fall through
          case 91: break;
          case 4:
            { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SimbolosCode.MODULO , yycolumn, yyline, yytext());
            }
            // fall through
          case 92: break;
          case 5:
            { printConsole(yytext()+"\n"); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SimbolosCode.PA_A , yycolumn, yyline, yytext());
            }
            // fall through
          case 93: break;
          case 6:
            { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SimbolosCode.PA_C , yycolumn, yyline, yytext());
            }
            // fall through
          case 94: break;
          case 7:
            { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SimbolosCode.POR , yycolumn, yyline, yytext());
            }
            // fall through
          case 95: break;
          case 8:
            { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SimbolosCode.MAS , yycolumn, yyline, yytext());
            }
            // fall through
          case 96: break;
          case 9:
            { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SimbolosCode.COMA , yycolumn, yyline, yytext());
            }
            // fall through
          case 97: break;
          case 10:
            { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SimbolosCode.MENOS , yycolumn, yyline, yytext());
            }
            // fall through
          case 98: break;
          case 11:
            { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SimbolosCode.DIVISION , yycolumn, yyline, yytext());
            }
            // fall through
          case 99: break;
          case 12:
            { printConsole(yytext()); pintar.pintaMorado((int) yychar,yylength()); return new Symbol(SimbolosCode.NUMERO , yycolumn, yyline, yytext());
            }
            // fall through
          case 100: break;
          case 13:
            { printConsole(yytext()+"\n"); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SimbolosCode.PUNTO_COMA , yycolumn, yyline, yytext());
            }
            // fall through
          case 101: break;
          case 14:
            { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SimbolosCode.MENOR_Q , yycolumn, yyline, yytext());
            }
            // fall through
          case 102: break;
          case 15:
            { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SimbolosCode.IGUAL , yycolumn, yyline, yytext());
            }
            // fall through
          case 103: break;
          case 16:
            { printConsole(yytext()); pintar.pintaVerde((int) yychar,yylength()); return new Symbol(SimbolosCode.IDENTIFICADOR , yycolumn, yyline, yytext());
            }
            // fall through
          case 104: break;
          case 17:
            { printConsole(yytext()+"\n"); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SimbolosCode.CORCHETE_A , yycolumn, yyline, yytext());
            }
            // fall through
          case 105: break;
          case 18:
            { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SimbolosCode.CORCHETE_C , yycolumn, yyline, yytext());
            }
            // fall through
          case 106: break;
          case 19:
            { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SimbolosCode.POTENCIA , yycolumn, yyline, yytext());
            }
            // fall through
          case 107: break;
          case 20:
            { printConsole(yytext()+"\n"); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SimbolosCode.LLAVE_A , yycolumn, yyline, yytext());
            }
            // fall through
          case 108: break;
          case 21:
            { printConsole(yytext()+"\n"); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SimbolosCode.LLAVE_C , yycolumn, yyline, yytext());
            }
            // fall through
          case 109: break;
          case 22:
            { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SimbolosCode.IS_NULL , yycolumn, yyline, yytext());
            }
            // fall through
          case 110: break;
          case 23:
            { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SimbolosCode.DIFERENTE , yycolumn, yyline, yytext());
            }
            // fall through
          case 111: break;
          case 24:
            { printConsole(yytext()); pintar.pintaNaranja((int) yychar,yylength()); return new Symbol(SimbolosCode.CADENA , yycolumn, yyline, yytext());
            }
            // fall through
          case 112: break;
          case 25:
            { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SimbolosCode.AND , yycolumn, yyline, yytext());
            }
            // fall through
          case 113: break;
          case 26:
            { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SimbolosCode.XOR , yycolumn, yyline, yytext());
            }
            // fall through
          case 114: break;
          case 27:
            { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SimbolosCode.MAS_MAS , yycolumn, yyline, yytext());
            }
            // fall through
          case 115: break;
          case 28:
            { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SimbolosCode.MAS_IGUAL , yycolumn, yyline, yytext());
            }
            // fall through
          case 116: break;
          case 29:
            { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SimbolosCode.MENOS_MENOS , yycolumn, yyline, yytext());
            }
            // fall through
          case 117: break;
          case 30:
            { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SimbolosCode.MENOR_IGUAL , yycolumn, yyline, yytext());
            }
            // fall through
          case 118: break;
          case 31:
            { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SimbolosCode.IGUAL_IGUAL , yycolumn, yyline, yytext());
            }
            // fall through
          case 119: break;
          case 32:
            { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SimbolosCode.MAYOR_IGUAL , yycolumn, yyline, yytext());
            }
            // fall through
          case 120: break;
          case 33:
            { printConsole("Mayor"); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SimbolosCode.MAYOR_Q , yycolumn, yyline, yytext());
            }
            // fall through
          case 121: break;
          case 34:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.DO , yycolumn, yyline, yytext());
            }
            // fall through
          case 122: break;
          case 35:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.FA , yycolumn, yyline, yytext());
            }
            // fall through
          case 123: break;
          case 36:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.LA , yycolumn, yyline, yytext());
            }
            // fall through
          case 124: break;
          case 37:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.MI , yycolumn, yyline, yytext());
            }
            // fall through
          case 125: break;
          case 38:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.RE , yycolumn, yyline, yytext());
            }
            // fall through
          case 126: break;
          case 39:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.SI , yycolumn, yyline, yytext());
            }
            // fall through
          case 127: break;
          case 40:
            { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SimbolosCode.OR , yycolumn, yyline, yytext());
            }
            // fall through
          case 128: break;
          case 41:
            { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SimbolosCode.NAND , yycolumn, yyline, yytext());
            }
            // fall through
          case 129: break;
          case 42:
            { printConsole(yytext()); pintar.pintaNegro((int) yychar,yylength()); return new Symbol(SimbolosCode.NOR , yycolumn, yyline, yytext());
            }
            // fall through
          case 130: break;
          case 43:
            { printConsole(yytext()); pintar.pintaNaranja((int) yychar,yylength()); return new Symbol(SimbolosCode.CARACTER , yycolumn, yyline, yytext());
            }
            // fall through
          case 131: break;
          case 44:
            { printConsole(yytext()); pintar.pintaMorado((int) yychar,yylength()); return new Symbol(SimbolosCode.DECIMAL , yycolumn, yyline, yytext());
            }
            // fall through
          case 132: break;
          case 45:
            { printConsole("COMENTARIO_SIMPLE: "+yytext()+"\n"); pintar.pintaGris((int) yychar,yylength()); return new Symbol(SimbolosCode.COMENTARIO_LINEA , yycolumn, yyline, yytext());
            }
            // fall through
          case 133: break;
          case 46:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.DO_S , yycolumn, yyline, yytext());
            }
            // fall through
          case 134: break;
          case 47:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.FA_S , yycolumn, yyline, yytext());
            }
            // fall through
          case 135: break;
          case 48:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.LA_S , yycolumn, yyline, yytext());
            }
            // fall through
          case 136: break;
          case 49:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.RE_S , yycolumn, yyline, yytext());
            }
            // fall through
          case 137: break;
          case 50:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.SOL , yycolumn, yyline, yytext());
            }
            // fall through
          case 138: break;
          case 51:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.VAR , yycolumn, yyline, yytext());
            }
            // fall through
          case 139: break;
          case 52:
            { printConsole("COMENTARIO: "+yytext()+"\n"); pintar.pintaGris((int) yychar,yylength()); return new Symbol(SimbolosCode.COMENTARIO_BLOQUE , yycolumn, yyline, yytext());
            }
            // fall through
          case 140: break;
          case 53:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.CASO , yycolumn, yyline, yytext());
            }
            // fall through
          case 141: break;
          case 54:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.KEEP , yycolumn, yyline, yytext());
            }
            // fall through
          case 142: break;
          case 55:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.PARA , yycolumn, yyline, yytext());
            }
            // fall through
          case 143: break;
          case 56:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.SINO , yycolumn, yyline, yytext());
            }
            // fall through
          case 144: break;
          case 57:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.SOL_S , yycolumn, yyline, yytext());
            }
            // fall through
          case 145: break;
          case 58:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.TRUE , yycolumn, yyline, yytext());
            }
            // fall through
          case 146: break;
          case 59:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.VOID , yycolumn, yyline, yytext());
            }
            // fall through
          case 147: break;
          case 60:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.DOBLE , yycolumn, yyline, yytext());
            }
            // fall through
          case 148: break;
          case 61:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.FALSE , yycolumn, yyline, yytext());
            }
            // fall through
          case 149: break;
          case 62:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.HACER , yycolumn, yyline, yytext());
            }
            // fall through
          case 150: break;
          case 63:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.PARES , yycolumn, yyline, yytext());
            }
            // fall through
          case 151: break;
          case 64:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.PISTA, yycolumn, yyline, yytext());
            }
            // fall through
          case 152: break;
          case 65:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.SALIR , yycolumn, yyline, yytext());
            }
            // fall through
          case 153: break;
          case 66:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.CADENA_RSV , yycolumn, yyline, yytext());
            }
            // fall through
          case 154: break;
          case 67:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.ENTERO , yycolumn, yyline, yytext());
            }
            // fall through
          case 155: break;
          case 68:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.PRIMOS , yycolumn, yyline, yytext());
            }
            // fall through
          case 156: break;
          case 69:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.SWITCH , yycolumn, yyline, yytext());
            }
            // fall through
          case 157: break;
          case 70:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.ARREGLO , yycolumn, yyline, yytext());
            }
            // fall through
          case 158: break;
          case 71:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.BOOLEAN , yycolumn, yyline, yytext());
            }
            // fall through
          case 159: break;
          case 72:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.DEFAULT , yycolumn, yyline, yytext());
            }
            // fall through
          case 160: break;
          case 73:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.ESPERAR , yycolumn, yyline, yytext());
            }
            // fall through
          case 161: break;
          case 74:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.IMPARES , yycolumn, yyline, yytext());
            }
            // fall through
          case 162: break;
          case 75:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.MENSAJE , yycolumn, yyline, yytext());
            }
            // fall through
          case 163: break;
          case 76:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.ORDENAR , yycolumn, yyline, yytext());
            }
            // fall through
          case 164: break;
          case 77:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.SINO_SI , yycolumn, yyline, yytext());
            }
            // fall through
          case 165: break;
          case 78:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.CARACTER_RSV , yycolumn, yyline, yytext());
            }
            // fall through
          case 166: break;
          case 79:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.EXTIENDE , yycolumn, yyline, yytext());
            }
            // fall through
          case 167: break;
          case 80:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.LONGITUD , yycolumn, yyline, yytext());
            }
            // fall through
          case 168: break;
          case 81:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.MIENTRAS , yycolumn, yyline, yytext());
            }
            // fall through
          case 169: break;
          case 82:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.RETORNAR , yycolumn, yyline, yytext());
            }
            // fall through
          case 170: break;
          case 83:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.CONTINUAR , yycolumn, yyline, yytext());
            }
            // fall through
          case 171: break;
          case 84:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.PRINCIPAL , yycolumn, yyline, yytext());
            }
            // fall through
          case 172: break;
          case 85:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.SUMARIZAR , yycolumn, yyline, yytext());
            }
            // fall through
          case 173: break;
          case 86:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.ASCENDENTE , yycolumn, yyline, yytext());
            }
            // fall through
          case 174: break;
          case 87:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.REPRODUCIR , yycolumn, yyline, yytext());
            }
            // fall through
          case 175: break;
          case 88:
            { printConsole(yytext()); pintar.pintaAzul((int) yychar,yylength()); return new Symbol(SimbolosCode.DESCENDENTE , yycolumn, yyline, yytext());
            }
            // fall through
          case 176: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
