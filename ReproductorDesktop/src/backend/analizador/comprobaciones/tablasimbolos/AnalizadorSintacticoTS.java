
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Sep 07 02:32:03 CST 2021
//----------------------------------------------------

package backend.analizador.comprobaciones.tablasimbolos;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.Stack;
import backend.analizador.objetos.*;
import backend.analizador.ErrorLSS;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Sep 07 02:32:03 CST 2021
  */
public class AnalizadorSintacticoTS extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTS() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\331\000\002\002\004\000\002\002\004\000\002\003" +
    "\006\000\002\003\002\000\002\063\003\000\002\064\003" +
    "\000\002\065\003\000\002\065\002\000\002\004\004\000" +
    "\002\004\002\000\002\103\002\000\002\005\011\000\002" +
    "\007\003\000\002\007\002\000\002\006\005\000\002\006" +
    "\004\000\002\010\004\000\002\010\004\000\002\010\004" +
    "\000\002\010\004\000\002\010\004\000\002\010\002\000" +
    "\002\011\005\000\002\011\007\000\002\011\010\000\002" +
    "\011\006\000\002\101\005\000\002\101\007\000\002\101" +
    "\007\000\002\101\005\000\002\012\003\000\002\012\002" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\046\006\000\002\050\005\000\002\050\003" +
    "\000\002\051\003\000\002\051\002\000\002\047\004\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\006\000\002\017\003\000\002\017\003\000" +
    "\002\077\003\000\002\077\003\000\002\077\003\000\002" +
    "\077\003\000\002\077\003\000\002\060\005\000\002\060" +
    "\005\000\002\060\005\000\002\060\005\000\002\060\005" +
    "\000\002\060\005\000\002\060\004\000\002\060\004\000" +
    "\002\060\005\000\002\100\003\000\002\100\003\000\002" +
    "\100\003\000\002\100\003\000\002\100\003\000\002\100" +
    "\003\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\003\000\002\015\005\000\002" +
    "\015\005\000\002\015\004\000\002\015\004\000\002\021" +
    "\006\000\002\021\005\000\002\021\012\000\002\021\014" +
    "\000\002\021\007\000\002\021\010\000\002\102\006\000" +
    "\002\102\005\000\002\102\012\000\002\102\013\000\002" +
    "\102\006\000\002\102\007\000\002\022\006\000\002\022" +
    "\005\000\002\023\003\000\002\023\003\000\002\075\005" +
    "\000\002\075\007\000\002\075\005\000\002\075\007\000" +
    "\002\024\005\000\002\024\003\000\002\061\003\000\002" +
    "\031\006\000\002\104\002\000\002\035\013\000\002\105" +
    "\002\000\002\035\014\000\002\106\002\000\002\036\012" +
    "\000\002\107\002\000\002\036\013\000\002\055\003\000" +
    "\002\055\003\000\002\073\006\000\002\073\004\000\002" +
    "\074\002\000\002\066\004\000\002\066\004\000\002\066" +
    "\004\000\002\066\004\000\002\066\004\000\002\066\004" +
    "\000\002\066\004\000\002\066\004\000\002\066\004\000" +
    "\002\066\004\000\002\066\004\000\002\066\004\000\002" +
    "\066\004\000\002\066\004\000\002\066\004\000\002\066" +
    "\004\000\002\066\005\000\002\066\002\000\002\067\004" +
    "\000\002\067\004\000\002\067\004\000\002\067\004\000" +
    "\002\067\004\000\002\067\004\000\002\067\004\000\002" +
    "\067\004\000\002\067\004\000\002\067\004\000\002\067" +
    "\004\000\002\067\004\000\002\067\004\000\002\067\004" +
    "\000\002\067\004\000\002\067\004\000\002\067\002\000" +
    "\002\037\014\000\002\040\010\000\002\041\010\000\002" +
    "\042\006\000\002\043\006\000\002\044\006\000\002\044" +
    "\005\000\002\062\005\000\002\062\003\000\002\056\003" +
    "\000\002\056\003\000\002\056\003\000\002\056\003\000" +
    "\002\056\003\000\002\056\003\000\002\056\003\000\002" +
    "\056\003\000\002\056\003\000\002\056\003\000\002\056" +
    "\003\000\002\056\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
    "\002\045\010\000\002\025\012\000\002\026\012\000\002" +
    "\026\006\000\002\026\002\000\002\027\011\000\002\072" +
    "\011\000\002\072\006\000\002\072\002\000\002\070\003" +
    "\000\002\070\002\000\002\032\015\000\002\052\007\000" +
    "\002\052\005\000\002\053\003\000\002\054\005\000\002" +
    "\054\005\000\002\054\004\000\002\054\004\000\002\033" +
    "\011\000\002\034\013\000\002\071\003\000\002\071\002" +
    "\000\002\076\003\000\002\076\003\000\002\076\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01be\000\010\002\ufffe\004\ufffe\130\006\001\002\000" +
    "\006\002\ufff8\004\014\001\002\000\004\002\012\001\002" +
    "\000\006\130\006\131\ufffe\001\002\000\004\131\010\001" +
    "\002\000\012\002\ufffe\004\ufffe\130\006\131\ufffe\001\002" +
    "\000\010\002\uffff\004\uffff\131\uffff\001\002\000\004\002" +
    "\001\001\002\000\006\002\ufff8\004\014\001\002\000\004" +
    "\005\016\001\002\000\004\002\000\001\002\000\006\006" +
    "\ufff7\130\ufff7\001\002\000\006\006\021\130\ufff4\001\002" +
    "\000\006\007\u01be\130\ufff5\001\002\000\004\005\u01bd\001" +
    "\002\000\004\130\024\001\002\000\032\002\uffec\004\uffec" +
    "\005\042\011\027\012\033\013\031\014\025\015\034\041" +
    "\043\042\uffe2\113\044\131\uffec\001\002\000\072\002\ufffd" +
    "\004\ufffd\005\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015" +
    "\ufffd\041\ufffd\042\ufffd\062\ufffd\066\ufffd\067\ufffd\070\ufffd" +
    "\071\ufffd\072\ufffd\073\ufffd\074\ufffd\075\ufffd\076\ufffd\100" +
    "\ufffd\101\ufffd\102\ufffd\110\ufffd\111\ufffd\112\ufffd\113\ufffd" +
    "\131\ufffd\001\002\000\006\005\uffcf\055\uffcf\001\002\000" +
    "\032\002\uffec\004\uffec\005\042\011\027\012\033\013\031" +
    "\014\025\015\034\041\043\042\uffe2\113\044\131\uffec\001" +
    "\002\000\006\005\uffd0\055\uffd0\001\002\000\034\002\uffec" +
    "\004\uffec\005\042\007\u01b4\011\027\012\033\013\031\014" +
    "\025\015\034\041\043\042\uffe2\113\044\131\uffec\001\002" +
    "\000\006\005\uffcd\055\uffcd\001\002\000\032\002\uffec\004" +
    "\uffec\005\042\011\027\012\033\013\031\014\025\015\034" +
    "\041\043\042\uffe2\113\044\131\uffec\001\002\000\006\005" +
    "\uffd1\055\uffd1\001\002\000\006\005\uffce\055\uffce\001\002" +
    "\000\004\042\u01a7\001\002\000\004\005\u019f\001\002\000" +
    "\032\002\uffec\004\uffec\005\042\011\027\012\033\013\031" +
    "\014\025\015\034\041\043\042\uffe2\113\044\131\uffec\001" +
    "\002\000\010\002\ufffa\004\ufffa\131\u019d\001\002\000\034" +
    "\002\uffec\004\uffec\005\042\007\u0197\011\027\012\033\013" +
    "\031\014\025\015\034\041\043\042\uffe2\113\044\131\uffec" +
    "\001\002\000\004\064\u0190\001\002\000\020\005\u0179\011" +
    "\027\012\033\013\031\014\025\015\034\042\uffe3\001\002" +
    "\000\004\064\045\001\002\000\004\065\046\001\002\000" +
    "\004\130\024\001\002\000\036\005\071\042\102\062\067" +
    "\066\056\072\062\073\075\074\100\100\070\101\104\102" +
    "\065\110\074\111\101\112\105\131\uff5d\001\002\000\036" +
    "\005\071\042\102\062\067\066\056\072\062\073\075\074" +
    "\100\100\070\101\104\102\065\110\074\111\101\112\105" +
    "\131\uff5d\001\002\000\036\005\071\042\102\062\067\066" +
    "\056\072\062\073\075\074\100\100\070\101\104\102\065" +
    "\110\074\111\101\112\105\131\uff5d\001\002\000\036\005" +
    "\071\042\102\062\067\066\056\072\062\073\075\074\100" +
    "\100\070\101\104\102\065\110\074\111\101\112\105\131" +
    "\uff5d\001\002\000\036\005\071\042\102\062\067\066\056" +
    "\072\062\073\075\074\100\100\070\101\104\102\065\110" +
    "\074\111\101\112\105\131\uff5d\001\002\000\040\005\071" +
    "\007\346\042\102\062\067\066\056\072\062\073\075\074" +
    "\100\100\070\101\104\102\065\110\074\111\101\112\105" +
    "\131\uff5d\001\002\000\036\005\071\042\102\062\067\066" +
    "\056\072\062\073\075\074\100\100\070\101\104\102\065" +
    "\110\074\111\101\112\105\131\uff5d\001\002\000\004\064" +
    "\u0160\001\002\000\036\005\071\042\102\062\067\066\056" +
    "\072\062\073\075\074\100\100\070\101\104\102\065\110" +
    "\074\111\101\112\105\131\uff5d\001\002\000\036\005\071" +
    "\042\102\062\067\066\056\072\062\073\075\074\100\100" +
    "\070\101\104\102\065\110\074\111\101\112\105\131\uff5d" +
    "\001\002\000\036\005\071\042\102\062\067\066\056\072" +
    "\062\073\075\074\100\100\070\101\104\102\065\110\074" +
    "\111\101\112\105\131\uff5d\001\002\000\004\064\u0143\001" +
    "\002\000\040\005\071\007\335\042\102\062\067\066\056" +
    "\072\062\073\075\074\100\100\070\101\104\102\065\110" +
    "\074\111\101\112\105\131\uff5d\001\002\000\036\005\071" +
    "\042\102\062\067\066\056\072\062\073\075\074\100\100" +
    "\070\101\104\102\065\110\074\111\101\112\105\131\uff5d" +
    "\001\002\000\004\064\u0137\001\002\000\036\005\071\042" +
    "\102\062\067\066\056\072\062\073\075\074\100\100\070" +
    "\101\104\102\065\110\074\111\101\112\105\131\uff5d\001" +
    "\002\000\004\064\u0123\001\002\000\004\064\u010e\001\002" +
    "\000\016\043\u0108\052\u0105\053\u0109\054\u0106\056\214\064" +
    "\213\001\002\000\036\005\071\042\102\062\067\066\056" +
    "\072\062\073\075\074\100\100\070\101\104\102\065\110" +
    "\074\111\101\112\105\131\uff5d\001\002\000\036\005\071" +
    "\042\102\062\067\066\056\072\062\073\075\074\100\100" +
    "\070\101\104\102\065\110\074\111\101\112\105\131\uff5d" +
    "\001\002\000\004\064\u0100\001\002\000\004\064\372\001" +
    "\002\000\036\005\071\042\102\062\067\066\056\072\062" +
    "\073\075\074\100\100\070\101\104\102\065\110\074\111" +
    "\101\112\105\131\uff5d\001\002\000\036\005\071\042\102" +
    "\062\067\066\056\072\062\073\075\074\100\100\070\101" +
    "\104\102\065\110\074\111\101\112\105\131\uff5d\001\002" +
    "\000\004\130\024\001\002\000\004\064\276\001\002\000" +
    "\014\011\027\012\033\013\031\014\025\015\034\001\002" +
    "\000\004\131\240\001\002\000\004\064\233\001\002\000" +
    "\004\064\106\001\002\000\036\005\126\024\131\032\113" +
    "\044\124\045\112\046\110\047\117\050\123\051\122\064" +
    "\130\065\127\100\070\110\074\111\101\001\002\000\112" +
    "\002\uffc6\004\uffc6\005\uffc6\007\uffc6\010\uffc6\011\uffc6\012" +
    "\uffc6\013\uffc6\014\uffc6\015\uffc6\025\uffc6\026\uffc6\027\uffc6" +
    "\030\uffc6\031\uffc6\033\uffc6\041\uffc6\042\uffc6\061\uffc6\062" +
    "\uffc6\065\uffc6\066\uffc6\070\uffc6\072\uffc6\073\uffc6\074\uffc6" +
    "\075\uffc6\076\uffc6\100\uffc6\101\uffc6\102\uffc6\110\uffc6\111" +
    "\uffc6\112\uffc6\113\uffc6\131\uffc6\001\002\000\144\002\uffdb" +
    "\004\uffdb\005\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013" +
    "\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb" +
    "\022\uffdb\023\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb" +
    "\041\uffdb\042\uffdb\057\uffdb\061\uffdb\062\uffdb\065\uffdb\066" +
    "\uffdb\070\uffdb\072\uffdb\073\uffdb\074\uffdb\075\uffdb\076\uffdb" +
    "\100\uffdb\101\uffdb\102\uffdb\110\uffdb\111\uffdb\112\uffdb\113" +
    "\uffdb\130\uffdb\131\uffdb\001\002\000\144\002\uff2a\004\uff2a" +
    "\005\uff2a\007\uff2a\010\uff2a\011\uff2a\012\uff2a\013\uff2a\014" +
    "\uff2a\015\uff2a\016\uff2a\017\uff2a\020\uff2a\021\uff2a\022\uff2a" +
    "\023\uff2a\025\uff2a\026\uff2a\027\uff2a\030\uff2a\031\uff2a\033" +
    "\uff2a\034\uff2a\035\uff2a\036\uff2a\037\uff2a\040\uff2a\041\uff2a" +
    "\042\uff2a\057\uff2a\061\uff2a\062\uff2a\065\uff2a\066\uff2a\070" +
    "\uff2a\072\uff2a\073\uff2a\074\uff2a\075\uff2a\076\uff2a\100\uff2a" +
    "\101\uff2a\102\uff2a\110\uff2a\111\uff2a\112\uff2a\113\uff2a\130" +
    "\uff2a\131\uff2a\001\002\000\144\002\uffdc\004\uffdc\005\uffdc" +
    "\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015" +
    "\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc" +
    "\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\033\uffdc\034" +
    "\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc" +
    "\057\uffdc\061\uffdc\062\uffdc\065\uffdc\066\uffdc\070\uffdc\072" +
    "\uffdc\073\uffdc\074\uffdc\075\uffdc\076\uffdc\100\uffdc\101\uffdc" +
    "\102\uffdc\110\uffdc\111\uffdc\112\uffdc\113\uffdc\130\uffdc\131" +
    "\uffdc\001\002\000\004\064\230\001\002\000\144\002\uff29" +
    "\004\uff29\005\uff29\007\uff29\010\uff29\011\uff29\012\uff29\013" +
    "\uff29\014\uff29\015\uff29\016\uff29\017\uff29\020\uff29\021\uff29" +
    "\022\uff29\023\uff29\025\uff29\026\uff29\027\uff29\030\uff29\031" +
    "\uff29\033\uff29\034\uff29\035\uff29\036\uff29\037\uff29\040\uff29" +
    "\041\uff29\042\uff29\057\uff29\061\uff29\062\uff29\065\uff29\066" +
    "\uff29\070\uff29\072\uff29\073\uff29\074\uff29\075\uff29\076\uff29" +
    "\100\uff29\101\uff29\102\uff29\110\uff29\111\uff29\112\uff29\113" +
    "\uff29\130\uff29\131\uff29\001\002\000\144\002\uffde\004\uffde" +
    "\005\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014" +
    "\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde" +
    "\023\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\033" +
    "\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde" +
    "\042\uffde\057\uffde\061\uffde\062\uffde\065\uffde\066\uffde\070" +
    "\uffde\072\uffde\073\uffde\074\uffde\075\uffde\076\uffde\100\uffde" +
    "\101\uffde\102\uffde\110\uffde\111\uffde\112\uffde\113\uffde\130" +
    "\uffde\131\uffde\001\002\000\144\002\uff2b\004\uff2b\005\uff2b" +
    "\007\uff2b\010\uff2b\011\uff2b\012\uff2b\013\uff2b\014\uff2b\015" +
    "\uff2b\016\uff2b\017\uff2b\020\uff2b\021\uff2b\022\uff2b\023\uff2b" +
    "\025\uff2b\026\uff2b\027\uff2b\030\uff2b\031\uff2b\033\uff2b\034" +
    "\uff2b\035\uff2b\036\uff2b\037\uff2b\040\uff2b\041\uff2b\042\uff2b" +
    "\057\uff2b\061\uff2b\062\uff2b\065\uff2b\066\uff2b\070\uff2b\072" +
    "\uff2b\073\uff2b\074\uff2b\075\uff2b\076\uff2b\100\uff2b\101\uff2b" +
    "\102\uff2b\110\uff2b\111\uff2b\112\uff2b\113\uff2b\130\uff2b\131" +
    "\uff2b\001\002\000\144\002\uffd9\004\uffd9\005\uffd9\007\uffd9" +
    "\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016" +
    "\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\025\uffd9" +
    "\026\uffd9\027\uffd9\030\uffd9\031\uffd9\033\uffd9\034\uffd9\035" +
    "\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\057\uffd9" +
    "\061\uffd9\062\uffd9\065\uffd9\066\uffd9\070\uffd9\072\uffd9\073" +
    "\uffd9\074\uffd9\075\uffd9\076\uffd9\100\uffd9\101\uffd9\102\uffd9" +
    "\110\uffd9\111\uffd9\112\uffd9\113\uffd9\130\uffd9\131\uffd9\001" +
    "\002\000\144\002\uffa9\004\uffa9\005\uffa9\007\uffa9\010\uffa9" +
    "\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017" +
    "\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\025\uffa9\026\uffa9" +
    "\027\uffa9\030\uffa9\031\uffa9\033\uffa9\034\uffa9\035\uffa9\036" +
    "\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\057\uffa9\061\uffa9" +
    "\062\uffa9\065\uffa9\066\uffa9\070\uffa9\072\uffa9\073\uffa9\074" +
    "\uffa9\075\uffa9\076\uffa9\100\uffa9\101\uffa9\102\uffa9\110\uffa9" +
    "\111\uffa9\112\uffa9\113\uffa9\130\uffa9\131\uffa9\001\002\000" +
    "\144\002\uffe0\004\uffe0\005\uffe0\007\uffe0\010\uffe0\011\uffe0" +
    "\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020" +
    "\uffe0\021\uffe0\022\uffe0\023\uffe0\025\uffe0\026\uffe0\027\uffe0" +
    "\030\uffe0\031\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037" +
    "\uffe0\040\uffe0\041\uffe0\042\uffe0\057\uffe0\061\uffe0\062\uffe0" +
    "\065\uffe0\066\uffe0\070\uffe0\072\uffe0\073\uffe0\074\uffe0\075" +
    "\uffe0\076\uffe0\100\uffe0\101\uffe0\102\uffe0\110\uffe0\111\uffe0" +
    "\112\uffe0\113\uffe0\130\uffe0\131\uffe0\001\002\000\144\002" +
    "\uffda\004\uffda\005\uffda\007\uffda\010\uffda\011\uffda\012\uffda" +
    "\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021" +
    "\uffda\022\uffda\023\uffda\025\uffda\026\uffda\027\uffda\030\uffda" +
    "\031\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040" +
    "\uffda\041\uffda\042\uffda\057\uffda\061\uffda\062\uffda\065\uffda" +
    "\066\uffda\070\uffda\072\uffda\073\uffda\074\uffda\075\uffda\076" +
    "\uffda\100\uffda\101\uffda\102\uffda\110\uffda\111\uffda\112\uffda" +
    "\113\uffda\130\uffda\131\uffda\001\002\000\144\002\uffd8\004" +
    "\uffd8\005\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8" +
    "\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022" +
    "\uffd8\023\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8" +
    "\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041" +
    "\uffd8\042\uffd8\057\uffd8\061\uffd8\062\uffd8\065\uffd8\066\uffd8" +
    "\070\uffd8\072\uffd8\073\uffd8\074\uffd8\075\uffd8\076\uffd8\100" +
    "\uffd8\101\uffd8\102\uffd8\110\uffd8\111\uffd8\112\uffd8\113\uffd8" +
    "\130\uffd8\131\uffd8\001\002\000\144\002\uffdd\004\uffdd\005" +
    "\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd" +
    "\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\033\uffdd" +
    "\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042" +
    "\uffdd\057\uffdd\061\uffdd\062\uffdd\065\uffdd\066\uffdd\070\uffdd" +
    "\072\uffdd\073\uffdd\074\uffdd\075\uffdd\076\uffdd\100\uffdd\101" +
    "\uffdd\102\uffdd\110\uffdd\111\uffdd\112\uffdd\113\uffdd\130\uffdd" +
    "\131\uffdd\001\002\000\020\025\174\026\173\027\177\030" +
    "\175\031\176\033\uff54\065\uff54\001\002\000\150\002\uffe1" +
    "\004\uffe1\005\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013" +
    "\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1" +
    "\022\uffe1\023\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031" +
    "\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1" +
    "\041\uffe1\042\uffe1\056\214\057\uffe1\061\uffe1\062\uffe1\064" +
    "\213\065\uffe1\066\uffe1\070\uffe1\072\uffe1\073\uffe1\074\uffe1" +
    "\075\uffe1\076\uffe1\100\uffe1\101\uffe1\102\uffe1\110\uffe1\111" +
    "\uffe1\112\uffe1\113\uffe1\130\uffe1\131\uffe1\001\002\000\044" +
    "\005\uff56\042\uff56\062\uff56\066\uff56\070\uff56\072\uff56\073" +
    "\uff56\074\uff56\075\uff56\076\uff56\100\uff56\101\uff56\102\uff56" +
    "\110\uff56\111\uff56\112\uff56\131\uff56\001\002\000\032\005" +
    "\126\024\131\044\124\045\112\046\110\047\117\050\123" +
    "\051\122\064\130\100\070\110\074\111\101\001\002\000" +
    "\032\005\126\024\131\044\124\045\112\046\110\047\117" +
    "\050\123\051\122\064\130\100\070\110\074\111\101\001" +
    "\002\000\006\033\170\065\171\001\002\000\140\002\uffc5" +
    "\004\uffc5\005\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013" +
    "\uffc5\014\uffc5\015\uffc5\016\137\017\147\020\143\021\144" +
    "\022\140\023\150\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031" +
    "\uffc5\033\142\034\135\035\141\036\146\037\145\040\136" +
    "\041\uffc5\042\uffc5\061\uffc5\062\uffc5\065\uffc5\066\uffc5\070" +
    "\uffc5\072\uffc5\073\uffc5\074\uffc5\075\uffc5\076\uffc5\100\uffc5" +
    "\101\uffc5\102\uffc5\110\uffc5\111\uffc5\112\uffc5\113\uffc5\131" +
    "\uffc5\001\002\000\144\002\uffdf\004\uffdf\005\uffdf\007\uffdf" +
    "\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016" +
    "\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\025\uffdf" +
    "\026\uffdf\027\uffdf\030\uffdf\031\uffdf\033\uffdf\034\uffdf\035" +
    "\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\057\uffdf" +
    "\061\uffdf\062\uffdf\065\uffdf\066\uffdf\070\uffdf\072\uffdf\073" +
    "\uffdf\074\uffdf\075\uffdf\076\uffdf\100\uffdf\101\uffdf\102\uffdf" +
    "\110\uffdf\111\uffdf\112\uffdf\113\uffdf\130\uffdf\131\uffdf\001" +
    "\002\000\030\005\126\044\124\045\112\046\110\047\117" +
    "\050\123\051\122\064\151\100\070\110\074\111\101\001" +
    "\002\000\030\005\126\044\124\045\112\046\110\047\117" +
    "\050\123\051\122\064\151\100\070\110\074\111\101\001" +
    "\002\000\030\005\126\044\124\045\112\046\110\047\117" +
    "\050\123\051\122\064\151\100\070\110\074\111\101\001" +
    "\002\000\030\005\126\044\124\045\112\046\110\047\117" +
    "\050\123\051\122\064\151\100\070\110\074\111\101\001" +
    "\002\000\030\005\126\044\124\045\112\046\110\047\117" +
    "\050\123\051\122\064\151\100\070\110\074\111\101\001" +
    "\002\000\030\005\126\044\124\045\112\046\110\047\117" +
    "\050\123\051\122\064\151\100\070\110\074\111\101\001" +
    "\002\000\030\005\126\044\124\045\112\046\110\047\117" +
    "\050\123\051\122\064\151\100\070\110\074\111\101\001" +
    "\002\000\030\005\126\044\124\045\112\046\110\047\117" +
    "\050\123\051\122\064\151\100\070\110\074\111\101\001" +
    "\002\000\030\005\126\044\124\045\112\046\110\047\117" +
    "\050\123\051\122\064\151\100\070\110\074\111\101\001" +
    "\002\000\030\005\126\044\124\045\112\046\110\047\117" +
    "\050\123\051\122\064\151\100\070\110\074\111\101\001" +
    "\002\000\030\005\126\044\124\045\112\046\110\047\117" +
    "\050\123\051\122\064\151\100\070\110\074\111\101\001" +
    "\002\000\030\005\126\044\124\045\112\046\110\047\117" +
    "\050\123\051\122\064\151\100\070\110\074\111\101\001" +
    "\002\000\030\005\126\044\124\045\112\046\110\047\117" +
    "\050\123\051\122\064\151\100\070\110\074\111\101\001" +
    "\002\000\124\002\uffba\004\uffba\005\uffba\007\uffba\010\uffba" +
    "\011\uffba\012\uffba\013\uffba\014\uffba\015\uffba\025\uffba\026" +
    "\uffba\027\uffba\030\uffba\031\uffba\033\142\034\135\035\141" +
    "\036\146\037\145\040\136\041\uffba\042\uffba\061\uffba\062" +
    "\uffba\065\uffba\066\uffba\070\uffba\072\uffba\073\uffba\074\uffba" +
    "\075\uffba\076\uffba\100\uffba\101\uffba\102\uffba\110\uffba\111" +
    "\uffba\112\uffba\113\uffba\131\uffba\001\002\000\020\033\142" +
    "\034\135\035\141\036\146\037\145\040\136\065\154\001" +
    "\002\000\144\002\uffaa\004\uffaa\005\uffaa\007\uffaa\010\uffaa" +
    "\011\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017" +
    "\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\025\uffaa\026\uffaa" +
    "\027\uffaa\030\uffaa\031\uffaa\033\uffaa\034\uffaa\035\uffaa\036" +
    "\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\057\uffaa\061\uffaa" +
    "\062\uffaa\065\uffaa\066\uffaa\070\uffaa\072\uffaa\073\uffaa\074" +
    "\uffaa\075\uffaa\076\uffaa\100\uffaa\101\uffaa\102\uffaa\110\uffaa" +
    "\111\uffaa\112\uffaa\113\uffaa\130\uffaa\131\uffaa\001\002\000" +
    "\124\002\uffbe\004\uffbe\005\uffbe\007\uffbe\010\uffbe\011\uffbe" +
    "\012\uffbe\013\uffbe\014\uffbe\015\uffbe\025\uffbe\026\uffbe\027" +
    "\uffbe\030\uffbe\031\uffbe\033\142\034\135\035\141\036\146" +
    "\037\145\040\136\041\uffbe\042\uffbe\061\uffbe\062\uffbe\065" +
    "\uffbe\066\uffbe\070\uffbe\072\uffbe\073\uffbe\074\uffbe\075\uffbe" +
    "\076\uffbe\100\uffbe\101\uffbe\102\uffbe\110\uffbe\111\uffbe\112" +
    "\uffbe\113\uffbe\131\uffbe\001\002\000\144\002\uffad\004\uffad" +
    "\005\uffad\007\uffad\010\uffad\011\uffad\012\uffad\013\uffad\014" +
    "\uffad\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad" +
    "\023\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031\uffad\033" +
    "\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\136\041\uffad" +
    "\042\uffad\057\uffad\061\uffad\062\uffad\065\uffad\066\uffad\070" +
    "\uffad\072\uffad\073\uffad\074\uffad\075\uffad\076\uffad\100\uffad" +
    "\101\uffad\102\uffad\110\uffad\111\uffad\112\uffad\113\uffad\130" +
    "\uffad\131\uffad\001\002\000\144\002\uffac\004\uffac\005\uffac" +
    "\007\uffac\010\uffac\011\uffac\012\uffac\013\uffac\014\uffac\015" +
    "\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac" +
    "\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\033\uffac\034" +
    "\uffac\035\uffac\036\uffac\037\uffac\040\136\041\uffac\042\uffac" +
    "\057\uffac\061\uffac\062\uffac\065\uffac\066\uffac\070\uffac\072" +
    "\uffac\073\uffac\074\uffac\075\uffac\076\uffac\100\uffac\101\uffac" +
    "\102\uffac\110\uffac\111\uffac\112\uffac\113\uffac\130\uffac\131" +
    "\uffac\001\002\000\124\002\uffbc\004\uffbc\005\uffbc\007\uffbc" +
    "\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\025" +
    "\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\033\142\034\135" +
    "\035\141\036\146\037\145\040\136\041\uffbc\042\uffbc\061" +
    "\uffbc\062\uffbc\065\uffbc\066\uffbc\070\uffbc\072\uffbc\073\uffbc" +
    "\074\uffbc\075\uffbc\076\uffbc\100\uffbc\101\uffbc\102\uffbc\110" +
    "\uffbc\111\uffbc\112\uffbc\113\uffbc\131\uffbc\001\002\000\124" +
    "\002\uffbd\004\uffbd\005\uffbd\007\uffbd\010\uffbd\011\uffbd\012" +
    "\uffbd\013\uffbd\014\uffbd\015\uffbd\025\uffbd\026\uffbd\027\uffbd" +
    "\030\uffbd\031\uffbd\033\142\034\135\035\141\036\146\037" +
    "\145\040\136\041\uffbd\042\uffbd\061\uffbd\062\uffbd\065\uffbd" +
    "\066\uffbd\070\uffbd\072\uffbd\073\uffbd\074\uffbd\075\uffbd\076" +
    "\uffbd\100\uffbd\101\uffbd\102\uffbd\110\uffbd\111\uffbd\112\uffbd" +
    "\113\uffbd\131\uffbd\001\002\000\144\002\uffb0\004\uffb0\005" +
    "\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0" +
    "\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023" +
    "\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\033\uffb0" +
    "\034\uffb0\035\141\036\146\037\145\040\136\041\uffb0\042" +
    "\uffb0\057\uffb0\061\uffb0\062\uffb0\065\uffb0\066\uffb0\070\uffb0" +
    "\072\uffb0\073\uffb0\074\uffb0\075\uffb0\076\uffb0\100\uffb0\101" +
    "\uffb0\102\uffb0\110\uffb0\111\uffb0\112\uffb0\113\uffb0\130\uffb0" +
    "\131\uffb0\001\002\000\144\002\uffae\004\uffae\005\uffae\007" +
    "\uffae\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae\015\uffae" +
    "\016\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\025" +
    "\uffae\026\uffae\027\uffae\030\uffae\031\uffae\033\uffae\034\uffae" +
    "\035\uffae\036\uffae\037\uffae\040\136\041\uffae\042\uffae\057" +
    "\uffae\061\uffae\062\uffae\065\uffae\066\uffae\070\uffae\072\uffae" +
    "\073\uffae\074\uffae\075\uffae\076\uffae\100\uffae\101\uffae\102" +
    "\uffae\110\uffae\111\uffae\112\uffae\113\uffae\130\uffae\131\uffae" +
    "\001\002\000\124\002\uffbb\004\uffbb\005\uffbb\007\uffbb\010" +
    "\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\025\uffbb" +
    "\026\uffbb\027\uffbb\030\uffbb\031\uffbb\033\142\034\135\035" +
    "\141\036\146\037\145\040\136\041\uffbb\042\uffbb\061\uffbb" +
    "\062\uffbb\065\uffbb\066\uffbb\070\uffbb\072\uffbb\073\uffbb\074" +
    "\uffbb\075\uffbb\076\uffbb\100\uffbb\101\uffbb\102\uffbb\110\uffbb" +
    "\111\uffbb\112\uffbb\113\uffbb\131\uffbb\001\002\000\124\002" +
    "\uffbf\004\uffbf\005\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf" +
    "\013\uffbf\014\uffbf\015\uffbf\025\uffbf\026\uffbf\027\uffbf\030" +
    "\uffbf\031\uffbf\033\142\034\135\035\141\036\146\037\145" +
    "\040\136\041\uffbf\042\uffbf\061\uffbf\062\uffbf\065\uffbf\066" +
    "\uffbf\070\uffbf\072\uffbf\073\uffbf\074\uffbf\075\uffbf\076\uffbf" +
    "\100\uffbf\101\uffbf\102\uffbf\110\uffbf\111\uffbf\112\uffbf\113" +
    "\uffbf\131\uffbf\001\002\000\144\002\uffab\004\uffab\005\uffab" +
    "\007\uffab\010\uffab\011\uffab\012\uffab\013\uffab\014\uffab\015" +
    "\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab" +
    "\025\uffab\026\uffab\027\uffab\030\uffab\031\uffab\033\uffab\034" +
    "\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab" +
    "\057\uffab\061\uffab\062\uffab\065\uffab\066\uffab\070\uffab\072" +
    "\uffab\073\uffab\074\uffab\075\uffab\076\uffab\100\uffab\101\uffab" +
    "\102\uffab\110\uffab\111\uffab\112\uffab\113\uffab\130\uffab\131" +
    "\uffab\001\002\000\144\002\uffaf\004\uffaf\005\uffaf\007\uffaf" +
    "\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016" +
    "\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\025\uffaf" +
    "\026\uffaf\027\uffaf\030\uffaf\031\uffaf\033\uffaf\034\uffaf\035" +
    "\141\036\146\037\145\040\136\041\uffaf\042\uffaf\057\uffaf" +
    "\061\uffaf\062\uffaf\065\uffaf\066\uffaf\070\uffaf\072\uffaf\073" +
    "\uffaf\074\uffaf\075\uffaf\076\uffaf\100\uffaf\101\uffaf\102\uffaf" +
    "\110\uffaf\111\uffaf\112\uffaf\113\uffaf\130\uffaf\131\uffaf\001" +
    "\002\000\034\005\126\024\131\032\113\044\124\045\112" +
    "\046\110\047\117\050\123\051\122\064\130\100\070\110" +
    "\074\111\101\001\002\000\044\005\uff57\042\uff57\062\uff57" +
    "\066\uff57\070\uff57\072\uff57\073\uff57\074\uff57\075\uff57\076" +
    "\uff57\100\uff57\101\uff57\102\uff57\110\uff57\111\uff57\112\uff57" +
    "\131\uff57\001\002\000\020\025\174\026\173\027\177\030" +
    "\175\031\176\033\uff55\065\uff55\001\002\000\034\005\126" +
    "\024\131\032\113\044\124\045\112\046\110\047\117\050" +
    "\123\051\122\064\130\100\070\110\074\111\101\001\002" +
    "\000\034\005\126\024\131\032\113\044\124\045\112\046" +
    "\110\047\117\050\123\051\122\064\130\100\070\110\074" +
    "\111\101\001\002\000\034\005\126\024\131\032\113\044" +
    "\124\045\112\046\110\047\117\050\123\051\122\064\130" +
    "\100\070\110\074\111\101\001\002\000\034\005\126\024" +
    "\131\032\113\044\124\045\112\046\110\047\117\050\123" +
    "\051\122\064\130\100\070\110\074\111\101\001\002\000" +
    "\034\005\126\024\131\032\113\044\124\045\112\046\110" +
    "\047\117\050\123\051\122\064\130\100\070\110\074\111" +
    "\101\001\002\000\112\002\uffcc\004\uffcc\005\uffcc\007\uffcc" +
    "\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\025" +
    "\174\026\173\027\uffcc\030\uffcc\031\uffcc\033\uffcc\041\uffcc" +
    "\042\uffcc\061\uffcc\062\uffcc\065\uffcc\066\uffcc\070\uffcc\072" +
    "\uffcc\073\uffcc\074\uffcc\075\uffcc\076\uffcc\100\uffcc\101\uffcc" +
    "\102\uffcc\110\uffcc\111\uffcc\112\uffcc\113\uffcc\131\uffcc\001" +
    "\002\000\112\002\uffca\004\uffca\005\uffca\007\uffca\010\uffca" +
    "\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca\025\174\026" +
    "\173\027\uffca\030\uffca\031\uffca\033\uffca\041\uffca\042\uffca" +
    "\061\uffca\062\uffca\065\uffca\066\uffca\070\uffca\072\uffca\073" +
    "\uffca\074\uffca\075\uffca\076\uffca\100\uffca\101\uffca\102\uffca" +
    "\110\uffca\111\uffca\112\uffca\113\uffca\131\uffca\001\002\000" +
    "\112\002\uffcb\004\uffcb\005\uffcb\007\uffcb\010\uffcb\011\uffcb" +
    "\012\uffcb\013\uffcb\014\uffcb\015\uffcb\025\174\026\173\027" +
    "\uffcb\030\uffcb\031\uffcb\033\uffcb\041\uffcb\042\uffcb\061\uffcb" +
    "\062\uffcb\065\uffcb\066\uffcb\070\uffcb\072\uffcb\073\uffcb\074" +
    "\uffcb\075\uffcb\076\uffcb\100\uffcb\101\uffcb\102\uffcb\110\uffcb" +
    "\111\uffcb\112\uffcb\113\uffcb\131\uffcb\001\002\000\112\002" +
    "\uffc9\004\uffc9\005\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9" +
    "\013\uffc9\014\uffc9\015\uffc9\025\uffc9\026\uffc9\027\uffc9\030" +
    "\uffc9\031\uffc9\033\uffc9\041\uffc9\042\uffc9\061\uffc9\062\uffc9" +
    "\065\uffc9\066\uffc9\070\uffc9\072\uffc9\073\uffc9\074\uffc9\075" +
    "\uffc9\076\uffc9\100\uffc9\101\uffc9\102\uffc9\110\uffc9\111\uffc9" +
    "\112\uffc9\113\uffc9\131\uffc9\001\002\000\112\002\uffc8\004" +
    "\uffc8\005\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8" +
    "\014\uffc8\015\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031" +
    "\uffc8\033\uffc8\041\uffc8\042\uffc8\061\uffc8\062\uffc8\065\uffc8" +
    "\066\uffc8\070\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8\076" +
    "\uffc8\100\uffc8\101\uffc8\102\uffc8\110\uffc8\111\uffc8\112\uffc8" +
    "\113\uffc8\131\uffc8\001\002\000\112\002\uffb8\004\uffb8\005" +
    "\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8" +
    "\015\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\033" +
    "\uffb8\041\uffb8\042\uffb8\061\uffb8\062\uffb8\065\uffb8\066\uffb8" +
    "\070\uffb8\072\uffb8\073\uffb8\074\uffb8\075\uffb8\076\uffb8\100" +
    "\uffb8\101\uffb8\102\uffb8\110\uffb8\111\uffb8\112\uffb8\113\uffb8" +
    "\131\uffb8\001\002\000\140\002\uffb9\004\uffb9\005\uffb9\007" +
    "\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9" +
    "\016\137\017\147\020\143\021\144\022\140\023\150\025" +
    "\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\033\142\034\135" +
    "\035\141\036\146\037\145\040\136\041\uffb9\042\uffb9\061" +
    "\uffb9\062\uffb9\065\uffb9\066\uffb9\070\uffb9\072\uffb9\073\uffb9" +
    "\074\uffb9\075\uffb9\076\uffb9\100\uffb9\101\uffb9\102\uffb9\110" +
    "\uffb9\111\uffb9\112\uffb9\113\uffb9\131\uffb9\001\002\000\004" +
    "\065\211\001\002\000\034\016\137\017\147\020\143\021" +
    "\144\022\140\023\150\033\142\034\135\035\141\036\146" +
    "\037\145\040\136\065\154\001\002\000\112\002\uffb7\004" +
    "\uffb7\005\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7" +
    "\014\uffb7\015\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031" +
    "\uffb7\033\uffb7\041\uffb7\042\uffb7\061\uffb7\062\uffb7\065\uffb7" +
    "\066\uffb7\070\uffb7\072\uffb7\073\uffb7\074\uffb7\075\uffb7\076" +
    "\uffb7\100\uffb7\101\uffb7\102\uffb7\110\uffb7\111\uffb7\112\uffb7" +
    "\113\uffb7\131\uffb7\001\002\000\146\002\uffd2\004\uffd2\005" +
    "\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2" +
    "\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023" +
    "\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\033\uffd2" +
    "\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042" +
    "\uffd2\056\225\057\uffd2\061\uffd2\062\uffd2\065\uffd2\066\uffd2" +
    "\070\uffd2\072\uffd2\073\uffd2\074\uffd2\075\uffd2\076\uffd2\100" +
    "\uffd2\101\uffd2\102\uffd2\110\uffd2\111\uffd2\112\uffd2\113\uffd2" +
    "\130\uffd2\131\uffd2\001\002\000\032\005\126\044\124\045" +
    "\112\046\110\047\117\050\123\051\122\064\151\065\uffd3" +
    "\100\070\110\074\111\101\001\002\000\030\005\126\044" +
    "\124\045\112\046\110\047\117\050\123\051\122\064\151" +
    "\100\070\110\074\111\101\001\002\000\020\033\142\034" +
    "\135\035\141\036\146\037\145\040\136\057\216\001\002" +
    "\000\150\002\uff97\004\uff97\005\uff97\007\uff97\010\uff97\011" +
    "\uff97\012\uff97\013\uff97\014\uff97\015\uff97\016\uff97\017\uff97" +
    "\020\uff97\021\uff97\022\uff97\023\uff97\025\uff97\026\uff97\027" +
    "\uff97\030\uff97\031\uff97\033\uff97\034\uff97\035\uff97\036\uff97" +
    "\037\uff97\040\uff97\041\uff97\042\uff97\043\uff97\056\uff97\057" +
    "\uff97\061\uff97\062\uff97\065\uff97\066\uff97\070\uff97\072\uff97" +
    "\073\uff97\074\uff97\075\uff97\076\uff97\100\uff97\101\uff97\102" +
    "\uff97\110\uff97\111\uff97\112\uff97\113\uff97\130\uff97\131\uff97" +
    "\001\002\000\004\065\224\001\002\000\006\007\222\065" +
    "\uffd4\001\002\000\022\007\uffd5\033\142\034\135\035\141" +
    "\036\146\037\145\040\136\065\uffd5\001\002\000\030\005" +
    "\126\044\124\045\112\046\110\047\117\050\123\051\122" +
    "\064\151\100\070\110\074\111\101\001\002\000\022\007" +
    "\uffd6\033\142\034\135\035\141\036\146\037\145\040\136" +
    "\065\uffd6\001\002\000\144\002\uffd7\004\uffd7\005\uffd7\007" +
    "\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7" +
    "\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\025" +
    "\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\033\uffd7\034\uffd7" +
    "\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\057" +
    "\uffd7\061\uffd7\062\uffd7\065\uffd7\066\uffd7\070\uffd7\072\uffd7" +
    "\073\uffd7\074\uffd7\075\uffd7\076\uffd7\100\uffd7\101\uffd7\102" +
    "\uffd7\110\uffd7\111\uffd7\112\uffd7\113\uffd7\130\uffd7\131\uffd7" +
    "\001\002\000\030\005\126\044\124\045\112\046\110\047" +
    "\117\050\123\051\122\064\151\100\070\110\074\111\101" +
    "\001\002\000\020\033\142\034\135\035\141\036\146\037" +
    "\145\040\136\057\227\001\002\000\150\002\uff98\004\uff98" +
    "\005\uff98\007\uff98\010\uff98\011\uff98\012\uff98\013\uff98\014" +
    "\uff98\015\uff98\016\uff98\017\uff98\020\uff98\021\uff98\022\uff98" +
    "\023\uff98\025\uff98\026\uff98\027\uff98\030\uff98\031\uff98\033" +
    "\uff98\034\uff98\035\uff98\036\uff98\037\uff98\040\uff98\041\uff98" +
    "\042\uff98\043\uff98\056\uff98\057\uff98\061\uff98\062\uff98\065" +
    "\uff98\066\uff98\070\uff98\072\uff98\073\uff98\074\uff98\075\uff98" +
    "\076\uff98\100\uff98\101\uff98\102\uff98\110\uff98\111\uff98\112" +
    "\uff98\113\uff98\130\uff98\131\uff98\001\002\000\034\005\126" +
    "\024\131\032\113\044\124\045\112\046\110\047\117\050" +
    "\123\051\122\064\130\100\070\110\074\111\101\001\002" +
    "\000\016\025\174\026\173\027\177\030\175\031\176\065" +
    "\232\001\002\000\112\002\uffc7\004\uffc7\005\uffc7\007\uffc7" +
    "\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\025" +
    "\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\033\uffc7\041\uffc7" +
    "\042\uffc7\061\uffc7\062\uffc7\065\uffc7\066\uffc7\070\uffc7\072" +
    "\uffc7\073\uffc7\074\uffc7\075\uffc7\076\uffc7\100\uffc7\101\uffc7" +
    "\102\uffc7\110\uffc7\111\uffc7\112\uffc7\113\uffc7\131\uffc7\001" +
    "\002\000\030\005\126\044\124\045\112\046\110\047\117" +
    "\050\123\051\122\064\151\100\070\110\074\111\101\001" +
    "\002\000\020\007\235\033\142\034\135\035\141\036\146" +
    "\037\145\040\136\001\002\000\030\005\126\044\124\045" +
    "\112\046\110\047\117\050\123\051\122\064\151\100\070" +
    "\110\074\111\101\001\002\000\020\033\142\034\135\035" +
    "\141\036\146\037\145\040\136\065\237\001\002\000\044" +
    "\005\uff5b\042\uff5b\062\uff5b\066\uff5b\070\uff5b\072\uff5b\073" +
    "\uff5b\074\uff5b\075\uff5b\076\uff5b\100\uff5b\101\uff5b\102\uff5b" +
    "\110\uff5b\111\uff5b\112\uff5b\131\uff5b\001\002\000\076\002" +
    "\ufffc\004\ufffc\005\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc" +
    "\015\ufffc\041\ufffc\042\ufffc\062\ufffc\063\ufffc\066\ufffc\067" +
    "\ufffc\070\ufffc\071\ufffc\072\ufffc\073\ufffc\074\ufffc\075\ufffc" +
    "\076\ufffc\100\ufffc\101\ufffc\102\ufffc\110\ufffc\111\ufffc\112" +
    "\ufffc\113\ufffc\127\ufffc\131\ufffc\001\002\000\032\002\uff42" +
    "\004\uff42\005\uff42\011\uff42\012\uff42\013\uff42\014\uff42\015" +
    "\uff42\041\uff42\042\uff42\113\uff42\131\uff42\001\002\000\006" +
    "\005\243\055\244\001\002\000\050\005\uffe4\007\uffe4\042" +
    "\uffe4\043\274\062\uffe4\066\uffe4\070\uffe4\072\uffe4\073\uffe4" +
    "\074\uffe4\075\uffe4\076\uffe4\100\uffe4\101\uffe4\102\uffe4\110" +
    "\uffe4\111\uffe4\112\uffe4\131\uffe4\001\002\000\004\005\245" +
    "\001\002\000\050\005\uff9a\007\uff9a\042\uff9a\056\214\062" +
    "\uff9a\066\uff9a\070\uff9a\072\uff9a\073\uff9a\074\uff9a\075\uff9a" +
    "\076\uff9a\100\uff9a\101\uff9a\102\uff9a\110\uff9a\111\uff9a\112" +
    "\uff9a\131\uff9a\001\002\000\052\005\uff99\007\uff99\042\uff99" +
    "\043\247\056\225\062\uff99\066\uff99\070\uff99\072\uff99\073" +
    "\uff99\074\uff99\075\uff99\076\uff99\100\uff99\101\uff99\102\uff99" +
    "\110\uff99\111\uff99\112\uff99\131\uff99\001\002\000\004\060" +
    "\250\001\002\000\036\005\126\024\131\032\113\044\124" +
    "\045\112\046\110\047\117\050\123\051\122\060\256\064" +
    "\130\100\070\110\074\111\101\001\002\000\006\007\267" +
    "\061\uff95\001\002\000\006\007\uff8f\061\uff8f\001\002\000" +
    "\006\007\261\061\uff96\001\002\000\004\061\273\001\002" +
    "\000\062\005\uff8e\007\uff8e\025\174\026\173\027\177\030" +
    "\175\031\176\042\uff8e\061\uff8e\062\uff8e\066\uff8e\070\uff8e" +
    "\072\uff8e\073\uff8e\074\uff8e\075\uff8e\076\uff8e\100\uff8e\101" +
    "\uff8e\102\uff8e\110\uff8e\111\uff8e\112\uff8e\131\uff8e\001\002" +
    "\000\036\005\126\024\131\032\113\044\124\045\112\046" +
    "\110\047\117\050\123\051\122\060\256\064\130\100\070" +
    "\110\074\111\101\001\002\000\006\007\267\061\272\001" +
    "\002\000\006\007\261\061\262\001\002\000\004\060\263" +
    "\001\002\000\006\007\uff94\061\uff94\001\002\000\036\005" +
    "\126\024\131\032\113\044\124\045\112\046\110\047\117" +
    "\050\123\051\122\060\256\064\130\100\070\110\074\111" +
    "\101\001\002\000\006\007\267\061\270\001\002\000\006" +
    "\007\261\061\266\001\002\000\006\007\uff93\061\uff93\001" +
    "\002\000\034\005\126\024\131\032\113\044\124\045\112" +
    "\046\110\047\117\050\123\051\122\064\130\100\070\110" +
    "\074\111\101\001\002\000\006\007\uff91\061\uff91\001\002" +
    "\000\006\007\uff90\061\uff90\001\002\000\006\007\uff92\061" +
    "\uff92\001\002\000\046\005\uff9b\007\uff9b\042\uff9b\062\uff9b" +
    "\066\uff9b\070\uff9b\072\uff9b\073\uff9b\074\uff9b\075\uff9b\076" +
    "\uff9b\100\uff9b\101\uff9b\102\uff9b\110\uff9b\111\uff9b\112\uff9b" +
    "\131\uff9b\001\002\000\034\005\126\024\131\032\113\044" +
    "\124\045\112\046\110\047\117\050\123\051\122\064\130" +
    "\100\070\110\074\111\101\001\002\000\060\005\uffe5\007" +
    "\uffe5\025\174\026\173\027\177\030\175\031\176\042\uffe5" +
    "\062\uffe5\066\uffe5\070\uffe5\072\uffe5\073\uffe5\074\uffe5\075" +
    "\uffe5\076\uffe5\100\uffe5\101\uffe5\102\uffe5\110\uffe5\111\uffe5" +
    "\112\uffe5\131\uffe5\001\002\000\030\005\126\044\124\045" +
    "\112\046\110\047\117\050\123\051\122\064\151\100\070" +
    "\110\074\111\101\001\002\000\020\033\142\034\135\035" +
    "\141\036\146\037\145\040\136\065\300\001\002\000\144" +
    "\002\uff58\004\uff58\005\uff58\007\uff58\010\uff58\011\uff58\012" +
    "\uff58\013\uff58\014\uff58\015\uff58\016\uff58\017\uff58\020\uff58" +
    "\021\uff58\022\uff58\023\uff58\025\uff58\026\uff58\027\uff58\030" +
    "\uff58\031\uff58\033\uff58\034\uff58\035\uff58\036\uff58\037\uff58" +
    "\040\uff58\041\uff58\042\uff58\057\uff58\061\uff58\062\uff58\065" +
    "\uff58\066\uff58\070\uff58\072\uff58\073\uff58\074\uff58\075\uff58" +
    "\076\uff58\100\uff58\101\uff58\102\uff58\110\uff58\111\uff58\112" +
    "\uff58\113\uff58\130\uff58\131\uff58\001\002\000\042\005\071" +
    "\042\102\062\067\066\056\072\062\073\075\074\100\075" +
    "\uff6e\076\316\100\070\101\104\102\065\110\074\111\101" +
    "\112\105\131\uff6e\001\002\000\044\005\071\042\102\062" +
    "\067\066\056\070\uff6e\072\062\073\075\074\100\075\uff6e" +
    "\076\316\100\070\101\104\102\065\110\074\111\101\112" +
    "\105\131\uff6e\001\002\000\044\005\071\042\102\062\067" +
    "\066\056\070\uff6e\072\062\073\075\074\100\075\uff6e\076" +
    "\316\100\070\101\104\102\065\110\074\111\101\112\105" +
    "\131\uff6e\001\002\000\006\075\360\131\uff2c\001\002\000" +
    "\044\005\071\042\102\062\067\066\056\070\uff6e\072\062" +
    "\073\075\074\100\075\uff6e\076\316\100\070\101\104\102" +
    "\065\110\074\111\101\112\105\131\uff6e\001\002\000\044" +
    "\005\071\042\102\062\067\066\056\070\uff6e\072\062\073" +
    "\075\074\100\075\uff6e\076\316\100\070\101\104\102\065" +
    "\110\074\111\101\112\105\131\uff6e\001\002\000\046\005" +
    "\071\007\346\042\102\062\067\066\056\070\uff6e\072\062" +
    "\073\075\074\100\075\uff6e\076\316\100\070\101\104\102" +
    "\065\110\074\111\101\112\105\131\uff6e\001\002\000\044" +
    "\005\071\042\102\062\067\066\056\070\uff6e\072\062\073" +
    "\075\074\100\075\uff6e\076\316\100\070\101\104\102\065" +
    "\110\074\111\101\112\105\131\uff6e\001\002\000\044\005" +
    "\071\042\102\062\067\066\056\070\uff6e\072\062\073\075" +
    "\074\100\075\uff6e\076\316\100\070\101\104\102\065\110" +
    "\074\111\101\112\105\131\uff6e\001\002\000\044\005\071" +
    "\042\102\062\067\066\056\070\uff6e\072\062\073\075\074" +
    "\100\075\uff6e\076\316\100\070\101\104\102\065\110\074" +
    "\111\101\112\105\131\uff6e\001\002\000\044\005\071\042" +
    "\102\062\067\066\056\070\uff6e\072\062\073\075\074\100" +
    "\075\uff6e\076\316\100\070\101\104\102\065\110\074\111" +
    "\101\112\105\131\uff6e\001\002\000\046\005\071\007\335" +
    "\042\102\062\067\066\056\070\uff6e\072\062\073\075\074" +
    "\100\075\uff6e\076\316\100\070\101\104\102\065\110\074" +
    "\111\101\112\105\131\uff6e\001\002\000\044\005\071\042" +
    "\102\062\067\066\056\070\uff6e\072\062\073\075\074\100" +
    "\075\uff6e\076\316\100\070\101\104\102\065\110\074\111" +
    "\101\112\105\131\uff6e\001\002\000\034\005\126\024\131" +
    "\032\113\044\124\045\112\046\110\047\117\050\123\051" +
    "\122\064\130\100\070\110\074\111\101\001\002\000\044" +
    "\005\071\042\102\062\067\066\056\070\uff6e\072\062\073" +
    "\075\074\100\075\uff6e\076\316\100\070\101\104\102\065" +
    "\110\074\111\101\112\105\131\uff6e\001\002\000\044\005" +
    "\071\042\102\062\067\066\056\070\uff6e\072\062\073\075" +
    "\074\100\075\uff6e\076\316\100\070\101\104\102\065\110" +
    "\074\111\101\112\105\131\uff6e\001\002\000\044\005\071" +
    "\042\102\062\067\066\056\070\uff6e\072\062\073\075\074" +
    "\100\075\uff6e\076\316\100\070\101\104\102\065\110\074" +
    "\111\101\112\105\131\uff6e\001\002\000\044\005\071\042" +
    "\102\062\067\066\056\070\uff6e\072\062\073\075\074\100" +
    "\075\uff6e\076\316\100\070\101\104\102\065\110\074\111" +
    "\101\112\105\131\uff6e\001\002\000\044\005\071\042\102" +
    "\062\067\066\056\070\uff6e\072\062\073\075\074\100\075" +
    "\uff6e\076\316\100\070\101\104\102\065\110\074\111\101" +
    "\112\105\131\uff6e\001\002\000\010\070\uff74\075\uff74\131" +
    "\uff74\001\002\000\010\070\uff70\075\uff70\131\uff70\001\002" +
    "\000\010\070\uff78\075\uff78\131\uff78\001\002\000\010\070" +
    "\uff79\075\uff79\131\uff79\001\002\000\010\070\uff76\075\uff76" +
    "\131\uff76\001\002\000\056\005\071\025\174\026\173\027" +
    "\177\030\175\031\176\042\102\062\067\066\056\070\uff6e" +
    "\072\062\073\075\074\100\075\uff6e\076\316\100\070\101" +
    "\104\102\065\110\074\111\101\112\105\131\uff6e\001\002" +
    "\000\010\070\uff6f\075\uff6f\131\uff6f\001\002\000\010\070" +
    "\uff73\075\uff73\131\uff73\001\002\000\010\070\uff7f\075\uff7f" +
    "\131\uff7f\001\002\000\004\005\336\001\002\000\050\005" +
    "\uffe7\007\uffe7\042\uffe7\043\337\062\uffe7\066\uffe7\070\uffe7" +
    "\072\uffe7\073\uffe7\074\uffe7\075\uffe7\076\uffe7\100\uffe7\101" +
    "\uffe7\102\uffe7\110\uffe7\111\uffe7\112\uffe7\131\uffe7\001\002" +
    "\000\034\005\126\024\131\032\113\044\124\045\112\046" +
    "\110\047\117\050\123\051\122\064\130\100\070\110\074" +
    "\111\101\001\002\000\060\005\uffe6\007\uffe6\025\174\026" +
    "\173\027\177\030\175\031\176\042\uffe6\062\uffe6\066\uffe6" +
    "\070\uffe6\072\uffe6\073\uffe6\074\uffe6\075\uffe6\076\uffe6\100" +
    "\uffe6\101\uffe6\102\uffe6\110\uffe6\111\uffe6\112\uffe6\131\uffe6" +
    "\001\002\000\010\070\uff7b\075\uff7b\131\uff7b\001\002\000" +
    "\010\070\uff7e\075\uff7e\131\uff7e\001\002\000\010\070\uff7c" +
    "\075\uff7c\131\uff7c\001\002\000\010\070\uff75\075\uff75\131" +
    "\uff75\001\002\000\010\070\uff7d\075\uff7d\131\uff7d\001\002" +
    "\000\004\005\347\001\002\000\050\005\uff9d\007\uff9d\042" +
    "\uff9d\056\214\062\uff9d\066\uff9d\070\uff9d\072\uff9d\073\uff9d" +
    "\074\uff9d\075\uff9d\076\uff9d\100\uff9d\101\uff9d\102\uff9d\110" +
    "\uff9d\111\uff9d\112\uff9d\131\uff9d\001\002\000\052\005\uff9e" +
    "\007\uff9e\042\uff9e\043\351\056\225\062\uff9e\066\uff9e\070" +
    "\uff9e\072\uff9e\073\uff9e\074\uff9e\075\uff9e\076\uff9e\100\uff9e" +
    "\101\uff9e\102\uff9e\110\uff9e\111\uff9e\112\uff9e\131\uff9e\001" +
    "\002\000\004\060\352\001\002\000\036\005\126\024\131" +
    "\032\113\044\124\045\112\046\110\047\117\050\123\051" +
    "\122\060\256\064\130\100\070\110\074\111\101\001\002" +
    "\000\004\061\354\001\002\000\046\005\uff9c\007\uff9c\042" +
    "\uff9c\062\uff9c\066\uff9c\070\uff9c\072\uff9c\073\uff9c\074\uff9c" +
    "\075\uff9c\076\uff9c\100\uff9c\101\uff9c\102\uff9c\110\uff9c\111" +
    "\uff9c\112\uff9c\131\uff9c\001\002\000\010\070\uff71\075\uff71" +
    "\131\uff71\001\002\000\010\070\uff77\075\uff77\131\uff77\001" +
    "\002\000\004\131\240\001\002\000\004\131\uff2d\001\002" +
    "\000\004\073\362\001\002\000\004\064\363\001\002\000" +
    "\034\005\126\024\131\032\113\044\124\045\112\046\110" +
    "\047\117\050\123\051\122\064\130\100\070\110\074\111" +
    "\101\001\002\000\016\025\174\026\173\027\177\030\175" +
    "\031\176\065\365\001\002\000\044\005\uff2e\042\uff2e\062" +
    "\uff2e\066\uff2e\070\uff2e\072\uff2e\073\uff2e\074\uff2e\075\uff2e" +
    "\076\uff2e\100\uff2e\101\uff2e\102\uff2e\110\uff2e\111\uff2e\112" +
    "\uff2e\131\uff2e\001\002\000\010\070\uff72\075\uff72\131\uff72" +
    "\001\002\000\010\070\uff7a\075\uff7a\131\uff7a\001\002\000" +
    "\004\131\uff62\001\002\000\004\131\uff5e\001\002\000\034" +
    "\005\126\024\131\032\113\044\124\045\112\046\110\047" +
    "\117\050\123\051\122\064\130\100\070\110\074\111\101" +
    "\001\002\000\016\025\174\026\173\027\177\030\175\031" +
    "\176\065\374\001\002\000\004\130\024\001\002\000\040" +
    "\005\071\042\102\062\067\066\056\072\062\073\075\074" +
    "\100\076\316\100\070\101\104\102\065\110\074\111\101" +
    "\112\105\131\uff6e\001\002\000\004\131\240\001\002\000" +
    "\044\005\uff2f\042\uff2f\062\uff2f\066\uff2f\070\uff2f\072\uff2f" +
    "\073\uff2f\074\uff2f\075\uff2f\076\uff2f\100\uff2f\101\uff2f\102" +
    "\uff2f\110\uff2f\111\uff2f\112\uff2f\131\uff2f\001\002\000\004" +
    "\005\u0101\001\002\000\004\065\u0102\001\002\000\144\002" +
    "\uff59\004\uff59\005\uff59\007\uff59\010\uff59\011\uff59\012\uff59" +
    "\013\uff59\014\uff59\015\uff59\016\uff59\017\uff59\020\uff59\021" +
    "\uff59\022\uff59\023\uff59\025\uff59\026\uff59\027\uff59\030\uff59" +
    "\031\uff59\033\uff59\034\uff59\035\uff59\036\uff59\037\uff59\040" +
    "\uff59\041\uff59\042\uff59\057\uff59\061\uff59\062\uff59\065\uff59" +
    "\066\uff59\070\uff59\072\uff59\073\uff59\074\uff59\075\uff59\076" +
    "\uff59\100\uff59\101\uff59\102\uff59\110\uff59\111\uff59\112\uff59" +
    "\113\uff59\130\uff59\131\uff59\001\002\000\004\131\uff66\001" +
    "\002\000\004\131\uff67\001\002\000\034\005\126\024\131" +
    "\032\113\044\124\045\112\046\110\047\117\050\123\051" +
    "\122\064\130\100\070\110\074\111\101\001\002\000\044" +
    "\005\uffa5\042\uffa5\062\uffa5\066\uffa5\070\uffa5\072\uffa5\073" +
    "\uffa5\074\uffa5\075\uffa5\076\uffa5\100\uffa5\101\uffa5\102\uffa5" +
    "\110\uffa5\111\uffa5\112\uffa5\131\uffa5\001\002\000\006\043" +
    "\u010b\056\225\001\002\000\034\005\126\024\131\032\113" +
    "\044\124\045\112\046\110\047\117\050\123\051\122\064" +
    "\130\100\070\110\074\111\101\001\002\000\044\005\uffa6" +
    "\042\uffa6\062\uffa6\066\uffa6\070\uffa6\072\uffa6\073\uffa6\074" +
    "\uffa6\075\uffa6\076\uffa6\100\uffa6\101\uffa6\102\uffa6\110\uffa6" +
    "\111\uffa6\112\uffa6\131\uffa6\001\002\000\056\005\uffa8\025" +
    "\174\026\173\027\177\030\175\031\176\042\uffa8\062\uffa8" +
    "\066\uffa8\070\uffa8\072\uffa8\073\uffa8\074\uffa8\075\uffa8\076" +
    "\uffa8\100\uffa8\101\uffa8\102\uffa8\110\uffa8\111\uffa8\112\uffa8" +
    "\131\uffa8\001\002\000\034\005\126\024\131\032\113\044" +
    "\124\045\112\046\110\047\117\050\123\051\122\064\130" +
    "\100\070\110\074\111\101\001\002\000\044\005\uff8d\042" +
    "\uff8d\062\uff8d\066\uff8d\070\uff8d\072\uff8d\073\uff8d\074\uff8d" +
    "\075\uff8d\076\uff8d\100\uff8d\101\uff8d\102\uff8d\110\uff8d\111" +
    "\uff8d\112\uff8d\131\uff8d\001\002\000\056\005\uffa7\025\174" +
    "\026\173\027\177\030\175\031\176\042\uffa7\062\uffa7\066" +
    "\uffa7\070\uffa7\072\uffa7\073\uffa7\074\uffa7\075\uffa7\076\uffa7" +
    "\100\uffa7\101\uffa7\102\uffa7\110\uffa7\111\uffa7\112\uffa7\131" +
    "\uffa7\001\002\000\032\062\u011b\114\u0118\115\u0113\116\u0110" +
    "\117\u0117\120\u0112\121\u0115\122\u0116\123\u0119\124\u0111\125" +
    "\u010f\126\u0114\001\002\000\004\007\uff49\001\002\000\004" +
    "\007\uff51\001\002\000\004\007\uff4a\001\002\000\004\007" +
    "\uff4f\001\002\000\004\007\uff52\001\002\000\004\007\uff48" +
    "\001\002\000\004\007\uff4e\001\002\000\004\007\uff4c\001" +
    "\002\000\004\007\uff50\001\002\000\004\007\uff53\001\002" +
    "\000\004\007\uff4b\001\002\000\004\007\u011c\001\002\000" +
    "\004\007\uff4d\001\002\000\030\005\126\044\124\045\112" +
    "\046\110\047\117\050\123\051\122\064\151\100\070\110" +
    "\074\111\101\001\002\000\020\007\u011e\033\142\034\135" +
    "\035\141\036\146\037\145\040\136\001\002\000\030\005" +
    "\126\044\124\045\112\046\110\047\117\050\123\051\122" +
    "\064\151\100\070\110\074\111\101\001\002\000\020\007" +
    "\u0120\033\142\034\135\035\141\036\146\037\145\040\136" +
    "\001\002\000\030\005\126\044\124\045\112\046\110\047" +
    "\117\050\123\051\122\064\151\100\070\110\074\111\101" +
    "\001\002\000\020\033\142\034\135\035\141\036\146\037" +
    "\145\040\136\065\u0122\001\002\000\144\002\uff5c\004\uff5c" +
    "\005\uff5c\007\uff5c\010\uff5c\011\uff5c\012\uff5c\013\uff5c\014" +
    "\uff5c\015\uff5c\016\uff5c\017\uff5c\020\uff5c\021\uff5c\022\uff5c" +
    "\023\uff5c\025\uff5c\026\uff5c\027\uff5c\030\uff5c\031\uff5c\033" +
    "\uff5c\034\uff5c\035\uff5c\036\uff5c\037\uff5c\040\uff5c\041\uff5c" +
    "\042\uff5c\057\uff5c\061\uff5c\062\uff5c\065\uff5c\066\uff5c\070" +
    "\uff5c\072\uff5c\073\uff5c\074\uff5c\075\uff5c\076\uff5c\100\uff5c" +
    "\101\uff5c\102\uff5c\110\uff5c\111\uff5c\112\uff5c\113\uff5c\130" +
    "\uff5c\131\uff5c\001\002\000\034\005\126\024\131\032\113" +
    "\044\124\045\112\046\110\047\117\050\123\051\122\064" +
    "\130\100\070\110\074\111\101\001\002\000\016\025\174" +
    "\026\173\027\177\030\175\031\176\065\u0125\001\002\000" +
    "\004\130\024\001\002\000\040\005\071\042\102\062\067" +
    "\066\056\072\062\073\075\074\100\076\316\100\070\101" +
    "\104\102\065\110\074\111\101\112\105\131\uff6e\001\002" +
    "\000\004\131\240\001\002\000\050\005\uff3e\042\uff3e\062" +
    "\uff3e\063\u012b\066\uff3e\070\uff3e\072\uff3e\073\uff3e\074\uff3e" +
    "\075\uff3e\076\uff3e\100\uff3e\101\uff3e\102\uff3e\110\uff3e\111" +
    "\uff3e\112\uff3e\127\u012a\131\uff3e\001\002\000\044\005\uff41" +
    "\042\uff41\062\uff41\066\uff41\070\uff41\072\uff41\073\uff41\074" +
    "\uff41\075\uff41\076\uff41\100\uff41\101\uff41\102\uff41\110\uff41" +
    "\111\uff41\112\uff41\131\uff41\001\002\000\004\064\u012f\001" +
    "\002\000\004\130\024\001\002\000\040\005\071\042\102" +
    "\062\067\066\056\072\062\073\075\074\100\076\316\100" +
    "\070\101\104\102\065\110\074\111\101\112\105\131\uff6e" +
    "\001\002\000\004\131\240\001\002\000\044\005\uff3f\042" +
    "\uff3f\062\uff3f\066\uff3f\070\uff3f\072\uff3f\073\uff3f\074\uff3f" +
    "\075\uff3f\076\uff3f\100\uff3f\101\uff3f\102\uff3f\110\uff3f\111" +
    "\uff3f\112\uff3f\131\uff3f\001\002\000\034\005\126\024\131" +
    "\032\113\044\124\045\112\046\110\047\117\050\123\051" +
    "\122\064\130\100\070\110\074\111\101\001\002\000\016" +
    "\025\174\026\173\027\177\030\175\031\176\065\u0131\001" +
    "\002\000\004\130\024\001\002\000\040\005\071\042\102" +
    "\062\067\066\056\072\062\073\075\074\100\076\316\100" +
    "\070\101\104\102\065\110\074\111\101\112\105\131\uff6e" +
    "\001\002\000\004\131\240\001\002\000\050\005\uff3e\042" +
    "\uff3e\062\uff3e\063\u012b\066\uff3e\070\uff3e\072\uff3e\073\uff3e" +
    "\074\uff3e\075\uff3e\076\uff3e\100\uff3e\101\uff3e\102\uff3e\110" +
    "\uff3e\111\uff3e\112\uff3e\127\u012a\131\uff3e\001\002\000\044" +
    "\005\uff40\042\uff40\062\uff40\066\uff40\070\uff40\072\uff40\073" +
    "\uff40\074\uff40\075\uff40\076\uff40\100\uff40\101\uff40\102\uff40" +
    "\110\uff40\111\uff40\112\uff40\131\uff40\001\002\000\004\131" +
    "\uff64\001\002\000\004\005\u0138\001\002\000\004\007\u0139" +
    "\001\002\000\014\103\u013b\104\u013d\105\u013a\106\u013f\107" +
    "\u013c\001\002\000\004\065\uff45\001\002\000\004\065\uff47" +
    "\001\002\000\004\065\uff43\001\002\000\004\065\uff46\001" +
    "\002\000\004\065\u0140\001\002\000\004\065\uff44\001\002" +
    "\000\044\005\uff5a\042\uff5a\062\uff5a\066\uff5a\070\uff5a\072" +
    "\uff5a\073\uff5a\074\uff5a\075\uff5a\076\uff5a\100\uff5a\101\uff5a" +
    "\102\uff5a\110\uff5a\111\uff5a\112\uff5a\131\uff5a\001\002\000" +
    "\004\131\uff61\001\002\000\004\131\uff6d\001\002\000\006" +
    "\005\u0145\042\u0144\001\002\000\014\011\027\012\033\013" +
    "\031\014\025\015\034\001\002\000\004\043\u0157\001\002" +
    "\000\004\010\u0147\001\002\000\034\005\126\024\131\032" +
    "\113\044\124\045\112\046\110\047\117\050\123\051\122" +
    "\064\130\100\070\110\074\111\101\001\002\000\004\010" +
    "\u014a\001\002\000\016\010\uff34\025\174\026\173\027\177" +
    "\030\175\031\176\001\002\000\004\005\u014b\001\002\000" +
    "\012\043\u0153\052\u0151\053\u0154\054\u0152\001\002\000\004" +
    "\065\u014d\001\002\000\004\130\024\001\002\000\040\005" +
    "\071\042\102\062\067\066\056\072\062\073\075\074\100" +
    "\076\316\100\070\101\104\102\065\110\074\111\101\112" +
    "\105\131\uff6e\001\002\000\004\131\240\001\002\000\044" +
    "\005\uff37\042\uff37\062\uff37\066\uff37\070\uff37\072\uff37\073" +
    "\uff37\074\uff37\075\uff37\076\uff37\100\uff37\101\uff37\102\uff37" +
    "\110\uff37\111\uff37\112\uff37\131\uff37\001\002\000\030\005" +
    "\126\044\124\045\112\046\110\047\117\050\123\051\122" +
    "\064\151\100\070\110\074\111\101\001\002\000\004\065" +
    "\uff30\001\002\000\030\005\126\044\124\045\112\046\110" +
    "\047\117\050\123\051\122\064\151\100\070\110\074\111" +
    "\101\001\002\000\004\065\uff31\001\002\000\020\033\142" +
    "\034\135\035\141\036\146\037\145\040\136\065\uff33\001" +
    "\002\000\020\033\142\034\135\035\141\036\146\037\145" +
    "\040\136\065\uff32\001\002\000\030\005\126\044\124\045" +
    "\112\046\110\047\117\050\123\051\122\064\151\100\070" +
    "\110\074\111\101\001\002\000\020\010\uff35\033\142\034" +
    "\135\035\141\036\146\037\145\040\136\001\002\000\004" +
    "\005\u015a\001\002\000\004\043\u015b\001\002\000\030\005" +
    "\126\044\124\045\112\046\110\047\117\050\123\051\122" +
    "\064\151\100\070\110\074\111\101\001\002\000\020\010" +
    "\uff36\033\142\034\135\035\141\036\146\037\145\040\136" +
    "\001\002\000\004\131\uff69\001\002\000\004\131\uff6c\001" +
    "\002\000\004\131\uff6a\001\002\000\004\005\u0161\001\002" +
    "\000\004\065\u0162\001\002\000\004\130\024\001\002\000" +
    "\010\067\u0166\071\u0164\131\uff3a\001\002\000\004\130\024" +
    "\001\002\000\004\131\240\001\002\000\030\005\126\044" +
    "\124\045\112\046\110\047\117\050\123\051\122\064\151" +
    "\100\070\110\074\111\101\001\002\000\020\033\142\034" +
    "\135\035\141\036\146\037\145\040\136\130\024\001\002" +
    "\000\042\005\071\042\102\062\067\066\056\070\uff6e\072" +
    "\062\073\075\074\100\076\316\100\070\101\104\102\065" +
    "\110\074\111\101\112\105\131\uff6e\001\002\000\006\070" +
    "\u016b\131\uff38\001\002\000\004\131\240\001\002\000\004" +
    "\131\uff39\001\002\000\010\067\u0166\071\u0164\131\uff3a\001" +
    "\002\000\004\131\uff3c\001\002\000\044\005\uff3d\042\uff3d" +
    "\062\uff3d\066\uff3d\070\uff3d\072\uff3d\073\uff3d\074\uff3d\075" +
    "\uff3d\076\uff3d\100\uff3d\101\uff3d\102\uff3d\110\uff3d\111\uff3d" +
    "\112\uff3d\131\uff3d\001\002\000\040\005\071\042\102\062" +
    "\067\066\056\072\062\073\075\074\100\076\316\100\070" +
    "\101\104\102\065\110\074\111\101\112\105\131\uff6e\001" +
    "\002\000\004\131\240\001\002\000\004\131\uff3b\001\002" +
    "\000\004\131\uff63\001\002\000\004\131\uff6b\001\002\000" +
    "\004\131\uff5f\001\002\000\004\131\uff65\001\002\000\004" +
    "\131\uff60\001\002\000\004\131\uff68\001\002\000\004\005" +
    "\u0188\001\002\000\004\064\u017a\001\002\000\020\007\uff80" +
    "\011\027\012\033\013\031\014\025\015\034\065\uff80\001" +
    "\002\000\006\007\u0180\065\u0181\001\002\000\006\007\uff83" +
    "\065\uff83\001\002\000\006\007\uff84\065\uff84\001\002\000" +
    "\004\005\u017f\001\002\000\006\007\uff81\065\uff81\001\002" +
    "\000\014\011\027\012\033\013\031\014\025\015\034\001" +
    "\002\000\004\130\uff86\001\002\000\004\130\024\001\002" +
    "\000\036\005\071\042\102\062\067\066\056\072\062\073" +
    "\075\074\100\100\070\101\104\102\065\110\074\111\101" +
    "\112\105\131\uff5d\001\002\000\004\131\240\001\002\000" +
    "\032\002\uff85\004\uff85\005\uff85\011\uff85\012\uff85\013\uff85" +
    "\014\uff85\015\uff85\041\uff85\042\uff85\113\uff85\131\uff85\001" +
    "\002\000\004\005\u0187\001\002\000\006\007\uff82\065\uff82" +
    "\001\002\000\004\064\u0189\001\002\000\020\007\uff80\011" +
    "\027\012\033\013\031\014\025\015\034\065\uff80\001\002" +
    "\000\006\007\u0180\065\u018b\001\002\000\004\130\uff8a\001" +
    "\002\000\004\130\024\001\002\000\040\005\071\042\102" +
    "\062\067\066\056\072\062\073\075\074\100\076\316\100" +
    "\070\101\104\102\065\110\074\111\101\112\105\131\uff6e" +
    "\001\002\000\004\131\240\001\002\000\032\002\uff89\004" +
    "\uff89\005\uff89\011\uff89\012\uff89\013\uff89\014\uff89\015\uff89" +
    "\041\uff89\042\uff89\113\uff89\131\uff89\001\002\000\020\007" +
    "\uff80\011\027\012\033\013\031\014\025\015\034\065\uff80" +
    "\001\002\000\006\007\u0180\065\u0192\001\002\000\004\130" +
    "\uff88\001\002\000\004\130\024\001\002\000\036\005\071" +
    "\042\102\062\067\066\056\072\062\073\075\074\100\100" +
    "\070\101\104\102\065\110\074\111\101\112\105\131\uff5d" +
    "\001\002\000\004\131\240\001\002\000\032\002\uff87\004" +
    "\uff87\005\uff87\011\uff87\012\uff87\013\uff87\014\uff87\015\uff87" +
    "\041\uff87\042\uff87\113\uff87\131\uff87\001\002\000\004\005" +
    "\u0199\001\002\000\010\002\ufff1\004\ufff1\131\ufff1\001\002" +
    "\000\036\002\uffeb\004\uffeb\005\uffeb\007\uffeb\011\uffeb\012" +
    "\uffeb\013\uffeb\014\uffeb\015\uffeb\041\uffeb\042\uffeb\043\u019a" +
    "\113\uffeb\131\uffeb\001\002\000\034\005\126\024\131\032" +
    "\113\044\124\045\112\046\110\047\117\050\123\051\122" +
    "\064\130\100\070\110\074\111\101\001\002\000\046\002" +
    "\uffea\004\uffea\005\uffea\007\uffea\011\uffea\012\uffea\013\uffea" +
    "\014\uffea\015\uffea\025\174\026\173\027\177\030\175\031" +
    "\176\041\uffea\042\uffea\113\uffea\131\uffea\001\002\000\006" +
    "\002\ufff6\004\ufff6\001\002\000\006\002\ufffb\004\ufffb\001" +
    "\002\000\010\002\uffef\004\uffef\131\uffef\001\002\000\004" +
    "\064\u01a0\001\002\000\020\007\uff80\011\027\012\033\013" +
    "\031\014\025\015\034\065\uff80\001\002\000\006\007\u0180" +
    "\065\u01a2\001\002\000\004\130\uff8c\001\002\000\004\130" +
    "\024\001\002\000\040\005\071\042\102\062\067\066\056" +
    "\072\062\073\075\074\100\076\316\100\070\101\104\102" +
    "\065\110\074\111\101\112\105\131\uff6e\001\002\000\004" +
    "\131\240\001\002\000\032\002\uff8b\004\uff8b\005\uff8b\011" +
    "\uff8b\012\uff8b\013\uff8b\014\uff8b\015\uff8b\041\uff8b\042\uff8b" +
    "\113\uff8b\131\uff8b\001\002\000\014\011\027\012\033\013" +
    "\031\014\025\015\034\001\002\000\006\005\u01a9\055\u01aa" +
    "\001\002\000\036\002\uffe8\004\uffe8\005\uffe8\007\uffe8\011" +
    "\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\041\uffe8\042\uffe8" +
    "\043\u01b1\113\uffe8\131\uffe8\001\002\000\004\005\u01ab\001" +
    "\002\000\036\002\uffa0\004\uffa0\005\uffa0\007\uffa0\011\uffa0" +
    "\012\uffa0\013\uffa0\014\uffa0\015\uffa0\041\uffa0\042\uffa0\056" +
    "\214\113\uffa0\131\uffa0\001\002\000\040\002\uff9f\004\uff9f" +
    "\005\uff9f\007\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f\015" +
    "\uff9f\041\uff9f\042\uff9f\043\u01ad\056\225\113\uff9f\131\uff9f" +
    "\001\002\000\004\060\u01ae\001\002\000\036\005\126\024" +
    "\131\032\113\044\124\045\112\046\110\047\117\050\123" +
    "\051\122\060\256\064\130\100\070\110\074\111\101\001" +
    "\002\000\004\061\u01b0\001\002\000\034\002\uffa1\004\uffa1" +
    "\005\uffa1\007\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015" +
    "\uffa1\041\uffa1\042\uffa1\113\uffa1\131\uffa1\001\002\000\034" +
    "\005\126\024\131\032\113\044\124\045\112\046\110\047" +
    "\117\050\123\051\122\064\130\100\070\110\074\111\101" +
    "\001\002\000\046\002\uffe9\004\uffe9\005\uffe9\007\uffe9\011" +
    "\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\025\174\026\173" +
    "\027\177\030\175\031\176\041\uffe9\042\uffe9\113\uffe9\131" +
    "\uffe9\001\002\000\010\002\uffee\004\uffee\131\uffee\001\002" +
    "\000\004\005\u01b6\001\002\000\010\002\ufff0\004\ufff0\131" +
    "\ufff0\001\002\000\036\002\uffa3\004\uffa3\005\uffa3\007\uffa3" +
    "\011\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3\041\uffa3\042" +
    "\uffa3\056\214\113\uffa3\131\uffa3\001\002\000\040\002\uffa4" +
    "\004\uffa4\005\uffa4\007\uffa4\011\uffa4\012\uffa4\013\uffa4\014" +
    "\uffa4\015\uffa4\041\uffa4\042\uffa4\043\u01b8\056\225\113\uffa4" +
    "\131\uffa4\001\002\000\004\060\u01b9\001\002\000\036\005" +
    "\126\024\131\032\113\044\124\045\112\046\110\047\117" +
    "\050\123\051\122\060\256\064\130\100\070\110\074\111" +
    "\101\001\002\000\004\061\u01bb\001\002\000\034\002\uffa2" +
    "\004\uffa2\005\uffa2\007\uffa2\011\uffa2\012\uffa2\013\uffa2\014" +
    "\uffa2\015\uffa2\041\uffa2\042\uffa2\113\uffa2\131\uffa2\001\002" +
    "\000\010\002\uffed\004\uffed\131\uffed\001\002\000\006\007" +
    "\ufff2\130\ufff2\001\002\000\004\005\u01bf\001\002\000\006" +
    "\007\ufff3\130\ufff3\001\002\000\004\002\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01be\000\006\002\004\003\003\001\001\000\006\004" +
    "\014\005\012\001\001\000\002\001\001\000\004\003\006" +
    "\001\001\000\002\001\001\000\004\003\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\u01bf\005\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\103" +
    "\016\001\001\000\006\006\017\007\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\063\022\001\001\000" +
    "\022\010\037\011\040\012\034\016\035\021\027\035\036" +
    "\036\031\045\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\010\u01bb\011\040\012\034\016\035\021\027" +
    "\035\036\036\031\045\025\001\001\000\002\001\001\000" +
    "\022\010\u01b4\011\040\012\034\016\035\021\027\035\036" +
    "\036\031\045\025\001\001\000\002\001\001\000\022\010" +
    "\u01b2\011\040\012\034\016\035\021\027\035\036\036\031" +
    "\045\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\010\u019d\011\040" +
    "\012\034\016\035\021\027\035\036\036\031\045\025\001" +
    "\001\000\004\065\u019b\001\001\000\022\010\u0197\011\040" +
    "\012\034\016\035\021\027\035\036\036\031\045\025\001" +
    "\001\000\002\001\001\000\004\016\u0177\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\063\046\001\001\000" +
    "\044\015\057\025\047\027\071\031\056\032\072\033\051" +
    "\034\065\037\054\040\076\041\063\042\050\043\052\044" +
    "\075\046\060\067\102\101\062\102\053\001\001\000\044" +
    "\015\057\025\047\027\071\031\056\032\072\033\051\034" +
    "\065\037\054\040\076\041\063\042\050\043\052\044\075" +
    "\046\060\067\u0176\101\062\102\053\001\001\000\044\015" +
    "\057\025\047\027\071\031\056\032\072\033\051\034\065" +
    "\037\054\040\076\041\063\042\050\043\052\044\075\046" +
    "\060\067\u0175\101\062\102\053\001\001\000\044\015\057" +
    "\025\047\027\071\031\056\032\072\033\051\034\065\037" +
    "\054\040\076\041\063\042\050\043\052\044\075\046\060" +
    "\067\u0174\101\062\102\053\001\001\000\044\015\057\025" +
    "\047\027\071\031\056\032\072\033\051\034\065\037\054" +
    "\040\076\041\063\042\050\043\052\044\075\046\060\067" +
    "\u0173\101\062\102\053\001\001\000\044\015\057\025\047" +
    "\027\071\031\056\032\072\033\051\034\065\037\054\040" +
    "\076\041\063\042\050\043\052\044\075\046\060\067\u0172" +
    "\101\062\102\053\001\001\000\044\015\057\025\047\027" +
    "\071\031\056\032\072\033\051\034\065\037\054\040\076" +
    "\041\063\042\050\043\052\044\075\046\060\067\u0171\101" +
    "\062\102\053\001\001\000\002\001\001\000\044\015\057" +
    "\025\047\027\071\031\056\032\072\033\051\034\065\037" +
    "\054\040\076\041\063\042\050\043\052\044\075\046\060" +
    "\067\u015e\101\062\102\053\001\001\000\044\015\057\025" +
    "\047\027\071\031\056\032\072\033\051\034\065\037\054" +
    "\040\076\041\063\042\050\043\052\044\075\046\060\067" +
    "\u015d\101\062\102\053\001\001\000\044\015\057\025\047" +
    "\027\071\031\056\032\072\033\051\034\065\037\054\040" +
    "\076\041\063\042\050\043\052\044\075\046\060\067\u015c" +
    "\101\062\102\053\001\001\000\002\001\001\000\044\015" +
    "\057\025\047\027\071\031\056\032\072\033\051\034\065" +
    "\037\054\040\076\041\063\042\050\043\052\044\075\046" +
    "\060\067\u0141\101\062\102\053\001\001\000\044\015\057" +
    "\025\047\027\071\031\056\032\072\033\051\034\065\037" +
    "\054\040\076\041\063\042\050\043\052\044\075\046\060" +
    "\067\u0140\101\062\102\053\001\001\000\002\001\001\000" +
    "\044\015\057\025\047\027\071\031\056\032\072\033\051" +
    "\034\065\037\054\040\076\041\063\042\050\043\052\044" +
    "\075\046\060\067\u0135\101\062\102\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\u0106\001\001\000" +
    "\044\015\057\025\047\027\071\031\056\032\072\033\051" +
    "\034\065\037\054\040\076\041\063\042\050\043\052\044" +
    "\075\046\060\067\u0103\101\062\102\053\001\001\000\044" +
    "\015\057\025\047\027\071\031\056\032\072\033\051\034" +
    "\065\037\054\040\076\041\063\042\050\043\052\044\075" +
    "\046\060\067\u0102\101\062\102\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\015\057\025\047\027\071" +
    "\031\056\032\072\033\051\034\065\037\054\040\076\041" +
    "\063\042\050\043\052\044\075\046\060\067\370\101\062" +
    "\102\053\001\001\000\044\015\057\025\047\027\071\031" +
    "\056\032\072\033\051\034\065\037\054\040\076\041\063" +
    "\042\050\043\052\044\075\046\060\067\367\101\062\102" +
    "\053\001\001\000\004\063\300\001\001\000\002\001\001" +
    "\000\004\016\241\001\001\000\004\064\240\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\014\117\017\124" +
    "\020\132\037\115\042\110\043\113\046\120\047\133\060" +
    "\106\062\131\076\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\211\001\001\000\002\001\001\000" +
    "\024\014\117\020\207\037\115\042\110\043\113\046\120" +
    "\047\133\060\206\076\114\001\001\000\024\014\117\020" +
    "\205\037\115\042\110\043\113\046\120\047\133\060\204" +
    "\076\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\014\117\020\166\037\115\042\110" +
    "\043\113\046\120\047\133\076\114\001\001\000\022\014" +
    "\117\020\165\037\115\042\110\043\113\046\120\047\133" +
    "\076\114\001\001\000\022\014\117\020\164\037\115\042" +
    "\110\043\113\046\120\047\133\076\114\001\001\000\022" +
    "\014\117\020\163\037\115\042\110\043\113\046\120\047" +
    "\133\076\114\001\001\000\022\014\117\020\162\037\115" +
    "\042\110\043\113\046\120\047\133\076\114\001\001\000" +
    "\022\014\117\020\161\037\115\042\110\043\113\046\120" +
    "\047\133\076\114\001\001\000\022\014\117\020\160\037" +
    "\115\042\110\043\113\046\120\047\133\076\114\001\001" +
    "\000\022\014\117\020\157\037\115\042\110\043\113\046" +
    "\120\047\133\076\114\001\001\000\022\014\117\020\156" +
    "\037\115\042\110\043\113\046\120\047\133\076\114\001" +
    "\001\000\022\014\117\020\155\037\115\042\110\043\113" +
    "\046\120\047\133\076\114\001\001\000\022\014\117\020" +
    "\154\037\115\042\110\043\113\046\120\047\133\076\114" +
    "\001\001\000\022\014\117\020\151\037\115\042\110\043" +
    "\113\046\120\047\133\076\114\001\001\000\022\014\117" +
    "\020\152\037\115\042\110\043\113\046\120\047\133\076" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\014\117\017\171" +
    "\020\132\037\115\042\110\043\113\046\120\047\133\060" +
    "\106\076\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\014\117\017\203\020\132\037\115\042\110\043" +
    "\113\046\120\047\133\060\106\076\114\001\001\000\026" +
    "\014\117\017\202\020\132\037\115\042\110\043\113\046" +
    "\120\047\133\060\106\076\114\001\001\000\026\014\117" +
    "\017\201\020\132\037\115\042\110\043\113\046\120\047" +
    "\133\060\106\076\114\001\001\000\026\014\117\017\200" +
    "\020\132\037\115\042\110\043\113\046\120\047\133\060" +
    "\106\076\114\001\001\000\026\014\117\017\177\020\132" +
    "\037\115\042\110\043\113\046\120\047\133\060\106\076" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\014\117\020" +
    "\220\037\115\042\110\043\113\046\120\047\133\050\217" +
    "\051\216\076\114\001\001\000\022\014\117\020\214\037" +
    "\115\042\110\043\113\046\120\047\133\076\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\014\117\020\222" +
    "\037\115\042\110\043\113\046\120\047\133\076\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\014\117" +
    "\020\225\037\115\042\110\043\113\046\120\047\133\076" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\014\117\017\230\020\132\037\115\042\110\043\113\046" +
    "\120\047\133\060\106\076\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\014\117\020\233\037\115\042" +
    "\110\043\113\046\120\047\133\076\114\001\001\000\002" +
    "\001\001\000\022\014\117\020\235\037\115\042\110\043" +
    "\113\046\120\047\133\076\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\245\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\014\117\017\254\020\132\023\253\024\250\037\115" +
    "\042\110\043\113\046\120\047\133\060\106\061\251\075" +
    "\252\076\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\014\117\017\254\020\132\024\256\037\115\042\110" +
    "\043\113\046\120\047\133\060\106\061\251\075\257\076" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\014\117\017\254\020" +
    "\132\024\263\037\115\042\110\043\113\046\120\047\133" +
    "\060\106\061\251\075\264\076\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\014\117" +
    "\017\254\020\132\037\115\042\110\043\113\046\120\047" +
    "\133\060\106\061\270\076\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\014\117\017\274\020\132\037\115\042\110\043\113" +
    "\046\120\047\133\060\106\076\114\001\001\000\002\001" +
    "\001\000\022\014\117\020\276\037\115\042\110\043\113" +
    "\046\120\047\133\076\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\015\311\025\301\027\317\031\310" +
    "\032\320\033\304\034\316\037\307\040\322\041\314\042" +
    "\302\043\305\044\321\046\312\066\303\101\313\102\306" +
    "\001\001\000\044\015\311\025\301\027\317\031\310\032" +
    "\320\033\304\034\316\037\307\040\322\041\314\042\302" +
    "\043\305\044\321\046\312\066\366\101\313\102\306\001" +
    "\001\000\044\015\311\025\301\027\317\031\310\032\320" +
    "\033\304\034\316\037\307\040\322\041\314\042\302\043" +
    "\305\044\321\046\312\066\365\101\313\102\306\001\001" +
    "\000\004\071\356\001\001\000\044\015\311\025\301\027" +
    "\317\031\310\032\320\033\304\034\316\037\307\040\322" +
    "\041\314\042\302\043\305\044\321\046\312\066\355\101" +
    "\313\102\306\001\001\000\044\015\311\025\301\027\317" +
    "\031\310\032\320\033\304\034\316\037\307\040\322\041" +
    "\314\042\302\043\305\044\321\046\312\066\354\101\313" +
    "\102\306\001\001\000\044\015\311\025\301\027\317\031" +
    "\310\032\320\033\304\034\316\037\307\040\322\041\314" +
    "\042\302\043\305\044\321\046\312\066\344\101\313\102" +
    "\306\001\001\000\044\015\311\025\301\027\317\031\310" +
    "\032\320\033\304\034\316\037\307\040\322\041\314\042" +
    "\302\043\305\044\321\046\312\066\343\101\313\102\306" +
    "\001\001\000\044\015\311\025\301\027\317\031\310\032" +
    "\320\033\304\034\316\037\307\040\322\041\314\042\302" +
    "\043\305\044\321\046\312\066\342\101\313\102\306\001" +
    "\001\000\044\015\311\025\301\027\317\031\310\032\320" +
    "\033\304\034\316\037\307\040\322\041\314\042\302\043" +
    "\305\044\321\046\312\066\341\101\313\102\306\001\001" +
    "\000\044\015\311\025\301\027\317\031\310\032\320\033" +
    "\304\034\316\037\307\040\322\041\314\042\302\043\305" +
    "\044\321\046\312\066\340\101\313\102\306\001\001\000" +
    "\044\015\311\025\301\027\317\031\310\032\320\033\304" +
    "\034\316\037\307\040\322\041\314\042\302\043\305\044" +
    "\321\046\312\066\333\101\313\102\306\001\001\000\044" +
    "\015\311\025\301\027\317\031\310\032\320\033\304\034" +
    "\316\037\307\040\322\041\314\042\302\043\305\044\321" +
    "\046\312\066\332\101\313\102\306\001\001\000\026\014" +
    "\117\017\330\020\132\037\115\042\110\043\113\046\120" +
    "\047\133\060\106\076\114\001\001\000\044\015\311\025" +
    "\301\027\317\031\310\032\320\033\304\034\316\037\307" +
    "\040\322\041\314\042\302\043\305\044\321\046\312\066" +
    "\327\101\313\102\306\001\001\000\044\015\311\025\301" +
    "\027\317\031\310\032\320\033\304\034\316\037\307\040" +
    "\322\041\314\042\302\043\305\044\321\046\312\066\326" +
    "\101\313\102\306\001\001\000\044\015\311\025\301\027" +
    "\317\031\310\032\320\033\304\034\316\037\307\040\322" +
    "\041\314\042\302\043\305\044\321\046\312\066\325\101" +
    "\313\102\306\001\001\000\044\015\311\025\301\027\317" +
    "\031\310\032\320\033\304\034\316\037\307\040\322\041" +
    "\314\042\302\043\305\044\321\046\312\066\324\101\313" +
    "\102\306\001\001\000\044\015\311\025\301\027\317\031" +
    "\310\032\320\033\304\034\316\037\307\040\322\041\314" +
    "\042\302\043\305\044\321\046\312\066\323\101\313\102" +
    "\306\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\015" +
    "\311\025\301\027\317\031\310\032\320\033\304\034\316" +
    "\037\307\040\322\041\314\042\302\043\305\044\321\046" +
    "\312\066\331\101\313\102\306\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\014\117\017\337\020\132\037\115" +
    "\042\110\043\113\046\120\047\133\060\106\076\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\347\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\014\117\017\254\020\132\023" +
    "\352\024\250\037\115\042\110\043\113\046\120\047\133" +
    "\060\106\061\251\075\252\076\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\064\360\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\014\117\017\363\020\132" +
    "\037\115\042\110\043\113\046\120\047\133\060\106\076" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\014\117\017\372\020\132\037\115\042\110" +
    "\043\113\046\120\047\133\060\106\076\114\001\001\000" +
    "\002\001\001\000\004\063\374\001\001\000\044\015\311" +
    "\025\301\027\317\031\310\032\320\033\304\034\316\037" +
    "\307\040\322\041\314\042\302\043\305\044\321\046\312" +
    "\066\375\101\313\102\306\001\001\000\004\064\376\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\014\117\017\u010c\020\132\037\115\042\110\043\113" +
    "\046\120\047\133\060\106\076\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\014\117\017\u0109\020\132" +
    "\037\115\042\110\043\113\046\120\047\133\060\106\076" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\014\117\017\254\020\132\037\115\042\110\043\113\046" +
    "\120\047\133\060\106\061\u010b\076\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\056\u0119\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\014\117\020\u011c\037\115\042\110\043\113\046\120" +
    "\047\133\076\114\001\001\000\002\001\001\000\022\014" +
    "\117\020\u011e\037\115\042\110\043\113\046\120\047\133" +
    "\076\114\001\001\000\002\001\001\000\022\014\117\020" +
    "\u0120\037\115\042\110\043\113\046\120\047\133\076\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\014" +
    "\117\017\u0123\020\132\037\115\042\110\043\113\046\120" +
    "\047\133\060\106\076\114\001\001\000\002\001\001\000" +
    "\004\063\u0125\001\001\000\044\015\311\025\301\027\317" +
    "\031\310\032\320\033\304\034\316\037\307\040\322\041" +
    "\314\042\302\043\305\044\321\046\312\066\u0126\101\313" +
    "\102\306\001\001\000\004\064\u0127\001\001\000\004\026" +
    "\u0128\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\063\u012b\001\001\000\044\015\311\025\301\027\317\031" +
    "\310\032\320\033\304\034\316\037\307\040\322\041\314" +
    "\042\302\043\305\044\321\046\312\066\u012c\101\313\102" +
    "\306\001\001\000\004\064\u012d\001\001\000\002\001\001" +
    "\000\026\014\117\017\u012f\020\132\037\115\042\110\043" +
    "\113\046\120\047\133\060\106\076\114\001\001\000\002" +
    "\001\001\000\004\063\u0131\001\001\000\044\015\311\025" +
    "\301\027\317\031\310\032\320\033\304\034\316\037\307" +
    "\040\322\041\314\042\302\043\305\044\321\046\312\066" +
    "\u0132\101\313\102\306\001\001\000\004\064\u0133\001\001" +
    "\000\004\026\u0134\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\057\u013d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\052\u0145\001\001\000\004\016\u0158\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\014\117\017\u0148\020" +
    "\132\037\115\042\110\043\113\046\120\047\133\053\u0147" +
    "\060\106\076\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\u014b\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\063\u014d\001\001\000\044\015\311\025" +
    "\301\027\317\031\310\032\320\033\304\034\316\037\307" +
    "\040\322\041\314\042\302\043\305\044\321\046\312\066" +
    "\u014e\101\313\102\306\001\001\000\004\064\u014f\001\001" +
    "\000\002\001\001\000\022\014\117\020\u0155\037\115\042" +
    "\110\043\113\046\120\047\133\076\114\001\001\000\002" +
    "\001\001\000\022\014\117\020\u0154\037\115\042\110\043" +
    "\113\046\120\047\133\076\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\014\117\020" +
    "\u0157\037\115\042\110\043\113\046\120\047\133\076\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\014\117\020\u015b\037\115\042\110\043\113" +
    "\046\120\047\133\076\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\063\u0162\001\001\000" +
    "\004\072\u0164\001\001\000\004\063\u016e\001\001\000\004" +
    "\064\u016d\001\001\000\022\014\117\020\u0166\037\115\042" +
    "\110\043\113\046\120\047\133\076\114\001\001\000\004" +
    "\063\u0167\001\001\000\044\015\311\025\301\027\317\031" +
    "\310\032\320\033\304\034\316\037\307\040\322\041\314" +
    "\042\302\043\305\044\321\046\312\066\u0168\101\313\102" +
    "\306\001\001\000\004\070\u0169\001\001\000\004\064\u016b" +
    "\001\001\000\002\001\001\000\004\072\u016c\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\015\311\025\301" +
    "\027\317\031\310\032\320\033\304\034\316\037\307\040" +
    "\322\041\314\042\302\043\305\044\321\046\312\066\u016f" +
    "\101\313\102\306\001\001\000\004\064\u0170\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\016\u017d" +
    "\055\u017a\073\u017c\074\u017b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\u0185\001\001\000\004\107\u0181\001" +
    "\001\000\004\063\u0182\001\001\000\044\015\057\025\047" +
    "\027\071\031\056\032\072\033\051\034\065\037\054\040" +
    "\076\041\063\042\050\043\052\044\075\046\060\067\u0183" +
    "\101\062\102\053\001\001\000\004\064\u0184\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\016\u017d\055\u0189\073\u017c\074\u017b\001" +
    "\001\000\002\001\001\000\004\105\u018b\001\001\000\004" +
    "\063\u018c\001\001\000\044\015\311\025\301\027\317\031" +
    "\310\032\320\033\304\034\316\037\307\040\322\041\314" +
    "\042\302\043\305\044\321\046\312\066\u018d\101\313\102" +
    "\306\001\001\000\004\064\u018e\001\001\000\002\001\001" +
    "\000\012\016\u017d\055\u0190\073\u017c\074\u017b\001\001\000" +
    "\002\001\001\000\004\106\u0192\001\001\000\004\063\u0193" +
    "\001\001\000\044\015\057\025\047\027\071\031\056\032" +
    "\072\033\051\034\065\037\054\040\076\041\063\042\050" +
    "\043\052\044\075\046\060\067\u0194\101\062\102\053\001" +
    "\001\000\004\064\u0195\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\014" +
    "\117\017\u019a\020\132\037\115\042\110\043\113\046\120" +
    "\047\133\060\106\076\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\016\u017d\055\u01a0\073\u017c\074\u017b\001" +
    "\001\000\002\001\001\000\004\104\u01a2\001\001\000\004" +
    "\063\u01a3\001\001\000\044\015\311\025\301\027\317\031" +
    "\310\032\320\033\304\034\316\037\307\040\322\041\314" +
    "\042\302\043\305\044\321\046\312\066\u01a4\101\313\102" +
    "\306\001\001\000\004\064\u01a5\001\001\000\002\001\001" +
    "\000\004\016\u01a7\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\u01ab\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\014\117\017\254\020" +
    "\132\023\u01ae\024\250\037\115\042\110\043\113\046\120" +
    "\047\133\060\106\061\251\075\252\076\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\014\117\017\u01b1" +
    "\020\132\037\115\042\110\043\113\046\120\047\133\060" +
    "\106\076\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\u01b6\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\014\117" +
    "\017\254\020\132\023\u01b9\024\250\037\115\042\110\043" +
    "\113\046\120\047\133\060\106\061\251\075\252\076\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //codigo
    public ArrayList<ErrorLSS> listaErrores = new ArrayList<>();

    public void setAccion(String tipo, String mensaje, String accion){
    }

	private Symbol s;
	public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void syntax_error(Symbol s){
        //String message = s.toString();
        //StringBuilder m = new StringBuilder("Error: ");
        String cadena =  (String) s.value;
        int columna = s.left+1;
        int linea = s.right+1;
        agregarError("Sintactico",cadena,"No se esperaba un token tipo <"+s.value+">", linea, columna);
    }

	public void agregarError(String tipo, String cadena, String descripcion, int linea, int columna){
        System.out.println("Tipo: "+tipo+"\tCadena: "+cadena+", descripcion: "+descripcion+", Linea: "+linea+", Columna: "+columna);
		listaErrores.add(new ErrorLSS(linea,columna,cadena,descripcion,tipo));
    }


	public void unrecovered_syntax_error(Symbol cur_token){
        
        System.out.println("No se pudo recuperar y seguir analizando, no se encontraron mas tokens.");
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTS$actions {


	public TablaSimbolos tablaSimbolos = new TablaSimbolos();
    public ManejadorTablaSimbolos manejadorTablaSimbolos = new ManejadorTablaSimbolos(tablaSimbolos);
	public ComprobacionTipos comprobacionTipos = new ComprobacionTipos();
	public ManejadorArreglos manejadorArreglos = new ManejadorArreglos();
	boolean reportar = true;

  private final AnalizadorSintacticoTS parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTS$actions(AnalizadorSintacticoTS parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTS$do_action(
    int                        CUP$AnalizadorSintacticoTS$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTS$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTS$stack,
    int                        CUP$AnalizadorSintacticoTS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTS$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // especiales_q_retornan ::= struct_longitud 
            {
              Object RESULT =null;
		 RESULT = "ENTERO"; 
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("especiales_q_retornan",60, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // especiales_q_retornan ::= struct_sumarizar 
            {
              Object RESULT =null;
		 RESULT = "CADENA"; 
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("especiales_q_retornan",60, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // especiales_q_retornan ::= struct_reproducir 
            {
              Object RESULT =null;
		 RESULT = "ENTERO";
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("especiales_q_retornan",60, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // state_continuar ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("state_continuar",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // state_continuar ::= CONTINUAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("state_continuar",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // struct_hacer ::= HACER st_ind code_funcion state_continuar st_ded MIENTRAS PA_A struct_operador_logico PA_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_hacer",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // struct_mientras ::= MIENTRAS PA_A struct_operador_logico PA_C st_ind code_funcion st_ded 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_mientras",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // incremento_para ::= IDENTIFICADOR MENOS_MENOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("incremento_para",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // incremento_para ::= IDENTIFICADOR MAS_MAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("incremento_para",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // incremento_para ::= IDENTIFICADOR MAS_IGUAL valor_operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("incremento_para",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // incremento_para ::= IDENTIFICADOR IGUAL valor_operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("incremento_para",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // condicion_para ::= struct_operador_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("condicion_para",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // para_asig_var ::= IDENTIFICADOR IGUAL valor_operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("para_asig_var",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // para_asig_var ::= VAR tipo_dato IDENTIFICADOR IGUAL valor_operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("para_asig_var",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // struct_para ::= PARA PA_A para_asig_var PUNTO_COMA condicion_para PUNTO_COMA incremento_para PA_C st_ind code_funcion st_ded 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_para",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // caso_salir ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("caso_salir",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // caso_salir ::= SALIR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("caso_salir",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // struct_caso ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_caso",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // struct_caso ::= DEFAULT st_ind code_funcion st_ded 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_caso",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // struct_caso ::= CASO valor_operacion st_ind code_funcion caso_salir st_ded struct_caso 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_caso",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // struct_switch ::= SWITCH PA_A IDENTIFICADOR PA_C st_ind struct_caso st_ded 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_switch",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // struct_sino ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_sino",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // struct_sino ::= SINO st_ind code_funcion st_ded 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_sino",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // struct_sino ::= SINO_SI PA_A struct_operador_logico PA_C st_ind code_funcion st_ded struct_sino 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_sino",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // struct_si ::= SI PA_A struct_operador_logico PA_C st_ind code_funcion st_ded struct_sino 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_si",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // struct_principal ::= PRINCIPAL PA_A PA_C st_ind code_metodo st_ded 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_principal",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // tipo_orden ::= PRIMOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("tipo_orden",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // tipo_orden ::= IMPARES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("tipo_orden",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // tipo_orden ::= PARES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("tipo_orden",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // tipo_orden ::= DESCENDENTE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("tipo_orden",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // tipo_orden ::= ASCENDENTE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("tipo_orden",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // notas ::= LA_S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // notas ::= SOL_S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // notas ::= FA_S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // notas ::= RE_S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // notas ::= DO_S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // notas ::= SI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // notas ::= LA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // notas ::= SOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // notas ::= FA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // notas ::= MI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // notas ::= RE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // notas ::= DO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // mensajes ::= struct_operador_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("mensajes",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // mensajes ::= mensajes MAS struct_operador_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("mensajes",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // struct_mensaje ::= MENSAJE PA_A PA_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_mensaje",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // struct_mensaje ::= MENSAJE PA_A mensajes PA_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_mensaje",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // struct_longitud ::= LONGITUD PA_A valor_operacion PA_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_longitud",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // struct_sumarizar ::= SUMARIZAR PA_A IDENTIFICADOR PA_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_sumarizar",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // struct_ordenar ::= ORDENAR PA_A IDENTIFICADOR COMA tipo_orden PA_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_ordenar",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // struct_esperar ::= ESPERAR PA_A valor_operacion COMA valor_operacion PA_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_esperar",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // struct_reproducir ::= REPRODUCIR PA_A notas COMA valor_operacion COMA valor_operacion COMA valor_operacion PA_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_reproducir",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // code_metodo ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // code_metodo ::= struct_mensaje code_metodo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // code_metodo ::= struct_longitud code_metodo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // code_metodo ::= struct_sumarizar code_metodo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // code_metodo ::= struct_ordenar code_metodo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // code_metodo ::= struct_esperar code_metodo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // code_metodo ::= struct_reproducir code_metodo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // code_metodo ::= struct_hacer code_metodo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // code_metodo ::= struct_mientras code_metodo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // code_metodo ::= struct_para code_metodo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // code_metodo ::= struct_switch code_metodo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // code_metodo ::= struct_si code_metodo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // code_metodo ::= strunt_llamada_funcion code_metodo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // code_metodo ::= struct_asig_arreglo code_metodo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // code_metodo ::= struct_declaracion_array_f code_metodo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // code_metodo ::= struc_asig_var code_metodo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // code_metodo ::= struct_declaracion_var_f code_metodo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // code_funcion ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // code_funcion ::= RETORNAR struct_operador_logico code_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // code_funcion ::= struct_mensaje code_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // code_funcion ::= struct_longitud code_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // code_funcion ::= struct_sumarizar code_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // code_funcion ::= struct_ordenar code_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // code_funcion ::= struct_esperar code_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // code_funcion ::= struct_reproducir code_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // code_funcion ::= struct_hacer code_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // code_funcion ::= struct_mientras code_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // code_funcion ::= struct_para code_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // code_funcion ::= struct_switch code_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // code_funcion ::= struct_si code_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // code_funcion ::= strunt_llamada_funcion code_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // code_funcion ::= struct_asig_arreglo code_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // code_funcion ::= struct_declaracion_array_f code_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // code_funcion ::= struc_asig_var code_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // code_funcion ::= struct_declaracion_var_f code_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // param_vacio ::= 
            {
              Object RESULT =null;
		ArrayList<Simbolo> lista = new ArrayList<>(); RESULT = lista;
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("param_vacio",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // params_lleno ::= tipo_dato IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		
				Simbolo s = new Simbolo(a,t,manejadorTablaSimbolos.ambito+1);
				ArrayList<Simbolo> lista = new ArrayList<>();
				lista.add(s);
				RESULT = lista;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("params_lleno",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // params_lleno ::= struct_parametros COMA tipo_dato IDENTIFICADOR 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		
				Simbolo s = new Simbolo(a,t,manejadorTablaSimbolos.ambito+1);
				ArrayList<Simbolo> lista = (ArrayList<Simbolo>)r;
				lista.add(s);
				RESULT = lista;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("params_lleno",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // struct_parametros ::= param_vacio 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		RESULT = r;
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_parametros",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // struct_parametros ::= params_lleno 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		RESULT = r;
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_parametros",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // struct_procedimiento ::= KEEP IDENTIFICADOR PA_A struct_parametros PA_C NT$4 st_ind code_metodo st_ded 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)).value;
		reportar = true;
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_procedimiento",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NT$4 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;

	 			Simbolo s = new Simbolo(a,"PROCEDIMIETO",manejadorTablaSimbolos.ambitoFlag,(ArrayList<Simbolo>) p,true,false,true);
				s.generarParamsStrings();
				if(reportar){
					s.generarParamsStrings();
					if(manejadorTablaSimbolos.isExistSimboloFM(s)){
						manejadorTablaSimbolos.agregarSimbolo(s);
					}else{
						parser.agregarError("Semantico",a,"Error: Ya existe un metodo o funcion con el mismo nombre \""+a+"\" dentro del ambito", aright+1, aleft+1);
					}
				}
				reportar = false;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("NT$4",69, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // struct_procedimiento ::= IDENTIFICADOR PA_A struct_parametros PA_C NT$3 st_ind code_metodo st_ded 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)).value;
		reportar = true;
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_procedimiento",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$3 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;

	 			Simbolo s = new Simbolo(a,"PROCEDIMIETO",manejadorTablaSimbolos.ambitoFlag,(ArrayList<Simbolo>) p,false,false,true);
				s.generarParamsStrings();
				if(reportar){
					s.generarParamsStrings();
					if(manejadorTablaSimbolos.isExistSimboloFM(s)){
						manejadorTablaSimbolos.agregarSimbolo(s);
					}else{
						parser.agregarError("Semantico",a,"Error: Ya existe un metodo o funcion con el mismo nombre \""+a+"\" dentro del ambito", aright+1, aleft+1);
					}
				}
				reportar = false;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("NT$3",68, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // struct_funcion ::= KEEP tipo_dato IDENTIFICADOR PA_A struct_parametros PA_C NT$2 st_ind code_funcion st_ded 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-8)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)).value;
		reportar = true;
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_funcion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$2 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;

	 			Simbolo s = new Simbolo(a,t,manejadorTablaSimbolos.ambitoFlag,(ArrayList<Simbolo>) p,true,true,false);
				 s.generarParamsStrings();
				if(reportar){
					s.generarParamsStrings();
					if(manejadorTablaSimbolos.isExistSimboloFM(s)){
						manejadorTablaSimbolos.agregarSimbolo(s);
					}else{
						parser.agregarError("Semantico",a,"Error: Ya existe un metodo o funcion con el mismo nombre \""+a+"\" dentro del ambito", aright+1, aleft+1);
					}
				}
				reportar = false;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("NT$2",67, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // struct_funcion ::= tipo_dato IDENTIFICADOR PA_A struct_parametros PA_C NT$1 st_ind code_funcion st_ded 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-8)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)).value;
		reportar = true;
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_funcion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$1 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;

	 			Simbolo s = new Simbolo(a,t,manejadorTablaSimbolos.ambitoFlag,(ArrayList<Simbolo>) p,false,true,false);
				 s.generarParamsStrings();
				if(reportar){
					s.generarParamsStrings();
					if(manejadorTablaSimbolos.isExistSimboloFM(s)){
						manejadorTablaSimbolos.agregarSimbolo(s);
					}else{
						parser.agregarError("Semantico",a,"Error: Ya existe un metodo o funcion con el mismo nombre \""+a+"\" dentro del ambito", aright+1, aleft+1);
					}
				}
				reportar = false;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("NT$1",66, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // struct_asig_arreglo ::= IDENTIFICADOR dim_arreglo IGUAL tipo_valor_op_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_asig_arreglo",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // tipo_valor_op_logico ::= struct_operador_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("tipo_valor_op_logico",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // valores_array ::= tipo_valor_op_logico 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		
				ArrayList<Object> lista = new ArrayList<>();
				if(reportar && v!=null){
					Simbolo s1 = (Simbolo) v;
					// lista.add(s1.getObjeto());
					lista.add(s1);
				}
				RESULT = lista;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valores_array",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // valores_array ::= valores_array COMA tipo_valor_op_logico 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		
				ArrayList<Object> listaR = (ArrayList<Object>) r;
				if(reportar && v!=null){
					Simbolo s1 = (Simbolo) v;
					// listaR.add(s1.getObjeto());
					listaR.add(s1);
				}
				RESULT = listaR;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valores_array",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // valores_array_mas_dim ::= valores_array_mas_dim COMA LLAVE_A valores_array LLAVE_C 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-4)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;
		
				ArrayList<Object> lista = (ArrayList<Object>) v1;
				//ArrayList<Object> listaR = (ArrayList<Object>) v2;
				if(reportar && v1!=null && v2!=null){
					ArrayList<Object> listaR = (ArrayList<Object>) v2;
					lista.add(listaR);
				}
				RESULT = lista;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valores_array_mas_dim",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // valores_array_mas_dim ::= LLAVE_A valores_array LLAVE_C 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;
		
				if(reportar && v!=null){
					ArrayList<Object> lista = (ArrayList<Object>) v;
					RESULT = lista;
				}
				
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valores_array_mas_dim",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // valores_array_mas_dim ::= valores_array_mas_dim COMA LLAVE_A valores_array_mas_dim LLAVE_C 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-4)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;
		
				ArrayList<Object> lista = (ArrayList<Object>) v1;
				//ArrayList<Object> listaR = (ArrayList<Object>) v2;
				if(reportar && v1!=null && v2!=null){
					ArrayList<Object> listaR = (ArrayList<Object>) v2;
					lista.add(listaR);
				}
				RESULT = lista;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valores_array_mas_dim",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // valores_array_mas_dim ::= LLAVE_A valores_array_mas_dim LLAVE_C 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;
		
				ArrayList<Object> lista = new ArrayList<>();
				if(reportar && v!=null){
					ArrayList<Object> listaR = (ArrayList<Object>) v;
					lista.add(listaR);
				}
				RESULT = lista;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valores_array_mas_dim",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // valor_arreglo ::= valores_array 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		RESULT = r;
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valor_arreglo",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // valor_arreglo ::= valores_array_mas_dim 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		RESULT = r;
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valor_arreglo",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // dim_arreglo ::= CORCHETE_A valor_operacion CORCHETE_C 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		Simbolo v = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;
		
				ArrayList<Integer> lista = new ArrayList<>();
				if(reportar && v!=null){
					Simbolo s = (Simbolo) v;
					if(s.getTipo().equals("ENTERO") || s.getTipo().equals("DOBLE")){
						lista.add((int)comprobacionTipos.convertirAEntero(s.getObjeto(), "DOBLE"));
					}else{
						parser.agregarError("Semantico","[<numeric>]","Error: el valor de la dimesion no es numerico", vright+1, vleft+1);
					}
				}
				RESULT = lista;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("dim_arreglo",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // dim_arreglo ::= dim_arreglo CORCHETE_A valor_operacion CORCHETE_C 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		Simbolo v = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;
		
				ArrayList<Integer> lista = (ArrayList<Integer>) r;
				if(reportar && v!=null){
					Simbolo s = (Simbolo) v;
					if(s.getTipo().equals("ENTERO") || s.getTipo().equals("DOBLE")){
						lista.add((int)comprobacionTipos.convertirAEntero(s.getObjeto(), "DOBLE"));
					}else{
						parser.agregarError("Semantico","[<numeric>]","Error: el valor de la dimesion no es numerico", vright+1, vleft+1);
					}
				}
				RESULT = lista;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("dim_arreglo",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // struct_declaracion_array_f ::= VAR tipo_dato ARREGLO IDENTIFICADOR dim_arreglo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array_f",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // struct_declaracion_array_f ::= VAR tipo_dato ARREGLO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array_f",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // struct_declaracion_array_f ::= VAR tipo_dato ARREGLO IDENTIFICADOR dim_arreglo IGUAL LLAVE_A valor_arreglo LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array_f",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // struct_declaracion_array_f ::= struct_declaracion_array_f COMA IDENTIFICADOR dim_arreglo IGUAL LLAVE_A valor_arreglo LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array_f",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // struct_declaracion_array_f ::= struct_declaracion_array_f COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array_f",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // struct_declaracion_array_f ::= struct_declaracion_array_f COMA IDENTIFICADOR dim_arreglo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array_f",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // struct_declaracion_array ::= keep_state VAR tipo_dato ARREGLO IDENTIFICADOR dim_arreglo 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)).right;
		Boolean k = (Boolean)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		
				if(reportar && d!=null){
					ArrayList<Integer> dimens = (ArrayList<Integer>) d;
					Simbolo s = new Simbolo(a,t,manejadorTablaSimbolos.ambitoFlag,new Arreglo(t,dimens),(boolean)k,true);
					if(manejadorTablaSimbolos.isExistSimbolo(s)){
						manejadorTablaSimbolos.agregarSimbolo(s);
					}else{
						parser.agregarError("Semantico",a,"Error: Ya existe un simbolo con el mismo nombre \""+a+"\" dentro del ambito", aright+1, aleft+1);
					}
					RESULT = s;
				}
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // struct_declaracion_array ::= keep_state VAR tipo_dato ARREGLO IDENTIFICADOR 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-4)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-4)).right;
		Boolean k = (Boolean)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		
				if(reportar){
					//ArrayList<Integer> dimens = (ArrayList<Integer>) d;
					Simbolo s = new Simbolo(a,t,manejadorTablaSimbolos.ambitoFlag,new Arreglo(t),(boolean)k,true);
					if(manejadorTablaSimbolos.isExistSimbolo(s)){
						manejadorTablaSimbolos.agregarSimbolo(s);
					}else{
						parser.agregarError("Semantico",a,"Error: Ya existe un simbolo con el mismo nombre \""+a+"\" dentro del ambito", aright+1, aleft+1);
					}
					RESULT = s;
				}
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // struct_declaracion_array ::= keep_state VAR tipo_dato ARREGLO IDENTIFICADOR dim_arreglo IGUAL LLAVE_A valor_arreglo LLAVE_C 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-9)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-9)).right;
		Boolean k = (Boolean)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-9)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-7)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-4)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		Object vs = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;
		
				if(reportar && d!=null && vs!=null){
					ArrayList<Integer> dimens = (ArrayList<Integer>) d;
					ArrayList<Object> lista = (ArrayList<Object>) vs;
					Simbolo s = new Simbolo(a,t,manejadorTablaSimbolos.ambitoFlag,new Arreglo(t,dimens),(boolean)k,true);
					if(manejadorTablaSimbolos.isExistSimbolo(s)){
						if(manejadorArreglos.verificarDimArreglo(lista)){
							if(manejadorArreglos.compararDims(dimens)){
								Arreglo arrAux = (Arreglo) s.getObjeto();
								arrAux.llenarArreglo(manejadorArreglos.listaObj);
								s.setObjeto(arrAux);
								manejadorTablaSimbolos.agregarSimbolo(s);
							}else{
								parser.agregarError("Semantico",a,"Error: no coinciden las dimensiones del arreglo \""+a+"\" con las dimensiones de los datos que se agregaron", dright+1, dleft+1);
							}
						}else{
							parser.agregarError("Semantico",a,"Error: no coinciden las dimensiones de los valores del arreglo \""+a+"\" con los datos de se le ingresaron", vsright+1, vsleft+1);
						}
					}else{
						parser.agregarError("Semantico",a,"Error: Ya existe un simbolo con el mismo nombre \""+a+"\" dentro del ambito", aright+1, aleft+1);
					}
					RESULT = s;
				}
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // struct_declaracion_array ::= struct_declaracion_array COMA IDENTIFICADOR dim_arreglo IGUAL LLAVE_A valor_arreglo LLAVE_C 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-7)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-7)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-4)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		Object vs = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;
		
				if(reportar && r!=null && d!=null && vs!=null){
					ArrayList<Integer> dimens = (ArrayList<Integer>) d;
					ArrayList<Object> lista = (ArrayList<Object>) vs;
					Simbolo sr = (Simbolo) r;
					Simbolo s = new Simbolo(a,sr.getTipo(),manejadorTablaSimbolos.ambitoFlag,new Arreglo(sr.getTipo(),dimens),sr.isIsKeep(),true);
					if(manejadorTablaSimbolos.isExistSimbolo(s)){
						if(manejadorArreglos.verificarDimArreglo(lista)){
							if(manejadorArreglos.compararDims(dimens)){
								Arreglo arrAux = (Arreglo) s.getObjeto();
								arrAux.llenarArreglo(manejadorArreglos.listaObj);
								s.setObjeto(arrAux);
								manejadorTablaSimbolos.agregarSimbolo(s);
							}else{
								parser.agregarError("Semantico",a,"Error: no coinciden las dimensiones del arreglo \""+a+"\" con las dimensiones de los datos que se agregaron", dright+1, dleft+1);
							}
						}else{
							parser.agregarError("Semantico",a,"Error: no coinciden las dimensiones de los valores del arreglo \""+a+"\" con los datos de se le ingresaron", vsright+1, vsleft+1);
						}
					}else{
						parser.agregarError("Semantico",a,"Error: Ya existe un simbolo con el mismo nombre \""+a+"\" dentro del ambito", aright+1, aleft+1);
					}
					RESULT = s;
				}
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // struct_declaracion_array ::= struct_declaracion_array COMA IDENTIFICADOR 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		
				if(reportar && r!=null){
					Simbolo sr = (Simbolo) r;
					Simbolo s = new Simbolo(a,sr.getTipo(),manejadorTablaSimbolos.ambitoFlag,new Arreglo(sr.getTipo()),sr.isIsKeep(),true);
					if(manejadorTablaSimbolos.isExistSimbolo(s)){
						manejadorTablaSimbolos.agregarSimbolo(s);
					}else{
						parser.agregarError("Semantico",a,"Error: Ya existe un simbolo con el mismo nombre \""+a+"\" dentro del ambito", aright+1, aleft+1);
					}
					RESULT = s;
				}
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // struct_declaracion_array ::= struct_declaracion_array COMA IDENTIFICADOR dim_arreglo 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		
				if(reportar && r!=null && d!=null){
					ArrayList<Integer> dimens = (ArrayList<Integer>) d;
					Simbolo sr = (Simbolo) r;
					Simbolo s = new Simbolo(a,sr.getTipo(),manejadorTablaSimbolos.ambitoFlag,new Arreglo(sr.getTipo(),dimens),sr.isIsKeep(),true);
					if(manejadorTablaSimbolos.isExistSimbolo(s)){
						manejadorTablaSimbolos.agregarSimbolo(s);
					}else{
						parser.agregarError("Semantico",a,"Error: Ya existe un simbolo con el mismo nombre \""+a+"\" dentro del ambito", aright+1, aleft+1);
					}
					RESULT = s;
				}
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // struc_asig_var ::= IDENTIFICADOR MENOS_MENOS 
            {
              Simbolo RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struc_asig_var",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // struc_asig_var ::= IDENTIFICADOR MAS_MAS 
            {
              Simbolo RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struc_asig_var",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // struc_asig_var ::= IDENTIFICADOR MAS_IGUAL struct_operador_logico 
            {
              Simbolo RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struc_asig_var",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // struc_asig_var ::= IDENTIFICADOR IGUAL struct_operador_logico 
            {
              Simbolo RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struc_asig_var",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // valor_operacion ::= valor 
            {
              Simbolo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		Simbolo r = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		 RESULT = r;
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // valor_operacion ::= PA_A valor_operacion PA_C 
            {
              Simbolo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		Simbolo r = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;
		 RESULT = r;
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // valor_operacion ::= valor_operacion POTENCIA valor_operacion 
            {
              Simbolo RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).right;
		Simbolo r1 = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		Simbolo r2 = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		
				Simbolo s1 = r1;
				Simbolo s2 = r2;
				Simbolo sr = null;
				if(reportar && (s1!=null && s2!=null)){
					if((s1.getTipo().equals("CADENA") || s2.getTipo().equals("CADENA"))){
						parser.agregarError("Semantico",(String) o,"Error en la operacion entre \"^\", no es posible realizar esta operacion entre cadenas", oright+1, oleft+1);
					}else{
						if(s1.getTipo().equals("CARACTER") && s2.getTipo().equals("ENTERO")){
							sr = new Simbolo("DOBLE","DOBLE",manejadorTablaSimbolos.ambitoFlag,(double) ((Math.pow((int)s1.getObjeto().toString().charAt(0),(int)s2.getObjeto()))));
						}else if(s1.getTipo().equals("ENTERO") && s2.getTipo().equals("CARACTER")){
							sr = new Simbolo("DOBLE","DOBLE",manejadorTablaSimbolos.ambitoFlag,(double) (Math.pow((int)s1.getObjeto(),((int)s2.getObjeto().toString().charAt(0)))));
						}else if(s1.getTipo().equals("ENTERO") && s2.getTipo().equals("ENTERO")){
							sr = new Simbolo("DOBLE","DOBLE",manejadorTablaSimbolos.ambitoFlag,(double) (Math.pow((int)s1.getObjeto(),(int)s2.getObjeto())));
						}else if((s1.getTipo().equals("ENTERO") && s2.getTipo().equals("DOBLE")) || (s1.getTipo().equals("DOBLE") && s2.getTipo().equals("ENTERO"))){
							sr = new Simbolo("DOBLE","DOBLE",manejadorTablaSimbolos.ambitoFlag,(double) (Math.pow((double)comprobacionTipos.convertirADoble(s1.getObjeto(),"DOBLE"),(double)comprobacionTipos.convertirADoble(s2.getObjeto(),"DOBLE"))));
						}else{
							parser.agregarError("Semantico",(String) o,"Error en la operacion entre \"^\"", oright+1, oleft+1);
						}
					}
				}
				RESULT = sr;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // valor_operacion ::= valor_operacion MODULO valor_operacion 
            {
              Simbolo RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).right;
		Simbolo r1 = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		Simbolo r2 = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		
				Simbolo s1 = r1;
				Simbolo s2 = r2;
				Simbolo sr = null;
				if(reportar && (s1!=null && s2!=null)){
					if((s1.getTipo().equals("CADENA") || s2.getTipo().equals("CADENA"))){
						parser.agregarError("Semantico",(String) o,"Error en la operacion entre \"%\", no es posible realizar esta operacion entre cadenas", oright+1, oleft+1);
					}else{
						if(s1.getTipo().equals("CARACTER") && s2.getTipo().equals("ENTERO")){
							sr = new Simbolo("DOBLE","DOBLE",manejadorTablaSimbolos.ambitoFlag,(double) (((int)s1.getObjeto().toString().charAt(0))%(int)s2.getObjeto()));
						}else if(s1.getTipo().equals("ENTERO") && s2.getTipo().equals("CARACTER")){
							sr = new Simbolo("DOBLE","DOBLE",manejadorTablaSimbolos.ambitoFlag,(double) (((int)s1.getObjeto())%((int)s2.getObjeto().toString().charAt(0))));
						}else if(s1.getTipo().equals("ENTERO") && s2.getTipo().equals("ENTERO")){
							sr = new Simbolo("DOBLE","DOBLE",manejadorTablaSimbolos.ambitoFlag, (((int)s1.getObjeto())%(int)s2.getObjeto()));
						}else if((s1.getTipo().equals("ENTERO") && s2.getTipo().equals("DOBLE")) || (s1.getTipo().equals("DOBLE") && s2.getTipo().equals("ENTERO"))){
							sr = new Simbolo("DOBLE","DOBLE",manejadorTablaSimbolos.ambitoFlag,((double)comprobacionTipos.convertirADoble(s1.getObjeto(),"DOBLE")%(double)comprobacionTipos.convertirADoble(s2.getObjeto(),"DOBLE")));
						}else{
							parser.agregarError("Semantico",(String) o,"Error en la operacion entre \"%\"", oright+1, oleft+1);
						}
					}
				}
				RESULT = sr;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // valor_operacion ::= valor_operacion DIVISION valor_operacion 
            {
              Simbolo RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).right;
		Simbolo r1 = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		Simbolo r2 = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		
				Simbolo s1 = r1;
				Simbolo s2 = r2;
				Simbolo sr = null;
				if(reportar && (s1!=null && s2!=null)){
					if((s1.getTipo().equals("CADENA") || s2.getTipo().equals("CADENA"))){
						parser.agregarError("Semantico",(String) o,"Error en la operacion entre \"/\", no es posible realizar esta operacion entre cadenas", oright+1, oleft+1);
					}else{
						if(s1.getTipo().equals("CARACTER") && s2.getTipo().equals("ENTERO")){
							sr = new Simbolo("DOBLE","DOBLE",manejadorTablaSimbolos.ambitoFlag,(double)(((int)s1.getObjeto().toString().charAt(0))/(int)s2.getObjeto()));
						}else if(s1.getTipo().equals("ENTERO") && s2.getTipo().equals("CARACTER")){
							sr = new Simbolo("DOBLE","DOBLE",manejadorTablaSimbolos.ambitoFlag,(double) (((int)s1.getObjeto())/((int)s2.getObjeto().toString().charAt(0))));
						}else if(s1.getTipo().equals("ENTERO") && s2.getTipo().equals("ENTERO")){
							sr = new Simbolo("DOBLE","DOBLE",manejadorTablaSimbolos.ambitoFlag,(double) (((int)s1.getObjeto())/(int)s2.getObjeto()));
						}else if((s1.getTipo().equals("ENTERO") && s2.getTipo().equals("DOBLE")) || (s1.getTipo().equals("DOBLE") && s2.getTipo().equals("ENTERO"))){
							sr = new Simbolo("DOBLE","DOBLE",manejadorTablaSimbolos.ambitoFlag, ((double)comprobacionTipos.convertirADoble(s1.getObjeto(),"DOBLE")/(double)comprobacionTipos.convertirADoble(s2.getObjeto(),"DOBLE")));
						}else{
							parser.agregarError("Semantico",(String) o,"Error en la operacion entre \"/\"", oright+1, oleft+1);
						}
					}
				}
				RESULT = sr;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // valor_operacion ::= valor_operacion POR valor_operacion 
            {
              Simbolo RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).right;
		Simbolo r1 = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		Simbolo r2 = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		
				Simbolo s1 = r1;
				Simbolo s2 = r2;
				Simbolo sr = null;
				if(reportar && (s1!=null && s2!=null)){
					if((s1.getTipo().equals("CADENA") || s2.getTipo().equals("CADENA"))){
						parser.agregarError("Semantico",(String) o,"Error en la operacion entre \"*\", no es posible realizar esta operacion entre cadenas", oright+1, oleft+1);
					}else{
						if(s1.getTipo().equals("CARACTER") && s2.getTipo().equals("ENTERO")){
							sr = new Simbolo("DOBLE","DOBLE",manejadorTablaSimbolos.ambitoFlag,(double)(((int)s1.getObjeto().toString().charAt(0))*(int)s2.getObjeto()));
						}else if(s1.getTipo().equals("ENTERO") && s2.getTipo().equals("CARACTER")){
							sr = new Simbolo("DOBLE","DOBLE",manejadorTablaSimbolos.ambitoFlag, ((double)((int)s1.getObjeto())*((int)s2.getObjeto().toString().charAt(0))));
						}else if(s1.getTipo().equals("ENTERO") && s2.getTipo().equals("ENTERO")){
							sr = new Simbolo("DOBLE","DOBLE",manejadorTablaSimbolos.ambitoFlag, ((double)((int)s1.getObjeto())*(int)s2.getObjeto()));
						}else if((s1.getTipo().equals("ENTERO") && s2.getTipo().equals("DOBLE")) || (s1.getTipo().equals("DOBLE") && s2.getTipo().equals("ENTERO"))){
							sr = new Simbolo("DOBLE","DOBLE",manejadorTablaSimbolos.ambitoFlag, ((double)comprobacionTipos.convertirADoble(s1.getObjeto(),"DOBLE")*(double)comprobacionTipos.convertirADoble(s2.getObjeto(),"DOBLE")));
						}else{
							parser.agregarError("Semantico",(String) o,"Error en la operacion entre \"*\"", oright+1, oleft+1);
						}
					}
				}
				RESULT = sr;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // valor_operacion ::= valor_operacion MENOS valor_operacion 
            {
              Simbolo RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).right;
		Simbolo r1 = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		Simbolo r2 = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		
				Simbolo s1 = r1;
				Simbolo s2 = r2;
				Simbolo sr = null;
				if(reportar && (s1!=null && s2!=null)){
					if((!s1.getTipo().equals("CADENA") && !s2.getTipo().equals("CADENA"))){
						parser.agregarError("Semantico",(String) o,"Error en la operacion entre \"-\", no es posible realizar esta operacion entre cadenas", oright+1, oleft+1);
					}else{
						if(s1.getTipo().equals("CARACTER") && s2.getTipo().equals("ENTERO")){
							sr = new Simbolo("ENTERO","ENTERO",manejadorTablaSimbolos.ambitoFlag,(((int)s1.getObjeto().toString().charAt(0))-(int)s2.getObjeto()));
						}else if(s1.getTipo().equals("ENTERO") && s2.getTipo().equals("CARACTER")){
							sr = new Simbolo("ENTERO","ENTERO",manejadorTablaSimbolos.ambitoFlag, ((int)s1.getObjeto())-((int)s2.getObjeto().toString().charAt(0)));
						}else if(s1.getTipo().equals("ENTERO") && s2.getTipo().equals("ENTERO")){
							sr = new Simbolo("ENTERO","ENTERO",manejadorTablaSimbolos.ambitoFlag, ((int)s1.getObjeto())-(int)s2.getObjeto());
						}else if((s1.getTipo().equals("ENTERO") && s2.getTipo().equals("DOBLE")) || (s1.getTipo().equals("DOBLE") && s2.getTipo().equals("ENTERO"))){
							sr = new Simbolo("DOBLE","DOBLE",manejadorTablaSimbolos.ambitoFlag, ((double)comprobacionTipos.convertirADoble(s1.getObjeto(),"DOBLE")-(double)comprobacionTipos.convertirADoble(s2.getObjeto(),"DOBLE")));
						}else{
							parser.agregarError("Semantico",(String) o,"Error en la operacion entre \"-\"", oright+1, oleft+1);
						}
					}
				}
				RESULT = sr;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // valor_operacion ::= valor_operacion MAS valor_operacion 
            {
              Simbolo RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).right;
		Simbolo r1 = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		Simbolo r2 = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		
				Simbolo s1 = r1;
				Simbolo s2 = r2;
				Simbolo sr = null;
				if(reportar && (s1!=null && s2!=null)){
					if((s1.getTipo().equals("CADENA") || s2.getTipo().equals("CADENA"))){
						sr = new Simbolo("CADENA","CADENA",manejadorTablaSimbolos.ambitoFlag,(String) s1.getObjeto()+""+(String)s2.getObjeto() );
					}else{
						if(s1.getTipo().equals("CARACTER") && s2.getTipo().equals("ENTERO")){
							sr = new Simbolo("ENTERO","ENTERO",manejadorTablaSimbolos.ambitoFlag,(((int)s1.getObjeto().toString().charAt(0))+(int)s2.getObjeto()));
						}else if(s1.getTipo().equals("ENTERO") && s2.getTipo().equals("CARACTER")){
							sr = new Simbolo("ENTERO","ENTERO",manejadorTablaSimbolos.ambitoFlag, ((int)s1.getObjeto())+((int)s2.getObjeto().toString().charAt(0)));
						}else if(s1.getTipo().equals("ENTERO") && s2.getTipo().equals("ENTERO")){
							sr = new Simbolo("ENTERO","ENTERO",manejadorTablaSimbolos.ambitoFlag, ((int)s1.getObjeto())+(int)s2.getObjeto());
						}else if((s1.getTipo().equals("ENTERO") && s2.getTipo().equals("DOBLE")) || (s1.getTipo().equals("DOBLE") && s2.getTipo().equals("ENTERO"))){
							sr = new Simbolo("DOBLE","DOBLE",manejadorTablaSimbolos.ambitoFlag, ((double)comprobacionTipos.convertirADoble(s1.getObjeto(),"DOBLE")+(double)comprobacionTipos.convertirADoble(s2.getObjeto(),"DOBLE")));
						}else{
							parser.agregarError("Semantico",(String) o,"Error en la operacion entre \"+\"", oright+1, oleft+1);
						}
					}
				}
				RESULT = sr;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // state_op_racional ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("state_op_racional",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // state_op_racional ::= MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("state_op_racional",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // state_op_racional ::= MENOR_Q 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("state_op_racional",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // state_op_racional ::= MAYOR_Q 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("state_op_racional",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // state_op_racional ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("state_op_racional",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // state_op_racional ::= IGUAL_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("state_op_racional",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // struct_operador_relacional ::= PA_A struct_operador_relacional PA_C 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;
		 RESULT=r1; 
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // struct_operador_relacional ::= IS_NULL struct_operador_relacional 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		
				Simbolo s1 = (Simbolo) v1;
				Simbolo sr = null;
				if(reportar && s1!=null){
						sr = new Simbolo("BOOLEAN","BOOLEAN",manejadorTablaSimbolos.ambitoFlag,(Object) (s1.getObjeto()==null));
						RESULT = sr;
				}
				//RESULT = sr;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // struct_operador_relacional ::= IS_NULL valor_operacion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		Simbolo v1 = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		
				Simbolo s1 = (Simbolo) v1;
				Simbolo sr = null;
				if(reportar && s1!=null){
						sr = new Simbolo("BOOLEAN","BOOLEAN",manejadorTablaSimbolos.ambitoFlag,(Object) (s1.getObjeto()==null));
						RESULT = sr;
				}
				//RESULT = sr;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // struct_operador_relacional ::= valor_operacion MENOR_IGUAL valor_operacion 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).right;
		Simbolo v1 = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		Simbolo v2 = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		
				Simbolo s1 = (Simbolo) v1;
				Simbolo s2 = (Simbolo) v2;
				Simbolo sr = null;
				if(reportar && s1!=null && s2!=null){
					if(!s1.getTipo().equals("CADENA") && !s2.getTipo().equals("CADENA")){
						sr = new Simbolo("BOOLEAN","BOOLEAN",manejadorTablaSimbolos.ambitoFlag,(Object) comprobacionTipos.opRacionalMenorQIgual(s1,s2));
					}else{
						parser.agregarError("Semantico",(String) o,"Error en la operacion racional entre \"<=\", es posible realizarlo entre cadenas", oright+1, oleft+1);
					}
				}
				RESULT = sr;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // struct_operador_relacional ::= valor_operacion MAYOR_IGUAL valor_operacion 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).right;
		Simbolo v1 = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		Simbolo v2 = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		
				Simbolo s1 = (Simbolo) v1;
				Simbolo s2 = (Simbolo) v2;
				Simbolo sr = null;
				if(reportar && s1!=null && s2!=null){
					if(!s1.getTipo().equals("CADENA") && !s2.getTipo().equals("CADENA")){
						sr = new Simbolo("BOOLEAN","BOOLEAN",manejadorTablaSimbolos.ambitoFlag,(Object) comprobacionTipos.opRacionalMayorQIgual(s1,s2));
					}else{
						parser.agregarError("Semantico",(String) o,"Error en la operacion racional entre \">=\", es posible realizarlo entre cadenas", oright+1, oleft+1);
					}
				}
				RESULT = sr;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // struct_operador_relacional ::= valor_operacion MENOR_Q valor_operacion 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).right;
		Simbolo v1 = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		Simbolo v2 = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		
				Simbolo s1 = (Simbolo) v1;
				Simbolo s2 = (Simbolo) v2;
				Simbolo sr = null;
				if(reportar && s1!=null && s2!=null){
					if(!s1.getTipo().equals("CADENA") && !s2.getTipo().equals("CADENA")){
						sr = new Simbolo("BOOLEAN","BOOLEAN",manejadorTablaSimbolos.ambitoFlag,(Object) comprobacionTipos.opRacionalMenorQ(s1,s2));
					}else{
						parser.agregarError("Semantico",(String) o,"Error en la operacion racional entre \"<\", es posible realizarlo entre cadenas", oright+1, oleft+1);
					}
				}
				RESULT = sr;
				
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // struct_operador_relacional ::= valor_operacion MAYOR_Q valor_operacion 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).right;
		Simbolo v1 = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		Simbolo v2 = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		
				Simbolo s1 = (Simbolo) v1;
				Simbolo s2 = (Simbolo) v2;
				Simbolo sr = null;
				if(reportar && s1!=null && s2!=null){
					if(!s1.getTipo().equals("CADENA") && !s2.getTipo().equals("CADENA")){
						sr = new Simbolo("BOOLEAN","BOOLEAN",manejadorTablaSimbolos.ambitoFlag,(Object) comprobacionTipos.opRacionalMayorQ(s1,s2));
					}else{
						parser.agregarError("Semantico",(String) o,"Error en la operacion racional entre \">\", es posible realizarlo entre cadenas", oright+1, oleft+1);
					}
				}
				RESULT = sr;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // struct_operador_relacional ::= valor_operacion DIFERENTE valor_operacion 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).right;
		Simbolo v1 = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		Simbolo v2 = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		
				Simbolo s1 = (Simbolo) v1;
				Simbolo s2 = (Simbolo) v2;
				Simbolo sr = null;
				if(reportar && s1!=null && s2!=null){
					if(s1.getTipo().equals(s2.getTipo())){
						sr = new Simbolo("BOOLEAN","BOOLEAN",manejadorTablaSimbolos.ambitoFlag,(Object) comprobacionTipos.opRacionalDiferente(s1,s2));
					}else if (s1.getTipo().equals("CARACTER") && s1.getTipo().equals("ENTERO")){
						sr = new Simbolo("BOOLEAN","BOOLEAN",manejadorTablaSimbolos.ambitoFlag,(Object) comprobacionTipos.opRacionalDiferente(s1,s2));
					}else if(s1.getTipo().equals("ENTERO") && s1.getTipo().equals("CARACTER")){
						sr = new Simbolo("BOOLEAN","BOOLEAN",manejadorTablaSimbolos.ambitoFlag,(Object) comprobacionTipos.opRacionalDiferente(s1,s2));
					}else if (s1.getTipo().equals("DOBLE") && s1.getTipo().equals("ENTERO")){
						sr = new Simbolo("BOOLEAN","BOOLEAN",manejadorTablaSimbolos.ambitoFlag,(Object) comprobacionTipos.opRacionalDiferente(s1,s2));
					}else if(s1.getTipo().equals("ENTERO") && s1.getTipo().equals("DOBLE")){
						sr = new Simbolo("BOOLEAN","BOOLEAN",manejadorTablaSimbolos.ambitoFlag,(Object) comprobacionTipos.opRacionalDiferente(s1,s2));
					}else{
						parser.agregarError("Semantico",(String) o,"Error en la operacion racional entre \"!=\", estos tipos de datos no puedens ser comparados", oright+1, oleft+1);
					}
				}
				RESULT = sr;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // struct_operador_relacional ::= valor_operacion IGUAL_IGUAL valor_operacion 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).right;
		Simbolo v1 = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		Simbolo v2 = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		
				Simbolo s1 = (Simbolo) v1;
				Simbolo s2 = (Simbolo) v2;
				Simbolo sr = null;
				if(reportar && s1!=null && s2!=null){
					if(s1.getTipo().equals(s2.getTipo())){
						sr = new Simbolo("BOOLEAN","BOOLEAN",manejadorTablaSimbolos.ambitoFlag,(Object) comprobacionTipos.opRacionalIgualIgual(s1,s2));
					}else if (s1.getTipo().equals("CARACTER") && s1.getTipo().equals("ENTERO")){
						sr = new Simbolo("BOOLEAN","BOOLEAN",manejadorTablaSimbolos.ambitoFlag,(Object) comprobacionTipos.opRacionalIgualIgual(s1,s2));
					}else if(s1.getTipo().equals("ENTERO") && s1.getTipo().equals("CARACTER")){
						sr = new Simbolo("BOOLEAN","BOOLEAN",manejadorTablaSimbolos.ambitoFlag,(Object) comprobacionTipos.opRacionalIgualIgual(s1,s2));
					}else if (s1.getTipo().equals("DOBLE") && s1.getTipo().equals("ENTERO")){
						sr = new Simbolo("BOOLEAN","BOOLEAN",manejadorTablaSimbolos.ambitoFlag,(Object) comprobacionTipos.opRacionalIgualIgual(s1,s2));
					}else if(s1.getTipo().equals("ENTERO") && s1.getTipo().equals("DOBLE")){
						sr = new Simbolo("BOOLEAN","BOOLEAN",manejadorTablaSimbolos.ambitoFlag,(Object) comprobacionTipos.opRacionalIgualIgual(s1,s2));
					}else{
						parser.agregarError("Semantico",(String) o,"Error en la operacion racional entre \"==\", estos tipos de datos no puedens ser comparados", oright+1, oleft+1);
					}
				}
				RESULT = sr;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // state_op_logicos ::= NAND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("state_op_logicos",61, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // state_op_logicos ::= AND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("state_op_logicos",61, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // state_op_logicos ::= XOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("state_op_logicos",61, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // state_op_logicos ::= NOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("state_op_logicos",61, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // state_op_logicos ::= OR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("state_op_logicos",61, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // struct_operador_logico ::= valor_operacion 
            {
              Simbolo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		Simbolo r = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		 RESULT = (Simbolo) r; 
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // struct_operador_logico ::= struct_operador_relacional 
            {
              Simbolo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		RESULT = (Simbolo) r;
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // struct_operador_logico ::= NOT PA_A struct_operador_logico PA_C 
            {
              Simbolo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		Simbolo r1 = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;
		
				Simbolo s1 = r1;
				Simbolo sr = null;
				if(reportar && (s1!=null)){
					if((s1.getTipo().equals("BOOLEAN"))){
						
						sr = new Simbolo("BOOLEAN","BOOLEAN",manejadorTablaSimbolos.ambitoFlag,(Object) comprobacionTipos.opLogicoNOT(s1));
					}else{
						parser.agregarError("Semantico",(String) o,"Error en la operacion logica \"!\", las operacion no es racional, o no es booleana", oright+3, oleft+3);
					}
				} 
				RESULT = sr;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // struct_operador_logico ::= struct_operador_logico NAND struct_operador_logico 
            {
              Simbolo RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).right;
		Simbolo r1 = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		Simbolo r2 = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		
				Simbolo s1 = r1;
				Simbolo s2 = r2;
				Simbolo sr = null;
				if(reportar && (s1!=null && s2!=null)){
					if((s1.getTipo().equals("BOOLEAN") || s2.getTipo().equals("BOOLEAN"))){
						sr = new Simbolo("BOOLEAN","BOOLEAN",manejadorTablaSimbolos.ambitoFlag,(Object) comprobacionTipos.opLogicoNAND(s1,s2));
					}else{
						parser.agregarError("Semantico",(String) o,"Error en la operacion logica entre \"!&&\", las operaciones no son racionales, o no son booleanos", oright+1, oleft+1);
					}
				} 
				RESULT = sr;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // struct_operador_logico ::= struct_operador_logico AND struct_operador_logico 
            {
              Simbolo RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).right;
		Simbolo r1 = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		Simbolo r2 = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		
				Simbolo s1 = r1;
				Simbolo s2 = r2;
				Simbolo sr = null;
				if(reportar && (s1!=null && s2!=null)){
					if((s1.getTipo().equals("BOOLEAN") || s2.getTipo().equals("BOOLEAN"))){
						sr = new Simbolo("BOOLEAN","BOOLEAN",manejadorTablaSimbolos.ambitoFlag,(Object) comprobacionTipos.opLogicoAND(s1,s2));
					}else{
						parser.agregarError("Semantico",(String) o,"Error en la operacion logica entre \"&&\", las operaciones no son racionales, o no son booleanos", oright+1, oleft+1);
					}
				} 
				RESULT = sr;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // struct_operador_logico ::= struct_operador_logico XOR struct_operador_logico 
            {
              Simbolo RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).right;
		Simbolo r1 = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		Simbolo r2 = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		
				Simbolo s1 = r1;
				Simbolo s2 = r2;
				Simbolo sr = null;
				if(reportar && (s1!=null && s2!=null)){
					if((s1.getTipo().equals("BOOLEAN") || s2.getTipo().equals("BOOLEAN"))){
						sr = new Simbolo("BOOLEAN","BOOLEAN",manejadorTablaSimbolos.ambitoFlag,(Object) comprobacionTipos.opLogicoXOR(s1,s2));
					}else{
						parser.agregarError("Semantico",(String) o,"Error en la operacion logica entre \"&|\", las operaciones no son racionales, o no son booleanos", oright+1, oleft+1);
					}
				} 
				RESULT = sr;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // struct_operador_logico ::= struct_operador_logico NOR struct_operador_logico 
            {
              Simbolo RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).right;
		Simbolo r1 = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		Simbolo r2 = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		
				Simbolo s1 = r1;
				Simbolo s2 = r2;
				Simbolo sr = null;
				if(reportar && (s1!=null && s2!=null)){
					if((s1.getTipo().equals("BOOLEAN") || s2.getTipo().equals("BOOLEAN"))){
						sr = new Simbolo("BOOLEAN","BOOLEAN",manejadorTablaSimbolos.ambitoFlag,(Object) comprobacionTipos.opLogicoNOR(s1,s2));
					}else{
						parser.agregarError("Semantico",(String) o,"Error en la operacion logica entre \"!||\", las operaciones no son racionales, o no son booleanos", oright+1, oleft+1);
					}
				} 
				RESULT = sr;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // struct_operador_logico ::= struct_operador_logico OR struct_operador_logico 
            {
              Simbolo RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).right;
		Simbolo r1 = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		Simbolo r2 = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		
				Simbolo s1 = r1;
				Simbolo s2 = r2;
				Simbolo sr = null;
				if(reportar && (s1!=null && s2!=null)){
					if((s1.getTipo().equals("BOOLEAN") || s2.getTipo().equals("BOOLEAN"))){
						sr = new Simbolo("BOOLEAN","BOOLEAN",manejadorTablaSimbolos.ambitoFlag,(Object) comprobacionTipos.opLogicoOR(s1,s2));
					}else{
						parser.agregarError("Semantico",(String) o,"Error en la operacion logica entre \"||\", las operaciones no son racionales, o no son booleanos", oright+1, oleft+1);
					}
				} 
				RESULT = sr;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipo_dato ::= BOOLEAN 
            {
              String RESULT =null;
		RESULT = "BOOLEAN";
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("tipo_dato",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipo_dato ::= CADENA_RSV 
            {
              String RESULT =null;
		RESULT = "CADENA";
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("tipo_dato",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipo_dato ::= CARACTER_RSV 
            {
              String RESULT =null;
		RESULT = "CARACTER";
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("tipo_dato",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipo_dato ::= ENTERO 
            {
              String RESULT =null;
		RESULT = "ENTERO";
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("tipo_dato",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipo_dato ::= DOBLE 
            {
              String RESULT =null;
		RESULT = "DOBLE";
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("tipo_dato",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // struct_llamada_arreglo ::= IDENTIFICADOR dim_arreglo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_llamada_arreglo",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // state_params ::= 
            {
              ArrayList<Simbolo> RESULT =null;
		ArrayList<Simbolo> params = new ArrayList<>();
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("state_params",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // state_params ::= parametros 
            {
              ArrayList<Simbolo> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		ArrayList<Simbolo> r = (ArrayList<Simbolo>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		RESULT = r;
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("state_params",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parametros ::= valor_operacion 
            {
              ArrayList<Simbolo> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		Simbolo r = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		
				ArrayList<Simbolo> params = new ArrayList<>();
				if(r!=null){
					Simbolo s = (Simbolo)r;
					params.add(s);
				}
				
				RESULT = params;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("parametros",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parametros ::= parametros COMA valor_operacion 
            {
              ArrayList<Simbolo> RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).right;
		ArrayList<Simbolo> ar = (ArrayList<Simbolo>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		Simbolo r = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		
				ArrayList<Simbolo> params = ar;
				if(r!=null){
					Simbolo s = (Simbolo)r;
					params.add(s);
				}
				RESULT = params;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("parametros",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // strunt_llamada_funcion ::= IDENTIFICADOR PA_A state_params PA_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		ArrayList<Simbolo> p = (ArrayList<Simbolo>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;
		
	 			Simbolo s = new Simbolo(a,manejadorTablaSimbolos.ambitoFlag);
				 if(reportar && p!=null){
					 	if(manejadorTablaSimbolos.buscarSimboloFuncionMetodo(s,"FUNCION")){
							s = manejadorTablaSimbolos.getSimbolo();
							RESULT = s.getTipo();
					}else{
						if(reportar){
							parser.agregarError("Semantico",a,"Error: No existe una funcion con el nombre \""+a+"\" y parametros", aright+1, aleft+1);
						}
					}
				 }
				
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("strunt_llamada_funcion",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // valor ::= FALSE 
            {
              Simbolo RESULT =null;
		
			Simbolo s = new Simbolo("BOOLEAN","BOOLEAN",manejadorTablaSimbolos.ambitoFlag,(Object)false);
			RESULT = s;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // valor ::= TRUE 
            {
              Simbolo RESULT =null;
		
			Simbolo s = new Simbolo("BOOLEAN","BOOLEAN",manejadorTablaSimbolos.ambitoFlag,(Object)true);
			RESULT = s;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // valor ::= CARACTER 
            {
              Simbolo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		
			Simbolo s = new Simbolo("CARACTER","CARACTER",manejadorTablaSimbolos.ambitoFlag,a);
			RESULT = s;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // valor ::= CADENA 
            {
              Simbolo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		
			Simbolo s = new Simbolo("CADENA","CADENA",manejadorTablaSimbolos.ambitoFlag,(String)a);
			RESULT = s;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // valor ::= DECIMAL 
            {
              Simbolo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		
			Simbolo s = new Simbolo("DOBLE","DOBLE",manejadorTablaSimbolos.ambitoFlag,(Double)a);
			RESULT = s;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // valor ::= NUMERO 
            {
              Simbolo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		int a = (int)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		
			Simbolo s = new Simbolo("ENTERO","ENTERO",manejadorTablaSimbolos.ambitoFlag,(Integer)a);
			RESULT = s;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // valor ::= especiales_q_retornan 
            {
              Simbolo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		RESULT = (Simbolo) r;
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // valor ::= struct_llamada_arreglo 
            {
              Simbolo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		RESULT = (Simbolo) r;
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // valor ::= strunt_llamada_funcion 
            {
              Simbolo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		RESULT = (Simbolo) r;
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // valor ::= IDENTIFICADOR 
            {
              Simbolo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		
	 			Simbolo s = new Simbolo(a,manejadorTablaSimbolos.ambitoFlag);
				if(reportar){
					if(manejadorTablaSimbolos.buscarSimbolo(s)){
						s = manejadorTablaSimbolos.getSimbolo();
						RESULT = s;
					}else{
						if(reportar){
							parser.agregarError("Semantico",a,"Error: No existe un simbolo con el nombre \""+a+"\" dentro del ambito", aright+1, aleft+1);
						}
						
					}
				}
				
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // keep_state ::= 
            {
              Boolean RESULT =null;
		RESULT = false;
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("keep_state",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // keep_state ::= KEEP 
            {
              Boolean RESULT =null;
		RESULT = true;
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("keep_state",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // struct_declaracion_var_f ::= VAR tipo_dato IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var_f",63, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // struct_declaracion_var_f ::= VAR tipo_dato IDENTIFICADOR IGUAL struct_operador_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var_f",63, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // struct_declaracion_var_f ::= struct_declaracion_var_f COMA IDENTIFICADOR IGUAL struct_operador_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var_f",63, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // struct_declaracion_var_f ::= struct_declaracion_var_f COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var_f",63, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // struct_declaracion_var ::= keep_state VAR tipo_dato IDENTIFICADOR 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).right;
		Boolean k = (Boolean)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		
				Simbolo s = new Simbolo(a,t,manejadorTablaSimbolos.ambitoFlag,(boolean)k);
				if(reportar){
					if(manejadorTablaSimbolos.isExistSimbolo(s)){
						manejadorTablaSimbolos.agregarSimbolo(s);
					}else{
						parser.agregarError("Semantico",a,"Error: Ya existe un simbolo con el mismo nombre \""+a+"\" dentro del ambito", aright+1, aleft+1);
					}
				}
				RESULT = s;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // struct_declaracion_var ::= keep_state VAR tipo_dato IDENTIFICADOR IGUAL struct_operador_logico 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)).right;
		Boolean k = (Boolean)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).value;
		int vrleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int vrright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		Simbolo vr = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		
				Simbolo s = new Simbolo(a,t,manejadorTablaSimbolos.ambitoFlag,(boolean)k);
				Simbolo sr = (Simbolo) vr;
				if(reportar && vr!=null){
					if(manejadorTablaSimbolos.isExistSimbolo(s)){
						if(comprobacionTipos.getTipoDato(s.getTipo(),sr.getTipo())!=null ){
							s.setObjeto(comprobacionTipos.convertir(sr.getObjeto(),sr.getTipo()));
							manejadorTablaSimbolos.agregarSimbolo(s);
						}else{
							parser.agregarError("Semantico",a,"Error: no es posible asignar el valor a la varible nombre \""+a+"\", ya que no es del mismo tipo dato", vrright+1, vrleft+1);
						}
						
					}else{
						parser.agregarError("Semantico",a,"Error: Ya existe un simbolo con el mismo nombre \""+a+"\" dentro del ambito", aright+1, aleft+1);
					}
				}
				RESULT = s;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // struct_declaracion_var ::= struct_declaracion_var COMA IDENTIFICADOR IGUAL struct_operador_logico 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-4)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).value;
		int vrleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int vrright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		Simbolo vr = (Simbolo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		
				Simbolo s = null;
				Simbolo sr1 = (Simbolo) r;
				Simbolo sr = (Simbolo) vr;
				if(reportar && vr!=null){
					s = new Simbolo(a,sr1.getTipo(),manejadorTablaSimbolos.ambitoFlag,(boolean)sr1.isIsKeep());
					if(manejadorTablaSimbolos.isExistSimbolo(s)){
						if(comprobacionTipos.getTipoDato(sr1.getTipo(),sr.getTipo())!=null ){
							s.setObjeto(comprobacionTipos.convertir(sr.getObjeto(),sr.getTipo()));
							
							manejadorTablaSimbolos.agregarSimbolo(s);
						}else{
							parser.agregarError("Semantico",a,"Error: no es posible asignar el valor a la varible nombre \""+a+"\", ya que no es del mismo tipo dato", vrright+1, vrleft+1);
						}
						
					}else{
						parser.agregarError("Semantico",a,"Error: Ya existe un simbolo con el mismo nombre \""+a+"\" dentro del ambito", aright+1, aleft+1);
					}
				}
				RESULT = s;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // struct_declaracion_var ::= struct_declaracion_var COMA IDENTIFICADOR 
            {
              Object RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).right;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		
				Simbolo sAux =(Simbolo) ss;
				Simbolo s = new Simbolo(a,sAux.getTipo(),manejadorTablaSimbolos.ambitoFlag,(boolean)sAux.isIsKeep());
				if(reportar){
					if(manejadorTablaSimbolos.isExistSimbolo(s)){
						manejadorTablaSimbolos.agregarSimbolo(s);
					}else{
						parser.agregarError("Semantico",a,"Error: Ya existe un simbolo con el mismo nombre \""+a+"\" dentro del ambito", aright+1, aleft+1);
					}
				}
				
				RESULT = s;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // struc_code ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struc_code",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // struc_code ::= struct_principal struc_code 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struc_code",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // struc_code ::= struct_procedimiento struc_code 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struc_code",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // struc_code ::= struct_funcion struc_code 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struc_code",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // struc_code ::= struct_declaracion_array struc_code 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struc_code",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // struc_code ::= struct_declaracion_var struc_code 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struc_code",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // struct_extiende ::= EXTIENDE IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_extiende",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // struct_extiende ::= struct_extiende COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_extiende",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // extiende_state ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("extiende_state",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // extiende_state ::= struct_extiende 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("extiende_state",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // struct_pista ::= PISTA IDENTIFICADOR NT$0 extiende_state st_ind struc_code st_final 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)).value;
		 tablaSimbolos.pintar(); 
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_pista",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$0 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;

	 			reportar = true;
				Simbolo s = new Simbolo(a,"PISTA",manejadorTablaSimbolos.ambitoFlag);
				if(manejadorTablaSimbolos.isExistSimbolo(s)){
					manejadorTablaSimbolos.agregarSimbolo(s);
				}else{
					parser.agregarError("Semantico",a,"Error: Ya existe un simbolo con el mismo nombre \""+a+"\" dentro del ambito", aright+1, aleft+1);
				}
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("NT$0",65, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // codigo ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigo ::= struct_pista codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // st_final ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("st_final",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // st_final ::= DEDENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("st_final",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // st_ded ::= DEDENT 
            {
              Object RESULT =null;
		manejadorTablaSimbolos.dedent();
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("st_ded",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // st_ind ::= INDENT 
            {
              Object RESULT =null;
		manejadorTablaSimbolos.indent();
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("st_ind",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // blanco ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("blanco",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // blanco ::= INDENT blanco DEDENT blanco 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("blanco",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= blanco codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTS$parser.done_parsing();
          return CUP$AnalizadorSintacticoTS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

