
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Aug 30 23:15:53 CST 2021
//----------------------------------------------------

package backend.analizador.comprobaciones.tablasimbolos;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.Stack;
import backend.analizador.objetos.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Aug 30 23:15:53 CST 2021
  */
public class AnalizadorSintacticoTS extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTS() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\313\000\002\002\004\000\002\002\004\000\002\003" +
    "\006\000\002\003\002\000\002\063\003\000\002\064\003" +
    "\000\002\065\003\000\002\065\002\000\002\004\004\000" +
    "\002\004\002\000\002\101\002\000\002\005\011\000\002" +
    "\007\003\000\002\007\002\000\002\006\005\000\002\006" +
    "\004\000\002\010\004\000\002\010\004\000\002\010\004" +
    "\000\002\010\004\000\002\010\004\000\002\010\002\000" +
    "\002\011\005\000\002\011\007\000\002\011\010\000\002" +
    "\011\006\000\002\012\003\000\002\012\002\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\046\006\000\002\050\005\000\002\050\003\000\002\051" +
    "\003\000\002\051\002\000\002\047\004\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\006\000\002\017\003\000\002\017\003\000\002\077\003" +
    "\000\002\077\003\000\002\077\003\000\002\077\003\000" +
    "\002\077\003\000\002\060\005\000\002\060\005\000\002" +
    "\060\005\000\002\060\005\000\002\060\005\000\002\060" +
    "\005\000\002\060\004\000\002\100\003\000\002\100\003" +
    "\000\002\100\003\000\002\100\003\000\002\100\003\000" +
    "\002\100\003\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\003\000\002\015\005" +
    "\000\002\015\005\000\002\015\004\000\002\015\004\000" +
    "\002\015\005\000\002\021\006\000\002\021\005\000\002" +
    "\021\012\000\002\021\014\000\002\021\007\000\002\021" +
    "\010\000\002\022\006\000\002\022\005\000\002\023\003" +
    "\000\002\023\003\000\002\075\005\000\002\075\007\000" +
    "\002\075\005\000\002\075\007\000\002\024\005\000\002" +
    "\024\003\000\002\061\003\000\002\031\006\000\002\035" +
    "\012\000\002\035\013\000\002\036\011\000\002\036\012" +
    "\000\002\055\003\000\002\055\003\000\002\073\006\000" +
    "\002\073\004\000\002\074\002\000\002\066\004\000\002" +
    "\066\004\000\002\066\004\000\002\066\004\000\002\066" +
    "\004\000\002\066\004\000\002\066\004\000\002\066\004" +
    "\000\002\066\004\000\002\066\004\000\002\066\004\000" +
    "\002\066\004\000\002\066\004\000\002\066\004\000\002" +
    "\066\004\000\002\066\004\000\002\066\005\000\002\066" +
    "\004\000\002\066\002\000\002\067\004\000\002\067\004" +
    "\000\002\067\004\000\002\067\004\000\002\067\004\000" +
    "\002\067\004\000\002\067\004\000\002\067\004\000\002" +
    "\067\004\000\002\067\004\000\002\067\004\000\002\067" +
    "\004\000\002\067\004\000\002\067\004\000\002\067\004" +
    "\000\002\067\004\000\002\067\002\000\002\037\014\000" +
    "\002\040\010\000\002\041\010\000\002\042\006\000\002" +
    "\043\006\000\002\044\006\000\002\044\005\000\002\062" +
    "\005\000\002\062\003\000\002\056\003\000\002\056\003" +
    "\000\002\056\003\000\002\056\003\000\002\056\003\000" +
    "\002\056\003\000\002\056\003\000\002\056\003\000\002" +
    "\056\003\000\002\056\003\000\002\056\003\000\002\056" +
    "\003\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\045\010\000" +
    "\002\025\012\000\002\026\012\000\002\026\006\000\002" +
    "\026\002\000\002\027\011\000\002\072\011\000\002\072" +
    "\006\000\002\072\002\000\002\070\003\000\002\070\002" +
    "\000\002\032\015\000\002\052\007\000\002\052\005\000" +
    "\002\053\003\000\002\054\005\000\002\054\005\000\002" +
    "\054\004\000\002\054\004\000\002\033\011\000\002\034" +
    "\013\000\002\071\003\000\002\071\002\000\002\076\003" +
    "\000\002\076\003\000\002\076\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01a2\000\010\002\ufffe\004\ufffe\130\006\001\002\000" +
    "\006\002\ufff8\004\014\001\002\000\004\002\012\001\002" +
    "\000\006\130\006\131\ufffe\001\002\000\004\131\010\001" +
    "\002\000\012\002\ufffe\004\ufffe\130\006\131\ufffe\001\002" +
    "\000\010\002\uffff\004\uffff\131\uffff\001\002\000\004\002" +
    "\001\001\002\000\006\002\ufff8\004\014\001\002\000\004" +
    "\005\016\001\002\000\004\002\000\001\002\000\006\006" +
    "\ufff7\130\ufff7\001\002\000\006\006\021\130\ufff4\001\002" +
    "\000\006\007\u01a2\130\ufff5\001\002\000\004\005\u01a1\001" +
    "\002\000\004\130\024\001\002\000\032\002\uffec\004\uffec" +
    "\005\042\011\030\012\032\013\027\014\025\015\034\041" +
    "\043\042\uffe6\113\044\131\uffec\001\002\000\072\002\ufffd" +
    "\004\ufffd\005\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015" +
    "\ufffd\041\ufffd\042\ufffd\062\ufffd\066\ufffd\067\ufffd\070\ufffd" +
    "\071\ufffd\072\ufffd\073\ufffd\074\ufffd\075\ufffd\076\ufffd\100" +
    "\ufffd\101\ufffd\102\ufffd\110\ufffd\111\ufffd\112\ufffd\113\ufffd" +
    "\131\ufffd\001\002\000\006\005\uffd3\055\uffd3\001\002\000" +
    "\032\002\uffec\004\uffec\005\042\011\030\012\032\013\027" +
    "\014\025\015\034\041\043\042\uffe6\113\044\131\uffec\001" +
    "\002\000\006\005\uffd1\055\uffd1\001\002\000\006\005\uffd4" +
    "\055\uffd4\001\002\000\034\002\uffec\004\uffec\005\042\007" +
    "\306\011\030\012\032\013\027\014\025\015\034\041\043" +
    "\042\uffe6\113\044\131\uffec\001\002\000\006\005\uffd5\055" +
    "\uffd5\001\002\000\032\002\uffec\004\uffec\005\042\011\030" +
    "\012\032\013\027\014\025\015\034\041\043\042\uffe6\113" +
    "\044\131\uffec\001\002\000\006\005\uffd2\055\uffd2\001\002" +
    "\000\004\042\u0192\001\002\000\004\005\u018b\001\002\000" +
    "\032\002\uffec\004\uffec\005\042\011\030\012\032\013\027" +
    "\014\025\015\034\041\043\042\uffe6\113\044\131\uffec\001" +
    "\002\000\010\002\ufffa\004\ufffa\131\u0189\001\002\000\034" +
    "\002\uffec\004\uffec\005\042\007\274\011\030\012\032\013" +
    "\027\014\025\015\034\041\043\042\uffe6\113\044\131\uffec" +
    "\001\002\000\004\064\u0181\001\002\000\020\005\u016c\011" +
    "\030\012\032\013\027\014\025\015\034\042\uffe7\001\002" +
    "\000\004\064\045\001\002\000\004\065\046\001\002\000" +
    "\004\130\024\001\002\000\040\005\073\041\051\042\uffe6" +
    "\062\070\066\057\072\063\073\077\074\101\100\071\101" +
    "\104\102\065\110\075\111\102\112\105\131\uff6b\001\002" +
    "\000\040\005\073\041\051\042\uffe6\062\070\066\057\072" +
    "\063\073\077\074\101\100\071\101\104\102\065\110\075" +
    "\111\102\112\105\131\uff6b\001\002\000\004\042\uffe7\001" +
    "\002\000\040\005\073\041\051\042\uffe6\062\070\066\057" +
    "\072\063\073\077\074\101\100\071\101\104\102\065\110" +
    "\075\111\102\112\105\131\uff6b\001\002\000\040\005\073" +
    "\041\051\042\uffe6\062\070\066\057\072\063\073\077\074" +
    "\101\100\071\101\104\102\065\110\075\111\102\112\105" +
    "\131\uff6b\001\002\000\040\005\073\041\051\042\uffe6\062" +
    "\070\066\057\072\063\073\077\074\101\100\071\101\104" +
    "\102\065\110\075\111\102\112\105\131\uff6b\001\002\000" +
    "\042\005\073\007\306\041\051\042\uffe6\062\070\066\057" +
    "\072\063\073\077\074\101\100\071\101\104\102\065\110" +
    "\075\111\102\112\105\131\uff6b\001\002\000\040\005\073" +
    "\041\051\042\uffe6\062\070\066\057\072\063\073\077\074" +
    "\101\100\071\101\104\102\065\110\075\111\102\112\105" +
    "\131\uff6b\001\002\000\004\064\u0153\001\002\000\040\005" +
    "\073\041\051\042\uffe6\062\070\066\057\072\063\073\077" +
    "\074\101\100\071\101\104\102\065\110\075\111\102\112" +
    "\105\131\uff6b\001\002\000\040\005\073\041\051\042\uffe6" +
    "\062\070\066\057\072\063\073\077\074\101\100\071\101" +
    "\104\102\065\110\075\111\102\112\105\131\uff6b\001\002" +
    "\000\040\005\073\041\051\042\uffe6\062\070\066\057\072" +
    "\063\073\077\074\101\100\071\101\104\102\065\110\075" +
    "\111\102\112\105\131\uff6b\001\002\000\004\064\u0136\001" +
    "\002\000\040\005\073\041\051\042\uffe6\062\070\066\057" +
    "\072\063\073\077\074\101\100\071\101\104\102\065\110" +
    "\075\111\102\112\105\131\uff6b\001\002\000\004\064\u012b" +
    "\001\002\000\042\005\073\007\274\041\051\042\uffe6\062" +
    "\070\066\057\072\063\073\077\074\101\100\071\101\104" +
    "\102\065\110\075\111\102\112\105\131\uff6b\001\002\000" +
    "\040\005\073\041\051\042\uffe6\062\070\066\057\072\063" +
    "\073\077\074\101\100\071\101\104\102\065\110\075\111" +
    "\102\112\105\131\uff6b\001\002\000\004\064\u0116\001\002" +
    "\000\004\064\u0101\001\002\000\040\005\073\041\051\042" +
    "\uffe6\062\070\066\057\072\063\073\077\074\101\100\071" +
    "\101\104\102\065\110\075\111\102\112\105\131\uff6b\001" +
    "\002\000\020\003\366\043\371\052\365\053\372\054\367" +
    "\056\207\064\206\001\002\000\040\005\073\041\051\042" +
    "\uffe6\062\070\066\057\072\063\073\077\074\101\100\071" +
    "\101\104\102\065\110\075\111\102\112\105\131\uff6b\001" +
    "\002\000\004\064\361\001\002\000\040\005\073\041\051" +
    "\042\uffe6\062\070\066\057\072\063\073\077\074\101\100" +
    "\071\101\104\102\065\110\075\111\102\112\105\131\uff6b" +
    "\001\002\000\004\064\352\001\002\000\040\005\073\041" +
    "\051\042\uffe6\062\070\066\057\072\063\073\077\074\101" +
    "\100\071\101\104\102\065\110\075\111\102\112\105\131" +
    "\uff6b\001\002\000\004\130\024\001\002\000\004\064\235" +
    "\001\002\000\004\131\233\001\002\000\004\064\226\001" +
    "\002\000\004\064\106\001\002\000\036\005\126\024\131" +
    "\032\113\044\124\045\112\046\110\047\117\050\123\051" +
    "\122\064\130\065\127\100\071\110\075\111\102\001\002" +
    "\000\112\002\uffca\004\uffca\005\uffca\007\uffca\010\uffca\011" +
    "\uffca\012\uffca\013\uffca\014\uffca\015\uffca\025\uffca\026\uffca" +
    "\027\uffca\030\uffca\031\uffca\033\uffca\041\uffca\042\uffca\061" +
    "\uffca\062\uffca\065\uffca\066\uffca\070\uffca\072\uffca\073\uffca" +
    "\074\uffca\075\uffca\076\uffca\100\uffca\101\uffca\102\uffca\110" +
    "\uffca\111\uffca\112\uffca\113\uffca\131\uffca\001\002\000\144" +
    "\002\uffdf\004\uffdf\005\uffdf\007\uffdf\010\uffdf\011\uffdf\012" +
    "\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf" +
    "\021\uffdf\022\uffdf\023\uffdf\025\uffdf\026\uffdf\027\uffdf\030" +
    "\uffdf\031\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf" +
    "\040\uffdf\041\uffdf\042\uffdf\057\uffdf\061\uffdf\062\uffdf\065" +
    "\uffdf\066\uffdf\070\uffdf\072\uffdf\073\uffdf\074\uffdf\075\uffdf" +
    "\076\uffdf\100\uffdf\101\uffdf\102\uffdf\110\uffdf\111\uffdf\112" +
    "\uffdf\113\uffdf\130\uffdf\131\uffdf\001\002\000\144\002\uff38" +
    "\004\uff38\005\uff38\007\uff38\010\uff38\011\uff38\012\uff38\013" +
    "\uff38\014\uff38\015\uff38\016\uff38\017\uff38\020\uff38\021\uff38" +
    "\022\uff38\023\uff38\025\uff38\026\uff38\027\uff38\030\uff38\031" +
    "\uff38\033\uff38\034\uff38\035\uff38\036\uff38\037\uff38\040\uff38" +
    "\041\uff38\042\uff38\057\uff38\061\uff38\062\uff38\065\uff38\066" +
    "\uff38\070\uff38\072\uff38\073\uff38\074\uff38\075\uff38\076\uff38" +
    "\100\uff38\101\uff38\102\uff38\110\uff38\111\uff38\112\uff38\113" +
    "\uff38\130\uff38\131\uff38\001\002\000\144\002\uffe0\004\uffe0" +
    "\005\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014" +
    "\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0" +
    "\023\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\033" +
    "\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0" +
    "\042\uffe0\057\uffe0\061\uffe0\062\uffe0\065\uffe0\066\uffe0\070" +
    "\uffe0\072\uffe0\073\uffe0\074\uffe0\075\uffe0\076\uffe0\100\uffe0" +
    "\101\uffe0\102\uffe0\110\uffe0\111\uffe0\112\uffe0\113\uffe0\130" +
    "\uffe0\131\uffe0\001\002\000\004\064\223\001\002\000\144" +
    "\002\uff37\004\uff37\005\uff37\007\uff37\010\uff37\011\uff37\012" +
    "\uff37\013\uff37\014\uff37\015\uff37\016\uff37\017\uff37\020\uff37" +
    "\021\uff37\022\uff37\023\uff37\025\uff37\026\uff37\027\uff37\030" +
    "\uff37\031\uff37\033\uff37\034\uff37\035\uff37\036\uff37\037\uff37" +
    "\040\uff37\041\uff37\042\uff37\057\uff37\061\uff37\062\uff37\065" +
    "\uff37\066\uff37\070\uff37\072\uff37\073\uff37\074\uff37\075\uff37" +
    "\076\uff37\100\uff37\101\uff37\102\uff37\110\uff37\111\uff37\112" +
    "\uff37\113\uff37\130\uff37\131\uff37\001\002\000\144\002\uffe2" +
    "\004\uffe2\005\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013" +
    "\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2" +
    "\022\uffe2\023\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031" +
    "\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2" +
    "\041\uffe2\042\uffe2\057\uffe2\061\uffe2\062\uffe2\065\uffe2\066" +
    "\uffe2\070\uffe2\072\uffe2\073\uffe2\074\uffe2\075\uffe2\076\uffe2" +
    "\100\uffe2\101\uffe2\102\uffe2\110\uffe2\111\uffe2\112\uffe2\113" +
    "\uffe2\130\uffe2\131\uffe2\001\002\000\144\002\uff39\004\uff39" +
    "\005\uff39\007\uff39\010\uff39\011\uff39\012\uff39\013\uff39\014" +
    "\uff39\015\uff39\016\uff39\017\uff39\020\uff39\021\uff39\022\uff39" +
    "\023\uff39\025\uff39\026\uff39\027\uff39\030\uff39\031\uff39\033" +
    "\uff39\034\uff39\035\uff39\036\uff39\037\uff39\040\uff39\041\uff39" +
    "\042\uff39\057\uff39\061\uff39\062\uff39\065\uff39\066\uff39\070" +
    "\uff39\072\uff39\073\uff39\074\uff39\075\uff39\076\uff39\100\uff39" +
    "\101\uff39\102\uff39\110\uff39\111\uff39\112\uff39\113\uff39\130" +
    "\uff39\131\uff39\001\002\000\144\002\uffdd\004\uffdd\005\uffdd" +
    "\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015" +
    "\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd" +
    "\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\033\uffdd\034" +
    "\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd" +
    "\057\uffdd\061\uffdd\062\uffdd\065\uffdd\066\uffdd\070\uffdd\072" +
    "\uffdd\073\uffdd\074\uffdd\075\uffdd\076\uffdd\100\uffdd\101\uffdd" +
    "\102\uffdd\110\uffdd\111\uffdd\112\uffdd\113\uffdd\130\uffdd\131" +
    "\uffdd\001\002\000\144\002\uffaf\004\uffaf\005\uffaf\007\uffaf" +
    "\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016" +
    "\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\025\uffaf" +
    "\026\uffaf\027\uffaf\030\uffaf\031\uffaf\033\uffaf\034\uffaf\035" +
    "\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\057\uffaf" +
    "\061\uffaf\062\uffaf\065\uffaf\066\uffaf\070\uffaf\072\uffaf\073" +
    "\uffaf\074\uffaf\075\uffaf\076\uffaf\100\uffaf\101\uffaf\102\uffaf" +
    "\110\uffaf\111\uffaf\112\uffaf\113\uffaf\130\uffaf\131\uffaf\001" +
    "\002\000\144\002\uffe4\004\uffe4\005\uffe4\007\uffe4\010\uffe4" +
    "\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017" +
    "\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\025\uffe4\026\uffe4" +
    "\027\uffe4\030\uffe4\031\uffe4\033\uffe4\034\uffe4\035\uffe4\036" +
    "\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\057\uffe4\061\uffe4" +
    "\062\uffe4\065\uffe4\066\uffe4\070\uffe4\072\uffe4\073\uffe4\074" +
    "\uffe4\075\uffe4\076\uffe4\100\uffe4\101\uffe4\102\uffe4\110\uffe4" +
    "\111\uffe4\112\uffe4\113\uffe4\130\uffe4\131\uffe4\001\002\000" +
    "\144\002\uffde\004\uffde\005\uffde\007\uffde\010\uffde\011\uffde" +
    "\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020" +
    "\uffde\021\uffde\022\uffde\023\uffde\025\uffde\026\uffde\027\uffde" +
    "\030\uffde\031\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037" +
    "\uffde\040\uffde\041\uffde\042\uffde\057\uffde\061\uffde\062\uffde" +
    "\065\uffde\066\uffde\070\uffde\072\uffde\073\uffde\074\uffde\075" +
    "\uffde\076\uffde\100\uffde\101\uffde\102\uffde\110\uffde\111\uffde" +
    "\112\uffde\113\uffde\130\uffde\131\uffde\001\002\000\144\002" +
    "\uffdc\004\uffdc\005\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc" +
    "\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021" +
    "\uffdc\022\uffdc\023\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc" +
    "\031\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040" +
    "\uffdc\041\uffdc\042\uffdc\057\uffdc\061\uffdc\062\uffdc\065\uffdc" +
    "\066\uffdc\070\uffdc\072\uffdc\073\uffdc\074\uffdc\075\uffdc\076" +
    "\uffdc\100\uffdc\101\uffdc\102\uffdc\110\uffdc\111\uffdc\112\uffdc" +
    "\113\uffdc\130\uffdc\131\uffdc\001\002\000\144\002\uffe1\004" +
    "\uffe1\005\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1" +
    "\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022" +
    "\uffe1\023\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1" +
    "\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041" +
    "\uffe1\042\uffe1\057\uffe1\061\uffe1\062\uffe1\065\uffe1\066\uffe1" +
    "\070\uffe1\072\uffe1\073\uffe1\074\uffe1\075\uffe1\076\uffe1\100" +
    "\uffe1\101\uffe1\102\uffe1\110\uffe1\111\uffe1\112\uffe1\113\uffe1" +
    "\130\uffe1\131\uffe1\001\002\000\020\025\171\026\170\027" +
    "\174\030\172\031\173\033\uff62\065\uff62\001\002\000\150" +
    "\002\uffe5\004\uffe5\005\uffe5\007\uffe5\010\uffe5\011\uffe5\012" +
    "\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5" +
    "\021\uffe5\022\uffe5\023\uffe5\025\uffe5\026\uffe5\027\uffe5\030" +
    "\uffe5\031\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5" +
    "\040\uffe5\041\uffe5\042\uffe5\056\207\057\uffe5\061\uffe5\062" +
    "\uffe5\064\206\065\uffe5\066\uffe5\070\uffe5\072\uffe5\073\uffe5" +
    "\074\uffe5\075\uffe5\076\uffe5\100\uffe5\101\uffe5\102\uffe5\110" +
    "\uffe5\111\uffe5\112\uffe5\113\uffe5\130\uffe5\131\uffe5\001\002" +
    "\000\046\005\uff64\041\uff64\042\uff64\062\uff64\066\uff64\070" +
    "\uff64\072\uff64\073\uff64\074\uff64\075\uff64\076\uff64\100\uff64" +
    "\101\uff64\102\uff64\110\uff64\111\uff64\112\uff64\131\uff64\001" +
    "\002\000\030\005\126\044\124\045\112\046\110\047\117" +
    "\050\123\051\122\064\130\100\071\110\075\111\102\001" +
    "\002\000\030\005\126\044\124\045\112\046\110\047\117" +
    "\050\123\051\122\064\130\100\071\110\075\111\102\001" +
    "\002\000\006\033\165\065\166\001\002\000\140\002\uffc9" +
    "\004\uffc9\005\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013" +
    "\uffc9\014\uffc9\015\uffc9\016\137\017\147\020\143\021\144" +
    "\022\140\023\150\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031" +
    "\uffc9\033\142\034\135\035\141\036\146\037\145\040\136" +
    "\041\uffc9\042\uffc9\061\uffc9\062\uffc9\065\uffc9\066\uffc9\070" +
    "\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9\076\uffc9\100\uffc9" +
    "\101\uffc9\102\uffc9\110\uffc9\111\uffc9\112\uffc9\113\uffc9\131" +
    "\uffc9\001\002\000\144\002\uffe3\004\uffe3\005\uffe3\007\uffe3" +
    "\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\025\uffe3" +
    "\026\uffe3\027\uffe3\030\uffe3\031\uffe3\033\uffe3\034\uffe3\035" +
    "\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\057\uffe3" +
    "\061\uffe3\062\uffe3\065\uffe3\066\uffe3\070\uffe3\072\uffe3\073" +
    "\uffe3\074\uffe3\075\uffe3\076\uffe3\100\uffe3\101\uffe3\102\uffe3" +
    "\110\uffe3\111\uffe3\112\uffe3\113\uffe3\130\uffe3\131\uffe3\001" +
    "\002\000\030\005\126\044\124\045\112\046\110\047\117" +
    "\050\123\051\122\064\130\100\071\110\075\111\102\001" +
    "\002\000\030\005\126\044\124\045\112\046\110\047\117" +
    "\050\123\051\122\064\130\100\071\110\075\111\102\001" +
    "\002\000\030\005\126\044\124\045\112\046\110\047\117" +
    "\050\123\051\122\064\130\100\071\110\075\111\102\001" +
    "\002\000\030\005\126\044\124\045\112\046\110\047\117" +
    "\050\123\051\122\064\130\100\071\110\075\111\102\001" +
    "\002\000\030\005\126\044\124\045\112\046\110\047\117" +
    "\050\123\051\122\064\130\100\071\110\075\111\102\001" +
    "\002\000\030\005\126\044\124\045\112\046\110\047\117" +
    "\050\123\051\122\064\130\100\071\110\075\111\102\001" +
    "\002\000\030\005\126\044\124\045\112\046\110\047\117" +
    "\050\123\051\122\064\130\100\071\110\075\111\102\001" +
    "\002\000\030\005\126\044\124\045\112\046\110\047\117" +
    "\050\123\051\122\064\130\100\071\110\075\111\102\001" +
    "\002\000\030\005\126\044\124\045\112\046\110\047\117" +
    "\050\123\051\122\064\130\100\071\110\075\111\102\001" +
    "\002\000\030\005\126\044\124\045\112\046\110\047\117" +
    "\050\123\051\122\064\130\100\071\110\075\111\102\001" +
    "\002\000\030\005\126\044\124\045\112\046\110\047\117" +
    "\050\123\051\122\064\130\100\071\110\075\111\102\001" +
    "\002\000\030\005\126\044\124\045\112\046\110\047\117" +
    "\050\123\051\122\064\130\100\071\110\075\111\102\001" +
    "\002\000\124\002\uffbe\004\uffbe\005\uffbe\007\uffbe\010\uffbe" +
    "\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\025\uffbe\026" +
    "\uffbe\027\uffbe\030\uffbe\031\uffbe\033\142\034\135\035\141" +
    "\036\146\037\145\040\136\041\uffbe\042\uffbe\061\uffbe\062" +
    "\uffbe\065\uffbe\066\uffbe\070\uffbe\072\uffbe\073\uffbe\074\uffbe" +
    "\075\uffbe\076\uffbe\100\uffbe\101\uffbe\102\uffbe\110\uffbe\111" +
    "\uffbe\112\uffbe\113\uffbe\131\uffbe\001\002\000\124\002\uffc2" +
    "\004\uffc2\005\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013" +
    "\uffc2\014\uffc2\015\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2" +
    "\031\uffc2\033\142\034\135\035\141\036\146\037\145\040" +
    "\136\041\uffc2\042\uffc2\061\uffc2\062\uffc2\065\uffc2\066\uffc2" +
    "\070\uffc2\072\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2\100" +
    "\uffc2\101\uffc2\102\uffc2\110\uffc2\111\uffc2\112\uffc2\113\uffc2" +
    "\131\uffc2\001\002\000\144\002\uffb3\004\uffb3\005\uffb3\007" +
    "\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3" +
    "\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\025" +
    "\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\033\uffb3\034\uffb3" +
    "\035\uffb3\036\uffb3\037\uffb3\040\136\041\uffb3\042\uffb3\057" +
    "\uffb3\061\uffb3\062\uffb3\065\uffb3\066\uffb3\070\uffb3\072\uffb3" +
    "\073\uffb3\074\uffb3\075\uffb3\076\uffb3\100\uffb3\101\uffb3\102" +
    "\uffb3\110\uffb3\111\uffb3\112\uffb3\113\uffb3\130\uffb3\131\uffb3" +
    "\001\002\000\144\002\uffb2\004\uffb2\005\uffb2\007\uffb2\010" +
    "\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2" +
    "\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\025\uffb2\026" +
    "\uffb2\027\uffb2\030\uffb2\031\uffb2\033\uffb2\034\uffb2\035\uffb2" +
    "\036\uffb2\037\uffb2\040\136\041\uffb2\042\uffb2\057\uffb2\061" +
    "\uffb2\062\uffb2\065\uffb2\066\uffb2\070\uffb2\072\uffb2\073\uffb2" +
    "\074\uffb2\075\uffb2\076\uffb2\100\uffb2\101\uffb2\102\uffb2\110" +
    "\uffb2\111\uffb2\112\uffb2\113\uffb2\130\uffb2\131\uffb2\001\002" +
    "\000\124\002\uffc0\004\uffc0\005\uffc0\007\uffc0\010\uffc0\011" +
    "\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\025\uffc0\026\uffc0" +
    "\027\uffc0\030\uffc0\031\uffc0\033\142\034\135\035\141\036" +
    "\146\037\145\040\136\041\uffc0\042\uffc0\061\uffc0\062\uffc0" +
    "\065\uffc0\066\uffc0\070\uffc0\072\uffc0\073\uffc0\074\uffc0\075" +
    "\uffc0\076\uffc0\100\uffc0\101\uffc0\102\uffc0\110\uffc0\111\uffc0" +
    "\112\uffc0\113\uffc0\131\uffc0\001\002\000\124\002\uffc1\004" +
    "\uffc1\005\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1" +
    "\014\uffc1\015\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031" +
    "\uffc1\033\142\034\135\035\141\036\146\037\145\040\136" +
    "\041\uffc1\042\uffc1\061\uffc1\062\uffc1\065\uffc1\066\uffc1\070" +
    "\uffc1\072\uffc1\073\uffc1\074\uffc1\075\uffc1\076\uffc1\100\uffc1" +
    "\101\uffc1\102\uffc1\110\uffc1\111\uffc1\112\uffc1\113\uffc1\131" +
    "\uffc1\001\002\000\144\002\uffb6\004\uffb6\005\uffb6\007\uffb6" +
    "\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016" +
    "\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\025\uffb6" +
    "\026\uffb6\027\uffb6\030\uffb6\031\uffb6\033\uffb6\034\uffb6\035" +
    "\141\036\146\037\145\040\136\041\uffb6\042\uffb6\057\uffb6" +
    "\061\uffb6\062\uffb6\065\uffb6\066\uffb6\070\uffb6\072\uffb6\073" +
    "\uffb6\074\uffb6\075\uffb6\076\uffb6\100\uffb6\101\uffb6\102\uffb6" +
    "\110\uffb6\111\uffb6\112\uffb6\113\uffb6\130\uffb6\131\uffb6\001" +
    "\002\000\144\002\uffb4\004\uffb4\005\uffb4\007\uffb4\010\uffb4" +
    "\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017" +
    "\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\025\uffb4\026\uffb4" +
    "\027\uffb4\030\uffb4\031\uffb4\033\uffb4\034\uffb4\035\uffb4\036" +
    "\uffb4\037\uffb4\040\136\041\uffb4\042\uffb4\057\uffb4\061\uffb4" +
    "\062\uffb4\065\uffb4\066\uffb4\070\uffb4\072\uffb4\073\uffb4\074" +
    "\uffb4\075\uffb4\076\uffb4\100\uffb4\101\uffb4\102\uffb4\110\uffb4" +
    "\111\uffb4\112\uffb4\113\uffb4\130\uffb4\131\uffb4\001\002\000" +
    "\124\002\uffbf\004\uffbf\005\uffbf\007\uffbf\010\uffbf\011\uffbf" +
    "\012\uffbf\013\uffbf\014\uffbf\015\uffbf\025\uffbf\026\uffbf\027" +
    "\uffbf\030\uffbf\031\uffbf\033\142\034\135\035\141\036\146" +
    "\037\145\040\136\041\uffbf\042\uffbf\061\uffbf\062\uffbf\065" +
    "\uffbf\066\uffbf\070\uffbf\072\uffbf\073\uffbf\074\uffbf\075\uffbf" +
    "\076\uffbf\100\uffbf\101\uffbf\102\uffbf\110\uffbf\111\uffbf\112" +
    "\uffbf\113\uffbf\131\uffbf\001\002\000\124\002\uffc3\004\uffc3" +
    "\005\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014" +
    "\uffc3\015\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3" +
    "\033\142\034\135\035\141\036\146\037\145\040\136\041" +
    "\uffc3\042\uffc3\061\uffc3\062\uffc3\065\uffc3\066\uffc3\070\uffc3" +
    "\072\uffc3\073\uffc3\074\uffc3\075\uffc3\076\uffc3\100\uffc3\101" +
    "\uffc3\102\uffc3\110\uffc3\111\uffc3\112\uffc3\113\uffc3\131\uffc3" +
    "\001\002\000\144\002\uffb1\004\uffb1\005\uffb1\007\uffb1\010" +
    "\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1" +
    "\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\025\uffb1\026" +
    "\uffb1\027\uffb1\030\uffb1\031\uffb1\033\uffb1\034\uffb1\035\uffb1" +
    "\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\057\uffb1\061" +
    "\uffb1\062\uffb1\065\uffb1\066\uffb1\070\uffb1\072\uffb1\073\uffb1" +
    "\074\uffb1\075\uffb1\076\uffb1\100\uffb1\101\uffb1\102\uffb1\110" +
    "\uffb1\111\uffb1\112\uffb1\113\uffb1\130\uffb1\131\uffb1\001\002" +
    "\000\144\002\uffb5\004\uffb5\005\uffb5\007\uffb5\010\uffb5\011" +
    "\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5" +
    "\020\uffb5\021\uffb5\022\uffb5\023\uffb5\025\uffb5\026\uffb5\027" +
    "\uffb5\030\uffb5\031\uffb5\033\uffb5\034\uffb5\035\141\036\146" +
    "\037\145\040\136\041\uffb5\042\uffb5\057\uffb5\061\uffb5\062" +
    "\uffb5\065\uffb5\066\uffb5\070\uffb5\072\uffb5\073\uffb5\074\uffb5" +
    "\075\uffb5\076\uffb5\100\uffb5\101\uffb5\102\uffb5\110\uffb5\111" +
    "\uffb5\112\uffb5\113\uffb5\130\uffb5\131\uffb5\001\002\000\034" +
    "\005\126\024\131\032\113\044\124\045\112\046\110\047" +
    "\117\050\123\051\122\064\130\100\071\110\075\111\102" +
    "\001\002\000\046\005\uff65\041\uff65\042\uff65\062\uff65\066" +
    "\uff65\070\uff65\072\uff65\073\uff65\074\uff65\075\uff65\076\uff65" +
    "\100\uff65\101\uff65\102\uff65\110\uff65\111\uff65\112\uff65\131" +
    "\uff65\001\002\000\020\025\171\026\170\027\174\030\172" +
    "\031\173\033\uff63\065\uff63\001\002\000\034\005\126\024" +
    "\131\032\113\044\124\045\112\046\110\047\117\050\123" +
    "\051\122\064\130\100\071\110\075\111\102\001\002\000" +
    "\034\005\126\024\131\032\113\044\124\045\112\046\110" +
    "\047\117\050\123\051\122\064\130\100\071\110\075\111" +
    "\102\001\002\000\034\005\126\024\131\032\113\044\124" +
    "\045\112\046\110\047\117\050\123\051\122\064\130\100" +
    "\071\110\075\111\102\001\002\000\034\005\126\024\131" +
    "\032\113\044\124\045\112\046\110\047\117\050\123\051" +
    "\122\064\130\100\071\110\075\111\102\001\002\000\034" +
    "\005\126\024\131\032\113\044\124\045\112\046\110\047" +
    "\117\050\123\051\122\064\130\100\071\110\075\111\102" +
    "\001\002\000\112\002\uffd0\004\uffd0\005\uffd0\007\uffd0\010" +
    "\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\025\171" +
    "\026\170\027\uffd0\030\uffd0\031\uffd0\033\uffd0\041\uffd0\042" +
    "\uffd0\061\uffd0\062\uffd0\065\uffd0\066\uffd0\070\uffd0\072\uffd0" +
    "\073\uffd0\074\uffd0\075\uffd0\076\uffd0\100\uffd0\101\uffd0\102" +
    "\uffd0\110\uffd0\111\uffd0\112\uffd0\113\uffd0\131\uffd0\001\002" +
    "\000\112\002\uffce\004\uffce\005\uffce\007\uffce\010\uffce\011" +
    "\uffce\012\uffce\013\uffce\014\uffce\015\uffce\025\171\026\170" +
    "\027\uffce\030\uffce\031\uffce\033\uffce\041\uffce\042\uffce\061" +
    "\uffce\062\uffce\065\uffce\066\uffce\070\uffce\072\uffce\073\uffce" +
    "\074\uffce\075\uffce\076\uffce\100\uffce\101\uffce\102\uffce\110" +
    "\uffce\111\uffce\112\uffce\113\uffce\131\uffce\001\002\000\112" +
    "\002\uffcf\004\uffcf\005\uffcf\007\uffcf\010\uffcf\011\uffcf\012" +
    "\uffcf\013\uffcf\014\uffcf\015\uffcf\025\171\026\170\027\uffcf" +
    "\030\uffcf\031\uffcf\033\uffcf\041\uffcf\042\uffcf\061\uffcf\062" +
    "\uffcf\065\uffcf\066\uffcf\070\uffcf\072\uffcf\073\uffcf\074\uffcf" +
    "\075\uffcf\076\uffcf\100\uffcf\101\uffcf\102\uffcf\110\uffcf\111" +
    "\uffcf\112\uffcf\113\uffcf\131\uffcf\001\002\000\112\002\uffcd" +
    "\004\uffcd\005\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013" +
    "\uffcd\014\uffcd\015\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd" +
    "\031\uffcd\033\uffcd\041\uffcd\042\uffcd\061\uffcd\062\uffcd\065" +
    "\uffcd\066\uffcd\070\uffcd\072\uffcd\073\uffcd\074\uffcd\075\uffcd" +
    "\076\uffcd\100\uffcd\101\uffcd\102\uffcd\110\uffcd\111\uffcd\112" +
    "\uffcd\113\uffcd\131\uffcd\001\002\000\112\002\uffcc\004\uffcc" +
    "\005\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014" +
    "\uffcc\015\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc" +
    "\033\uffcc\041\uffcc\042\uffcc\061\uffcc\062\uffcc\065\uffcc\066" +
    "\uffcc\070\uffcc\072\uffcc\073\uffcc\074\uffcc\075\uffcc\076\uffcc" +
    "\100\uffcc\101\uffcc\102\uffcc\110\uffcc\111\uffcc\112\uffcc\113" +
    "\uffcc\131\uffcc\001\002\000\124\002\uffbd\004\uffbd\005\uffbd" +
    "\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015" +
    "\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\033\142" +
    "\034\135\035\141\036\146\037\145\040\136\041\uffbd\042" +
    "\uffbd\061\uffbd\062\uffbd\065\uffbd\066\uffbd\070\uffbd\072\uffbd" +
    "\073\uffbd\074\uffbd\075\uffbd\076\uffbd\100\uffbd\101\uffbd\102" +
    "\uffbd\110\uffbd\111\uffbd\112\uffbd\113\uffbd\131\uffbd\001\002" +
    "\000\020\033\142\034\135\035\141\036\146\037\145\040" +
    "\136\065\204\001\002\000\144\002\uffb0\004\uffb0\005\uffb0" +
    "\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015" +
    "\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0" +
    "\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\033\uffb0\034" +
    "\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0" +
    "\057\uffb0\061\uffb0\062\uffb0\065\uffb0\066\uffb0\070\uffb0\072" +
    "\uffb0\073\uffb0\074\uffb0\075\uffb0\076\uffb0\100\uffb0\101\uffb0" +
    "\102\uffb0\110\uffb0\111\uffb0\112\uffb0\113\uffb0\130\uffb0\131" +
    "\uffb0\001\002\000\146\002\uffd6\004\uffd6\005\uffd6\007\uffd6" +
    "\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016" +
    "\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\025\uffd6" +
    "\026\uffd6\027\uffd6\030\uffd6\031\uffd6\033\uffd6\034\uffd6\035" +
    "\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\056\220" +
    "\057\uffd6\061\uffd6\062\uffd6\065\uffd6\066\uffd6\070\uffd6\072" +
    "\uffd6\073\uffd6\074\uffd6\075\uffd6\076\uffd6\100\uffd6\101\uffd6" +
    "\102\uffd6\110\uffd6\111\uffd6\112\uffd6\113\uffd6\130\uffd6\131" +
    "\uffd6\001\002\000\032\005\126\044\124\045\112\046\110" +
    "\047\117\050\123\051\122\064\130\065\uffd7\100\071\110" +
    "\075\111\102\001\002\000\030\005\126\044\124\045\112" +
    "\046\110\047\117\050\123\051\122\064\130\100\071\110" +
    "\075\111\102\001\002\000\020\033\142\034\135\035\141" +
    "\036\146\037\145\040\136\057\211\001\002\000\150\002" +
    "\uffa2\004\uffa2\005\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2" +
    "\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021" +
    "\uffa2\022\uffa2\023\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2" +
    "\031\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040" +
    "\uffa2\041\uffa2\042\uffa2\043\uffa2\056\uffa2\057\uffa2\061\uffa2" +
    "\062\uffa2\065\uffa2\066\uffa2\070\uffa2\072\uffa2\073\uffa2\074" +
    "\uffa2\075\uffa2\076\uffa2\100\uffa2\101\uffa2\102\uffa2\110\uffa2" +
    "\111\uffa2\112\uffa2\113\uffa2\130\uffa2\131\uffa2\001\002\000" +
    "\004\065\217\001\002\000\006\007\215\065\uffd8\001\002" +
    "\000\022\007\uffd9\033\142\034\135\035\141\036\146\037" +
    "\145\040\136\065\uffd9\001\002\000\030\005\126\044\124" +
    "\045\112\046\110\047\117\050\123\051\122\064\130\100" +
    "\071\110\075\111\102\001\002\000\022\007\uffda\033\142" +
    "\034\135\035\141\036\146\037\145\040\136\065\uffda\001" +
    "\002\000\144\002\uffdb\004\uffdb\005\uffdb\007\uffdb\010\uffdb" +
    "\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017" +
    "\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\025\uffdb\026\uffdb" +
    "\027\uffdb\030\uffdb\031\uffdb\033\uffdb\034\uffdb\035\uffdb\036" +
    "\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\057\uffdb\061\uffdb" +
    "\062\uffdb\065\uffdb\066\uffdb\070\uffdb\072\uffdb\073\uffdb\074" +
    "\uffdb\075\uffdb\076\uffdb\100\uffdb\101\uffdb\102\uffdb\110\uffdb" +
    "\111\uffdb\112\uffdb\113\uffdb\130\uffdb\131\uffdb\001\002\000" +
    "\030\005\126\044\124\045\112\046\110\047\117\050\123" +
    "\051\122\064\130\100\071\110\075\111\102\001\002\000" +
    "\020\033\142\034\135\035\141\036\146\037\145\040\136" +
    "\057\222\001\002\000\150\002\uffa3\004\uffa3\005\uffa3\007" +
    "\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3" +
    "\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\025" +
    "\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\033\uffa3\034\uffa3" +
    "\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043" +
    "\uffa3\056\uffa3\057\uffa3\061\uffa3\062\uffa3\065\uffa3\066\uffa3" +
    "\070\uffa3\072\uffa3\073\uffa3\074\uffa3\075\uffa3\076\uffa3\100" +
    "\uffa3\101\uffa3\102\uffa3\110\uffa3\111\uffa3\112\uffa3\113\uffa3" +
    "\130\uffa3\131\uffa3\001\002\000\034\005\126\024\131\032" +
    "\113\044\124\045\112\046\110\047\117\050\123\051\122" +
    "\064\130\100\071\110\075\111\102\001\002\000\016\025" +
    "\171\026\170\027\174\030\172\031\173\065\225\001\002" +
    "\000\112\002\uffcb\004\uffcb\005\uffcb\007\uffcb\010\uffcb\011" +
    "\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\025\uffcb\026\uffcb" +
    "\027\uffcb\030\uffcb\031\uffcb\033\uffcb\041\uffcb\042\uffcb\061" +
    "\uffcb\062\uffcb\065\uffcb\066\uffcb\070\uffcb\072\uffcb\073\uffcb" +
    "\074\uffcb\075\uffcb\076\uffcb\100\uffcb\101\uffcb\102\uffcb\110" +
    "\uffcb\111\uffcb\112\uffcb\113\uffcb\131\uffcb\001\002\000\030" +
    "\005\126\044\124\045\112\046\110\047\117\050\123\051" +
    "\122\064\130\100\071\110\075\111\102\001\002\000\020" +
    "\007\230\033\142\034\135\035\141\036\146\037\145\040" +
    "\136\001\002\000\030\005\126\044\124\045\112\046\110" +
    "\047\117\050\123\051\122\064\130\100\071\110\075\111" +
    "\102\001\002\000\020\033\142\034\135\035\141\036\146" +
    "\037\145\040\136\065\232\001\002\000\046\005\uff69\041" +
    "\uff69\042\uff69\062\uff69\066\uff69\070\uff69\072\uff69\073\uff69" +
    "\074\uff69\075\uff69\076\uff69\100\uff69\101\uff69\102\uff69\110" +
    "\uff69\111\uff69\112\uff69\131\uff69\001\002\000\076\002\ufffc" +
    "\004\ufffc\005\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015" +
    "\ufffc\041\ufffc\042\ufffc\062\ufffc\063\ufffc\066\ufffc\067\ufffc" +
    "\070\ufffc\071\ufffc\072\ufffc\073\ufffc\074\ufffc\075\ufffc\076" +
    "\ufffc\100\ufffc\101\ufffc\102\ufffc\110\ufffc\111\ufffc\112\ufffc" +
    "\113\ufffc\127\ufffc\131\ufffc\001\002\000\032\002\uff50\004" +
    "\uff50\005\uff50\011\uff50\012\uff50\013\uff50\014\uff50\015\uff50" +
    "\041\uff50\042\uff50\113\uff50\131\uff50\001\002\000\030\005" +
    "\126\044\124\045\112\046\110\047\117\050\123\051\122" +
    "\064\130\100\071\110\075\111\102\001\002\000\020\033" +
    "\142\034\135\035\141\036\146\037\145\040\136\065\237" +
    "\001\002\000\144\002\uff66\004\uff66\005\uff66\007\uff66\010" +
    "\uff66\011\uff66\012\uff66\013\uff66\014\uff66\015\uff66\016\uff66" +
    "\017\uff66\020\uff66\021\uff66\022\uff66\023\uff66\025\uff66\026" +
    "\uff66\027\uff66\030\uff66\031\uff66\033\uff66\034\uff66\035\uff66" +
    "\036\uff66\037\uff66\040\uff66\041\uff66\042\uff66\057\uff66\061" +
    "\uff66\062\uff66\065\uff66\066\uff66\070\uff66\072\uff66\073\uff66" +
    "\074\uff66\075\uff66\076\uff66\100\uff66\101\uff66\102\uff66\110" +
    "\uff66\111\uff66\112\uff66\113\uff66\130\uff66\131\uff66\001\002" +
    "\000\044\005\073\041\051\042\uffe6\062\070\066\057\072" +
    "\063\073\077\074\101\075\uff7c\076\255\100\071\101\104" +
    "\102\065\110\075\111\102\112\105\131\uff7c\001\002\000" +
    "\046\005\073\041\051\042\uffe6\062\070\066\057\070\uff7c" +
    "\072\063\073\077\074\101\075\uff7c\076\255\100\071\101" +
    "\104\102\065\110\075\111\102\112\105\131\uff7c\001\002" +
    "\000\046\005\073\041\051\042\uffe6\062\070\066\057\070" +
    "\uff7c\072\063\073\077\074\101\075\uff7c\076\255\100\071" +
    "\101\104\102\065\110\075\111\102\112\105\131\uff7c\001" +
    "\002\000\006\075\340\131\uff3a\001\002\000\046\005\073" +
    "\041\051\042\uffe6\062\070\066\057\070\uff7c\072\063\073" +
    "\077\074\101\075\uff7c\076\255\100\071\101\104\102\065" +
    "\110\075\111\102\112\105\131\uff7c\001\002\000\046\005" +
    "\073\041\051\042\uffe6\062\070\066\057\070\uff7c\072\063" +
    "\073\077\074\101\075\uff7c\076\255\100\071\101\104\102" +
    "\065\110\075\111\102\112\105\131\uff7c\001\002\000\050" +
    "\005\073\007\306\041\051\042\uffe6\062\070\066\057\070" +
    "\uff7c\072\063\073\077\074\101\075\uff7c\076\255\100\071" +
    "\101\104\102\065\110\075\111\102\112\105\131\uff7c\001" +
    "\002\000\046\005\073\041\051\042\uffe6\062\070\066\057" +
    "\070\uff7c\072\063\073\077\074\101\075\uff7c\076\255\100" +
    "\071\101\104\102\065\110\075\111\102\112\105\131\uff7c" +
    "\001\002\000\046\005\073\041\051\042\uffe6\062\070\066" +
    "\057\070\uff7c\072\063\073\077\074\101\075\uff7c\076\255" +
    "\100\071\101\104\102\065\110\075\111\102\112\105\131" +
    "\uff7c\001\002\000\046\005\073\041\051\042\uffe6\062\070" +
    "\066\057\070\uff7c\072\063\073\077\074\101\075\uff7c\076" +
    "\255\100\071\101\104\102\065\110\075\111\102\112\105" +
    "\131\uff7c\001\002\000\046\005\073\041\051\042\uffe6\062" +
    "\070\066\057\070\uff7c\072\063\073\077\074\101\075\uff7c" +
    "\076\255\100\071\101\104\102\065\110\075\111\102\112" +
    "\105\131\uff7c\001\002\000\046\005\073\041\051\042\uffe6" +
    "\062\070\066\057\070\uff7c\072\063\073\077\074\101\075" +
    "\uff7c\076\255\100\071\101\104\102\065\110\075\111\102" +
    "\112\105\131\uff7c\001\002\000\050\005\073\007\274\041" +
    "\051\042\uffe6\062\070\066\057\070\uff7c\072\063\073\077" +
    "\074\101\075\uff7c\076\255\100\071\101\104\102\065\110" +
    "\075\111\102\112\105\131\uff7c\001\002\000\036\003\270" +
    "\005\126\024\131\032\113\044\124\045\112\046\110\047" +
    "\117\050\123\051\122\064\130\100\071\110\075\111\102" +
    "\001\002\000\046\005\073\041\051\042\uffe6\062\070\066" +
    "\057\070\uff7c\072\063\073\077\074\101\075\uff7c\076\255" +
    "\100\071\101\104\102\065\110\075\111\102\112\105\131" +
    "\uff7c\001\002\000\046\005\073\041\051\042\uffe6\062\070" +
    "\066\057\070\uff7c\072\063\073\077\074\101\075\uff7c\076" +
    "\255\100\071\101\104\102\065\110\075\111\102\112\105" +
    "\131\uff7c\001\002\000\046\005\073\041\051\042\uffe6\062" +
    "\070\066\057\070\uff7c\072\063\073\077\074\101\075\uff7c" +
    "\076\255\100\071\101\104\102\065\110\075\111\102\112" +
    "\105\131\uff7c\001\002\000\046\005\073\041\051\042\uffe6" +
    "\062\070\066\057\070\uff7c\072\063\073\077\074\101\075" +
    "\uff7c\076\255\100\071\101\104\102\065\110\075\111\102" +
    "\112\105\131\uff7c\001\002\000\046\005\073\041\051\042" +
    "\uffe6\062\070\066\057\070\uff7c\072\063\073\077\074\101" +
    "\075\uff7c\076\255\100\071\101\104\102\065\110\075\111" +
    "\102\112\105\131\uff7c\001\002\000\010\070\uff7f\075\uff7f" +
    "\131\uff7f\001\002\000\010\070\uff83\075\uff83\131\uff83\001" +
    "\002\000\010\070\uff87\075\uff87\131\uff87\001\002\000\010" +
    "\070\uff88\075\uff88\131\uff88\001\002\000\010\070\uff85\075" +
    "\uff85\131\uff85\001\002\000\010\070\uff7d\075\uff7d\131\uff7d" +
    "\001\002\000\060\005\073\025\171\026\170\027\174\030" +
    "\172\031\173\041\051\042\uffe6\062\070\066\057\070\uff7c" +
    "\072\063\073\077\074\101\075\uff7c\076\255\100\071\101" +
    "\104\102\065\110\075\111\102\112\105\131\uff7c\001\002" +
    "\000\010\070\uff7e\075\uff7e\131\uff7e\001\002\000\010\070" +
    "\uff8e\075\uff8e\131\uff8e\001\002\000\004\005\275\001\002" +
    "\000\072\002\uffeb\004\uffeb\005\uffeb\007\uffeb\011\uffeb\012" +
    "\uffeb\013\uffeb\014\uffeb\015\uffeb\041\uffeb\042\uffeb\043\276" +
    "\062\uffeb\066\uffeb\070\uffeb\072\uffeb\073\uffeb\074\uffeb\075" +
    "\uffeb\076\uffeb\100\uffeb\101\uffeb\102\uffeb\110\uffeb\111\uffeb" +
    "\112\uffeb\113\uffeb\131\uffeb\001\002\000\034\005\126\024" +
    "\131\032\113\044\124\045\112\046\110\047\117\050\123" +
    "\051\122\064\130\100\071\110\075\111\102\001\002\000" +
    "\102\002\uffea\004\uffea\005\uffea\007\uffea\011\uffea\012\uffea" +
    "\013\uffea\014\uffea\015\uffea\025\171\026\170\027\174\030" +
    "\172\031\173\041\uffea\042\uffea\062\uffea\066\uffea\070\uffea" +
    "\072\uffea\073\uffea\074\uffea\075\uffea\076\uffea\100\uffea\101" +
    "\uffea\102\uffea\110\uffea\111\uffea\112\uffea\113\uffea\131\uffea" +
    "\001\002\000\010\070\uff82\075\uff82\131\uff82\001\002\000" +
    "\010\070\uff8a\075\uff8a\131\uff8a\001\002\000\010\070\uff8d" +
    "\075\uff8d\131\uff8d\001\002\000\010\070\uff8b\075\uff8b\131" +
    "\uff8b\001\002\000\010\070\uff84\075\uff84\131\uff84\001\002" +
    "\000\010\070\uff8c\075\uff8c\131\uff8c\001\002\000\004\005" +
    "\307\001\002\000\072\002\uffa8\004\uffa8\005\uffa8\007\uffa8" +
    "\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8\041\uffa8\042" +
    "\uffa8\056\207\062\uffa8\066\uffa8\070\uffa8\072\uffa8\073\uffa8" +
    "\074\uffa8\075\uffa8\076\uffa8\100\uffa8\101\uffa8\102\uffa8\110" +
    "\uffa8\111\uffa8\112\uffa8\113\uffa8\131\uffa8\001\002\000\074" +
    "\002\uffa9\004\uffa9\005\uffa9\007\uffa9\011\uffa9\012\uffa9\013" +
    "\uffa9\014\uffa9\015\uffa9\041\uffa9\042\uffa9\043\311\056\220" +
    "\062\uffa9\066\uffa9\070\uffa9\072\uffa9\073\uffa9\074\uffa9\075" +
    "\uffa9\076\uffa9\100\uffa9\101\uffa9\102\uffa9\110\uffa9\111\uffa9" +
    "\112\uffa9\113\uffa9\131\uffa9\001\002\000\004\060\312\001" +
    "\002\000\036\005\126\024\131\032\113\044\124\045\112" +
    "\046\110\047\117\050\123\051\122\060\320\064\130\100" +
    "\071\110\075\111\102\001\002\000\006\007\331\061\uffa0" +
    "\001\002\000\006\007\uff9a\061\uff9a\001\002\000\006\007" +
    "\323\061\uffa1\001\002\000\004\061\335\001\002\000\064" +
    "\005\uff99\007\uff99\025\171\026\170\027\174\030\172\031" +
    "\173\041\uff99\042\uff99\061\uff99\062\uff99\066\uff99\070\uff99" +
    "\072\uff99\073\uff99\074\uff99\075\uff99\076\uff99\100\uff99\101" +
    "\uff99\102\uff99\110\uff99\111\uff99\112\uff99\131\uff99\001\002" +
    "\000\036\005\126\024\131\032\113\044\124\045\112\046" +
    "\110\047\117\050\123\051\122\060\320\064\130\100\071" +
    "\110\075\111\102\001\002\000\006\007\331\061\334\001" +
    "\002\000\006\007\323\061\324\001\002\000\004\060\325" +
    "\001\002\000\006\007\uff9f\061\uff9f\001\002\000\036\005" +
    "\126\024\131\032\113\044\124\045\112\046\110\047\117" +
    "\050\123\051\122\060\320\064\130\100\071\110\075\111" +
    "\102\001\002\000\006\007\331\061\332\001\002\000\006" +
    "\007\323\061\330\001\002\000\006\007\uff9e\061\uff9e\001" +
    "\002\000\034\005\126\024\131\032\113\044\124\045\112" +
    "\046\110\047\117\050\123\051\122\064\130\100\071\110" +
    "\075\111\102\001\002\000\006\007\uff9c\061\uff9c\001\002" +
    "\000\006\007\uff9b\061\uff9b\001\002\000\006\007\uff9d\061" +
    "\uff9d\001\002\000\070\002\uffa7\004\uffa7\005\uffa7\007\uffa7" +
    "\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\041\uffa7\042" +
    "\uffa7\062\uffa7\066\uffa7\070\uffa7\072\uffa7\073\uffa7\074\uffa7" +
    "\075\uffa7\076\uffa7\100\uffa7\101\uffa7\102\uffa7\110\uffa7\111" +
    "\uffa7\112\uffa7\113\uffa7\131\uffa7\001\002\000\010\070\uff80" +
    "\075\uff80\131\uff80\001\002\000\010\070\uff86\075\uff86\131" +
    "\uff86\001\002\000\004\131\uff3b\001\002\000\004\131\233" +
    "\001\002\000\004\073\343\001\002\000\004\064\344\001" +
    "\002\000\034\005\126\024\131\032\113\044\124\045\112" +
    "\046\110\047\117\050\123\051\122\064\130\100\071\110" +
    "\075\111\102\001\002\000\016\025\171\026\170\027\174" +
    "\030\172\031\173\065\346\001\002\000\046\005\uff3c\041" +
    "\uff3c\042\uff3c\062\uff3c\066\uff3c\070\uff3c\072\uff3c\073\uff3c" +
    "\074\uff3c\075\uff3c\076\uff3c\100\uff3c\101\uff3c\102\uff3c\110" +
    "\uff3c\111\uff3c\112\uff3c\131\uff3c\001\002\000\010\070\uff81" +
    "\075\uff81\131\uff81\001\002\000\010\070\uff89\075\uff89\131" +
    "\uff89\001\002\000\004\131\uff70\001\002\000\034\005\126" +
    "\024\131\032\113\044\124\045\112\046\110\047\117\050" +
    "\123\051\122\064\130\100\071\110\075\111\102\001\002" +
    "\000\016\025\171\026\170\027\174\030\172\031\173\065" +
    "\354\001\002\000\004\130\024\001\002\000\042\005\073" +
    "\041\051\042\uffe6\062\070\066\057\072\063\073\077\074" +
    "\101\076\255\100\071\101\104\102\065\110\075\111\102" +
    "\112\105\131\uff7c\001\002\000\004\131\233\001\002\000" +
    "\046\005\uff3d\041\uff3d\042\uff3d\062\uff3d\066\uff3d\070\uff3d" +
    "\072\uff3d\073\uff3d\074\uff3d\075\uff3d\076\uff3d\100\uff3d\101" +
    "\uff3d\102\uff3d\110\uff3d\111\uff3d\112\uff3d\131\uff3d\001\002" +
    "\000\004\131\uff6c\001\002\000\004\005\362\001\002\000" +
    "\004\065\363\001\002\000\144\002\uff67\004\uff67\005\uff67" +
    "\007\uff67\010\uff67\011\uff67\012\uff67\013\uff67\014\uff67\015" +
    "\uff67\016\uff67\017\uff67\020\uff67\021\uff67\022\uff67\023\uff67" +
    "\025\uff67\026\uff67\027\uff67\030\uff67\031\uff67\033\uff67\034" +
    "\uff67\035\uff67\036\uff67\037\uff67\040\uff67\041\uff67\042\uff67" +
    "\057\uff67\061\uff67\062\uff67\065\uff67\066\uff67\070\uff67\072" +
    "\uff67\073\uff67\074\uff67\075\uff67\076\uff67\100\uff67\101\uff67" +
    "\102\uff67\110\uff67\111\uff67\112\uff67\113\uff67\130\uff67\131" +
    "\uff67\001\002\000\004\131\uff74\001\002\000\034\005\126" +
    "\024\131\032\113\044\124\045\112\046\110\047\117\050" +
    "\123\051\122\064\130\100\071\110\075\111\102\001\002" +
    "\000\034\005\126\024\131\032\113\044\124\045\112\046" +
    "\110\047\117\050\123\051\122\064\130\100\071\110\075" +
    "\111\102\001\002\000\046\005\uffab\041\uffab\042\uffab\062" +
    "\uffab\066\uffab\070\uffab\072\uffab\073\uffab\074\uffab\075\uffab" +
    "\076\uffab\100\uffab\101\uffab\102\uffab\110\uffab\111\uffab\112" +
    "\uffab\131\uffab\001\002\000\006\043\374\056\220\001\002" +
    "\000\034\005\126\024\131\032\113\044\124\045\112\046" +
    "\110\047\117\050\123\051\122\064\130\100\071\110\075" +
    "\111\102\001\002\000\046\005\uffac\041\uffac\042\uffac\062" +
    "\uffac\066\uffac\070\uffac\072\uffac\073\uffac\074\uffac\075\uffac" +
    "\076\uffac\100\uffac\101\uffac\102\uffac\110\uffac\111\uffac\112" +
    "\uffac\131\uffac\001\002\000\060\005\uffae\025\171\026\170" +
    "\027\174\030\172\031\173\041\uffae\042\uffae\062\uffae\066" +
    "\uffae\070\uffae\072\uffae\073\uffae\074\uffae\075\uffae\076\uffae" +
    "\100\uffae\101\uffae\102\uffae\110\uffae\111\uffae\112\uffae\131" +
    "\uffae\001\002\000\034\005\126\024\131\032\113\044\124" +
    "\045\112\046\110\047\117\050\123\051\122\064\130\100" +
    "\071\110\075\111\102\001\002\000\046\005\uff98\041\uff98" +
    "\042\uff98\062\uff98\066\uff98\070\uff98\072\uff98\073\uff98\074" +
    "\uff98\075\uff98\076\uff98\100\uff98\101\uff98\102\uff98\110\uff98" +
    "\111\uff98\112\uff98\131\uff98\001\002\000\060\005\uffaa\025" +
    "\171\026\170\027\174\030\172\031\173\041\uffaa\042\uffaa" +
    "\062\uffaa\066\uffaa\070\uffaa\072\uffaa\073\uffaa\074\uffaa\075" +
    "\uffaa\076\uffaa\100\uffaa\101\uffaa\102\uffaa\110\uffaa\111\uffaa" +
    "\112\uffaa\131\uffaa\001\002\000\060\005\uffad\025\171\026" +
    "\170\027\174\030\172\031\173\041\uffad\042\uffad\062\uffad" +
    "\066\uffad\070\uffad\072\uffad\073\uffad\074\uffad\075\uffad\076" +
    "\uffad\100\uffad\101\uffad\102\uffad\110\uffad\111\uffad\112\uffad" +
    "\131\uffad\001\002\000\004\131\uff75\001\002\000\032\062" +
    "\u010d\114\u010b\115\u0106\116\u0103\117\u010a\120\u0105\121\u0108" +
    "\122\u0109\123\u010e\124\u0104\125\u0102\126\u0107\001\002\000" +
    "\004\007\uff57\001\002\000\004\007\uff5f\001\002\000\004" +
    "\007\uff58\001\002\000\004\007\uff5d\001\002\000\004\007" +
    "\uff60\001\002\000\004\007\uff56\001\002\000\004\007\uff5c" +
    "\001\002\000\004\007\uff5a\001\002\000\004\007\uff5e\001" +
    "\002\000\004\007\uff61\001\002\000\004\007\u010f\001\002" +
    "\000\004\007\uff5b\001\002\000\004\007\uff59\001\002\000" +
    "\030\005\126\044\124\045\112\046\110\047\117\050\123" +
    "\051\122\064\130\100\071\110\075\111\102\001\002\000" +
    "\020\007\u0111\033\142\034\135\035\141\036\146\037\145" +
    "\040\136\001\002\000\030\005\126\044\124\045\112\046" +
    "\110\047\117\050\123\051\122\064\130\100\071\110\075" +
    "\111\102\001\002\000\020\007\u0113\033\142\034\135\035" +
    "\141\036\146\037\145\040\136\001\002\000\030\005\126" +
    "\044\124\045\112\046\110\047\117\050\123\051\122\064" +
    "\130\100\071\110\075\111\102\001\002\000\020\033\142" +
    "\034\135\035\141\036\146\037\145\040\136\065\u0115\001" +
    "\002\000\144\002\uff6a\004\uff6a\005\uff6a\007\uff6a\010\uff6a" +
    "\011\uff6a\012\uff6a\013\uff6a\014\uff6a\015\uff6a\016\uff6a\017" +
    "\uff6a\020\uff6a\021\uff6a\022\uff6a\023\uff6a\025\uff6a\026\uff6a" +
    "\027\uff6a\030\uff6a\031\uff6a\033\uff6a\034\uff6a\035\uff6a\036" +
    "\uff6a\037\uff6a\040\uff6a\041\uff6a\042\uff6a\057\uff6a\061\uff6a" +
    "\062\uff6a\065\uff6a\066\uff6a\070\uff6a\072\uff6a\073\uff6a\074" +
    "\uff6a\075\uff6a\076\uff6a\100\uff6a\101\uff6a\102\uff6a\110\uff6a" +
    "\111\uff6a\112\uff6a\113\uff6a\130\uff6a\131\uff6a\001\002\000" +
    "\034\005\126\024\131\032\113\044\124\045\112\046\110" +
    "\047\117\050\123\051\122\064\130\100\071\110\075\111" +
    "\102\001\002\000\016\025\171\026\170\027\174\030\172" +
    "\031\173\065\u0118\001\002\000\004\130\024\001\002\000" +
    "\042\005\073\041\051\042\uffe6\062\070\066\057\072\063" +
    "\073\077\074\101\076\255\100\071\101\104\102\065\110" +
    "\075\111\102\112\105\131\uff7c\001\002\000\004\131\233" +
    "\001\002\000\052\005\uff4c\041\uff4c\042\uff4c\062\uff4c\063" +
    "\u011e\066\uff4c\070\uff4c\072\uff4c\073\uff4c\074\uff4c\075\uff4c" +
    "\076\uff4c\100\uff4c\101\uff4c\102\uff4c\110\uff4c\111\uff4c\112" +
    "\uff4c\127\u011d\131\uff4c\001\002\000\046\005\uff4f\041\uff4f" +
    "\042\uff4f\062\uff4f\066\uff4f\070\uff4f\072\uff4f\073\uff4f\074" +
    "\uff4f\075\uff4f\076\uff4f\100\uff4f\101\uff4f\102\uff4f\110\uff4f" +
    "\111\uff4f\112\uff4f\131\uff4f\001\002\000\004\064\u0122\001" +
    "\002\000\004\130\024\001\002\000\042\005\073\041\051" +
    "\042\uffe6\062\070\066\057\072\063\073\077\074\101\076" +
    "\255\100\071\101\104\102\065\110\075\111\102\112\105" +
    "\131\uff7c\001\002\000\004\131\233\001\002\000\046\005" +
    "\uff4d\041\uff4d\042\uff4d\062\uff4d\066\uff4d\070\uff4d\072\uff4d" +
    "\073\uff4d\074\uff4d\075\uff4d\076\uff4d\100\uff4d\101\uff4d\102" +
    "\uff4d\110\uff4d\111\uff4d\112\uff4d\131\uff4d\001\002\000\034" +
    "\005\126\024\131\032\113\044\124\045\112\046\110\047" +
    "\117\050\123\051\122\064\130\100\071\110\075\111\102" +
    "\001\002\000\016\025\171\026\170\027\174\030\172\031" +
    "\173\065\u0124\001\002\000\004\130\024\001\002\000\042" +
    "\005\073\041\051\042\uffe6\062\070\066\057\072\063\073" +
    "\077\074\101\076\255\100\071\101\104\102\065\110\075" +
    "\111\102\112\105\131\uff7c\001\002\000\004\131\233\001" +
    "\002\000\052\005\uff4c\041\uff4c\042\uff4c\062\uff4c\063\u011e" +
    "\066\uff4c\070\uff4c\072\uff4c\073\uff4c\074\uff4c\075\uff4c\076" +
    "\uff4c\100\uff4c\101\uff4c\102\uff4c\110\uff4c\111\uff4c\112\uff4c" +
    "\127\u011d\131\uff4c\001\002\000\046\005\uff4e\041\uff4e\042" +
    "\uff4e\062\uff4e\066\uff4e\070\uff4e\072\uff4e\073\uff4e\074\uff4e" +
    "\075\uff4e\076\uff4e\100\uff4e\101\uff4e\102\uff4e\110\uff4e\111" +
    "\uff4e\112\uff4e\131\uff4e\001\002\000\004\131\uff72\001\002" +
    "\000\004\131\uff7b\001\002\000\004\005\u012c\001\002\000" +
    "\004\007\u012d\001\002\000\014\103\u012f\104\u0132\105\u012e" +
    "\106\u0133\107\u0130\001\002\000\004\065\uff53\001\002\000" +
    "\004\065\uff55\001\002\000\004\065\uff51\001\002\000\004" +
    "\065\u0134\001\002\000\004\065\uff54\001\002\000\004\065" +
    "\uff52\001\002\000\046\005\uff68\041\uff68\042\uff68\062\uff68" +
    "\066\uff68\070\uff68\072\uff68\073\uff68\074\uff68\075\uff68\076" +
    "\uff68\100\uff68\101\uff68\102\uff68\110\uff68\111\uff68\112\uff68" +
    "\131\uff68\001\002\000\004\131\uff6f\001\002\000\006\005" +
    "\u0138\042\u0137\001\002\000\014\011\030\012\032\013\027" +
    "\014\025\015\034\001\002\000\004\043\u014a\001\002\000" +
    "\004\010\u013a\001\002\000\034\005\126\024\131\032\113" +
    "\044\124\045\112\046\110\047\117\050\123\051\122\064" +
    "\130\100\071\110\075\111\102\001\002\000\004\010\u013d" +
    "\001\002\000\016\010\uff42\025\171\026\170\027\174\030" +
    "\172\031\173\001\002\000\004\005\u013e\001\002\000\012" +
    "\043\u0146\052\u0144\053\u0147\054\u0145\001\002\000\004\065" +
    "\u0140\001\002\000\004\130\024\001\002\000\042\005\073" +
    "\041\051\042\uffe6\062\070\066\057\072\063\073\077\074" +
    "\101\076\255\100\071\101\104\102\065\110\075\111\102" +
    "\112\105\131\uff7c\001\002\000\004\131\233\001\002\000" +
    "\046\005\uff45\041\uff45\042\uff45\062\uff45\066\uff45\070\uff45" +
    "\072\uff45\073\uff45\074\uff45\075\uff45\076\uff45\100\uff45\101" +
    "\uff45\102\uff45\110\uff45\111\uff45\112\uff45\131\uff45\001\002" +
    "\000\030\005\126\044\124\045\112\046\110\047\117\050" +
    "\123\051\122\064\130\100\071\110\075\111\102\001\002" +
    "\000\004\065\uff3e\001\002\000\030\005\126\044\124\045" +
    "\112\046\110\047\117\050\123\051\122\064\130\100\071" +
    "\110\075\111\102\001\002\000\004\065\uff3f\001\002\000" +
    "\020\033\142\034\135\035\141\036\146\037\145\040\136" +
    "\065\uff41\001\002\000\020\033\142\034\135\035\141\036" +
    "\146\037\145\040\136\065\uff40\001\002\000\030\005\126" +
    "\044\124\045\112\046\110\047\117\050\123\051\122\064" +
    "\130\100\071\110\075\111\102\001\002\000\020\010\uff43" +
    "\033\142\034\135\035\141\036\146\037\145\040\136\001" +
    "\002\000\004\005\u014d\001\002\000\004\043\u014e\001\002" +
    "\000\030\005\126\044\124\045\112\046\110\047\117\050" +
    "\123\051\122\064\130\100\071\110\075\111\102\001\002" +
    "\000\020\010\uff44\033\142\034\135\035\141\036\146\037" +
    "\145\040\136\001\002\000\004\131\uff77\001\002\000\004" +
    "\131\uff7a\001\002\000\004\131\uff78\001\002\000\004\005" +
    "\u0154\001\002\000\004\065\u0155\001\002\000\004\130\024" +
    "\001\002\000\010\067\u0159\071\u0157\131\uff48\001\002\000" +
    "\004\130\024\001\002\000\004\131\233\001\002\000\030" +
    "\005\126\044\124\045\112\046\110\047\117\050\123\051" +
    "\122\064\130\100\071\110\075\111\102\001\002\000\020" +
    "\033\142\034\135\035\141\036\146\037\145\040\136\130" +
    "\024\001\002\000\044\005\073\041\051\042\uffe6\062\070" +
    "\066\057\070\uff7c\072\063\073\077\074\101\076\255\100" +
    "\071\101\104\102\065\110\075\111\102\112\105\131\uff7c" +
    "\001\002\000\006\070\u015e\131\uff46\001\002\000\004\131" +
    "\233\001\002\000\004\131\uff47\001\002\000\010\067\u0159" +
    "\071\u0157\131\uff48\001\002\000\004\131\uff4a\001\002\000" +
    "\046\005\uff4b\041\uff4b\042\uff4b\062\uff4b\066\uff4b\070\uff4b" +
    "\072\uff4b\073\uff4b\074\uff4b\075\uff4b\076\uff4b\100\uff4b\101" +
    "\uff4b\102\uff4b\110\uff4b\111\uff4b\112\uff4b\131\uff4b\001\002" +
    "\000\042\005\073\041\051\042\uffe6\062\070\066\057\072" +
    "\063\073\077\074\101\076\255\100\071\101\104\102\065" +
    "\110\075\111\102\112\105\131\uff7c\001\002\000\004\131" +
    "\233\001\002\000\004\131\uff49\001\002\000\004\131\uff71" +
    "\001\002\000\004\131\uff79\001\002\000\004\131\uff6d\001" +
    "\002\000\004\131\uff73\001\002\000\004\131\uff6e\001\002" +
    "\000\004\131\uff76\001\002\000\004\005\u017a\001\002\000" +
    "\004\064\u016d\001\002\000\020\007\uff8f\011\030\012\032" +
    "\013\027\014\025\015\034\065\uff8f\001\002\000\006\007" +
    "\u0173\065\u0174\001\002\000\006\007\uff92\065\uff92\001\002" +
    "\000\006\007\uff93\065\uff93\001\002\000\004\005\u0172\001" +
    "\002\000\006\007\uff90\065\uff90\001\002\000\014\011\030" +
    "\012\032\013\027\014\025\015\034\001\002\000\004\130" +
    "\024\001\002\000\040\005\073\041\051\042\uffe6\062\070" +
    "\066\057\072\063\073\077\074\101\100\071\101\104\102" +
    "\065\110\075\111\102\112\105\131\uff6b\001\002\000\004" +
    "\131\233\001\002\000\032\002\uff94\004\uff94\005\uff94\011" +
    "\uff94\012\uff94\013\uff94\014\uff94\015\uff94\041\uff94\042\uff94" +
    "\113\uff94\131\uff94\001\002\000\004\005\u0179\001\002\000" +
    "\006\007\uff91\065\uff91\001\002\000\004\064\u017b\001\002" +
    "\000\020\007\uff8f\011\030\012\032\013\027\014\025\015" +
    "\034\065\uff8f\001\002\000\006\007\u0173\065\u017d\001\002" +
    "\000\004\130\024\001\002\000\042\005\073\041\051\042" +
    "\uffe6\062\070\066\057\072\063\073\077\074\101\076\255" +
    "\100\071\101\104\102\065\110\075\111\102\112\105\131" +
    "\uff7c\001\002\000\004\131\233\001\002\000\032\002\uff96" +
    "\004\uff96\005\uff96\011\uff96\012\uff96\013\uff96\014\uff96\015" +
    "\uff96\041\uff96\042\uff96\113\uff96\131\uff96\001\002\000\020" +
    "\007\uff8f\011\030\012\032\013\027\014\025\015\034\065" +
    "\uff8f\001\002\000\006\007\u0173\065\u0183\001\002\000\004" +
    "\130\024\001\002\000\040\005\073\041\051\042\uffe6\062" +
    "\070\066\057\072\063\073\077\074\101\100\071\101\104" +
    "\102\065\110\075\111\102\112\105\131\uff6b\001\002\000" +
    "\004\131\233\001\002\000\032\002\uff95\004\uff95\005\uff95" +
    "\011\uff95\012\uff95\013\uff95\014\uff95\015\uff95\041\uff95\042" +
    "\uff95\113\uff95\131\uff95\001\002\000\010\002\ufff1\004\ufff1" +
    "\131\ufff1\001\002\000\006\002\ufff6\004\ufff6\001\002\000" +
    "\006\002\ufffb\004\ufffb\001\002\000\010\002\uffef\004\uffef" +
    "\131\uffef\001\002\000\004\064\u018c\001\002\000\020\007" +
    "\uff8f\011\030\012\032\013\027\014\025\015\034\065\uff8f" +
    "\001\002\000\006\007\u0173\065\u018e\001\002\000\004\130" +
    "\024\001\002\000\042\005\073\041\051\042\uffe6\062\070" +
    "\066\057\072\063\073\077\074\101\076\255\100\071\101" +
    "\104\102\065\110\075\111\102\112\105\131\uff7c\001\002" +
    "\000\004\131\233\001\002\000\032\002\uff97\004\uff97\005" +
    "\uff97\011\uff97\012\uff97\013\uff97\014\uff97\015\uff97\041\uff97" +
    "\042\uff97\113\uff97\131\uff97\001\002\000\014\011\030\012" +
    "\032\013\027\014\025\015\034\001\002\000\006\005\u0194" +
    "\055\u0195\001\002\000\072\002\uffe8\004\uffe8\005\uffe8\007" +
    "\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\041\uffe8" +
    "\042\uffe8\043\u019c\062\uffe8\066\uffe8\070\uffe8\072\uffe8\073" +
    "\uffe8\074\uffe8\075\uffe8\076\uffe8\100\uffe8\101\uffe8\102\uffe8" +
    "\110\uffe8\111\uffe8\112\uffe8\113\uffe8\131\uffe8\001\002\000" +
    "\004\005\u0196\001\002\000\072\002\uffa5\004\uffa5\005\uffa5" +
    "\007\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\041" +
    "\uffa5\042\uffa5\056\207\062\uffa5\066\uffa5\070\uffa5\072\uffa5" +
    "\073\uffa5\074\uffa5\075\uffa5\076\uffa5\100\uffa5\101\uffa5\102" +
    "\uffa5\110\uffa5\111\uffa5\112\uffa5\113\uffa5\131\uffa5\001\002" +
    "\000\074\002\uffa4\004\uffa4\005\uffa4\007\uffa4\011\uffa4\012" +
    "\uffa4\013\uffa4\014\uffa4\015\uffa4\041\uffa4\042\uffa4\043\u0198" +
    "\056\220\062\uffa4\066\uffa4\070\uffa4\072\uffa4\073\uffa4\074" +
    "\uffa4\075\uffa4\076\uffa4\100\uffa4\101\uffa4\102\uffa4\110\uffa4" +
    "\111\uffa4\112\uffa4\113\uffa4\131\uffa4\001\002\000\004\060" +
    "\u0199\001\002\000\036\005\126\024\131\032\113\044\124" +
    "\045\112\046\110\047\117\050\123\051\122\060\320\064" +
    "\130\100\071\110\075\111\102\001\002\000\004\061\u019b" +
    "\001\002\000\070\002\uffa6\004\uffa6\005\uffa6\007\uffa6\011" +
    "\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6\041\uffa6\042\uffa6" +
    "\062\uffa6\066\uffa6\070\uffa6\072\uffa6\073\uffa6\074\uffa6\075" +
    "\uffa6\076\uffa6\100\uffa6\101\uffa6\102\uffa6\110\uffa6\111\uffa6" +
    "\112\uffa6\113\uffa6\131\uffa6\001\002\000\034\005\126\024" +
    "\131\032\113\044\124\045\112\046\110\047\117\050\123" +
    "\051\122\064\130\100\071\110\075\111\102\001\002\000" +
    "\102\002\uffe9\004\uffe9\005\uffe9\007\uffe9\011\uffe9\012\uffe9" +
    "\013\uffe9\014\uffe9\015\uffe9\025\171\026\170\027\174\030" +
    "\172\031\173\041\uffe9\042\uffe9\062\uffe9\066\uffe9\070\uffe9" +
    "\072\uffe9\073\uffe9\074\uffe9\075\uffe9\076\uffe9\100\uffe9\101" +
    "\uffe9\102\uffe9\110\uffe9\111\uffe9\112\uffe9\113\uffe9\131\uffe9" +
    "\001\002\000\010\002\uffee\004\uffee\131\uffee\001\002\000" +
    "\010\002\ufff0\004\ufff0\131\ufff0\001\002\000\010\002\uffed" +
    "\004\uffed\131\uffed\001\002\000\006\007\ufff2\130\ufff2\001" +
    "\002\000\004\005\u01a3\001\002\000\006\007\ufff3\130\ufff3" +
    "\001\002\000\004\002\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01a2\000\006\002\004\003\003\001\001\000\006\004" +
    "\014\005\012\001\001\000\002\001\001\000\004\003\006" +
    "\001\001\000\002\001\001\000\004\003\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\u01a3\005\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\101" +
    "\016\001\001\000\006\006\017\007\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\063\022\001\001\000" +
    "\022\010\037\011\040\012\034\016\035\021\030\035\036" +
    "\036\032\045\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\010\u019f\011\040\012\034\016\035\021\030" +
    "\035\036\036\032\045\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\010\u019e\011\040\012\034\016\035" +
    "\021\030\035\036\036\032\045\025\001\001\000\002\001" +
    "\001\000\022\010\u019d\011\040\012\034\016\035\021\030" +
    "\035\036\036\032\045\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\010\u0189\011\040" +
    "\012\034\016\035\021\030\035\036\036\032\045\025\001" +
    "\001\000\004\065\u0187\001\001\000\022\010\u0186\011\040" +
    "\012\034\016\035\021\030\035\036\036\032\045\025\001" +
    "\001\000\002\001\001\000\004\016\u016a\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\063\046\001\001\000" +
    "\046\011\065\012\034\015\060\021\054\025\047\027\071" +
    "\031\057\032\073\033\052\034\066\037\055\040\077\041" +
    "\063\042\051\043\053\044\075\046\061\067\102\001\001" +
    "\000\046\011\065\012\034\015\060\021\054\025\047\027" +
    "\071\031\057\032\073\033\052\034\066\037\055\040\077" +
    "\041\063\042\051\043\053\044\075\046\061\067\u0169\001" +
    "\001\000\002\001\001\000\046\011\065\012\034\015\060" +
    "\021\054\025\047\027\071\031\057\032\073\033\052\034" +
    "\066\037\055\040\077\041\063\042\051\043\053\044\075" +
    "\046\061\067\u0168\001\001\000\046\011\065\012\034\015" +
    "\060\021\054\025\047\027\071\031\057\032\073\033\052" +
    "\034\066\037\055\040\077\041\063\042\051\043\053\044" +
    "\075\046\061\067\u0167\001\001\000\046\011\065\012\034" +
    "\015\060\021\054\025\047\027\071\031\057\032\073\033" +
    "\052\034\066\037\055\040\077\041\063\042\051\043\053" +
    "\044\075\046\061\067\u0166\001\001\000\046\011\065\012" +
    "\034\015\060\021\054\025\047\027\071\031\057\032\073" +
    "\033\052\034\066\037\055\040\077\041\063\042\051\043" +
    "\053\044\075\046\061\067\u0165\001\001\000\046\011\065" +
    "\012\034\015\060\021\054\025\047\027\071\031\057\032" +
    "\073\033\052\034\066\037\055\040\077\041\063\042\051" +
    "\043\053\044\075\046\061\067\u0164\001\001\000\002\001" +
    "\001\000\046\011\065\012\034\015\060\021\054\025\047" +
    "\027\071\031\057\032\073\033\052\034\066\037\055\040" +
    "\077\041\063\042\051\043\053\044\075\046\061\067\u0151" +
    "\001\001\000\046\011\065\012\034\015\060\021\054\025" +
    "\047\027\071\031\057\032\073\033\052\034\066\037\055" +
    "\040\077\041\063\042\051\043\053\044\075\046\061\067" +
    "\u0150\001\001\000\046\011\065\012\034\015\060\021\054" +
    "\025\047\027\071\031\057\032\073\033\052\034\066\037" +
    "\055\040\077\041\063\042\051\043\053\044\075\046\061" +
    "\067\u014f\001\001\000\002\001\001\000\046\011\065\012" +
    "\034\015\060\021\054\025\047\027\071\031\057\032\073" +
    "\033\052\034\066\037\055\040\077\041\063\042\051\043" +
    "\053\044\075\046\061\067\u0134\001\001\000\002\001\001" +
    "\000\046\011\065\012\034\015\060\021\054\025\047\027" +
    "\071\031\057\032\073\033\052\034\066\037\055\040\077" +
    "\041\063\042\051\043\053\044\075\046\061\067\u0129\001" +
    "\001\000\046\011\065\012\034\015\060\021\054\025\047" +
    "\027\071\031\057\032\073\033\052\034\066\037\055\040" +
    "\077\041\063\042\051\043\053\044\075\046\061\067\u0128" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\011" +
    "\065\012\034\015\060\021\054\025\047\027\071\031\057" +
    "\032\073\033\052\034\066\037\055\040\077\041\063\042" +
    "\051\043\053\044\075\046\061\067\377\001\001\000\004" +
    "\022\367\001\001\000\046\011\065\012\034\015\060\021" +
    "\054\025\047\027\071\031\057\032\073\033\052\034\066" +
    "\037\055\040\077\041\063\042\051\043\053\044\075\046" +
    "\061\067\363\001\001\000\002\001\001\000\046\011\065" +
    "\012\034\015\060\021\054\025\047\027\071\031\057\032" +
    "\073\033\052\034\066\037\055\040\077\041\063\042\051" +
    "\043\053\044\075\046\061\067\357\001\001\000\002\001" +
    "\001\000\046\011\065\012\034\015\060\021\054\025\047" +
    "\027\071\031\057\032\073\033\052\034\066\037\055\040" +
    "\077\041\063\042\051\043\053\044\075\046\061\067\350" +
    "\001\001\000\004\063\237\001\001\000\002\001\001\000" +
    "\004\064\233\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\014\117\017\124\020\132\037\115\042\110\043" +
    "\113\046\120\047\133\060\106\062\131\076\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\204\001" +
    "\001\000\002\001\001\000\022\014\117\020\202\037\115" +
    "\042\110\043\113\046\120\047\133\076\114\001\001\000" +
    "\022\014\117\020\201\037\115\042\110\043\113\046\120" +
    "\047\133\076\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\014\117\020\163\037\115" +
    "\042\110\043\113\046\120\047\133\076\114\001\001\000" +
    "\022\014\117\020\162\037\115\042\110\043\113\046\120" +
    "\047\133\076\114\001\001\000\022\014\117\020\161\037" +
    "\115\042\110\043\113\046\120\047\133\076\114\001\001" +
    "\000\022\014\117\020\160\037\115\042\110\043\113\046" +
    "\120\047\133\076\114\001\001\000\022\014\117\020\157" +
    "\037\115\042\110\043\113\046\120\047\133\076\114\001" +
    "\001\000\022\014\117\020\156\037\115\042\110\043\113" +
    "\046\120\047\133\076\114\001\001\000\022\014\117\020" +
    "\155\037\115\042\110\043\113\046\120\047\133\076\114" +
    "\001\001\000\022\014\117\020\154\037\115\042\110\043" +
    "\113\046\120\047\133\076\114\001\001\000\022\014\117" +
    "\020\153\037\115\042\110\043\113\046\120\047\133\076" +
    "\114\001\001\000\022\014\117\020\152\037\115\042\110" +
    "\043\113\046\120\047\133\076\114\001\001\000\022\014" +
    "\117\020\151\037\115\042\110\043\113\046\120\047\133" +
    "\076\114\001\001\000\022\014\117\020\150\037\115\042" +
    "\110\043\113\046\120\047\133\076\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\014\117\017\166" +
    "\020\132\037\115\042\110\043\113\046\120\047\133\060" +
    "\106\076\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\014\117\017\200\020\132\037\115\042\110\043" +
    "\113\046\120\047\133\060\106\076\114\001\001\000\026" +
    "\014\117\017\177\020\132\037\115\042\110\043\113\046" +
    "\120\047\133\060\106\076\114\001\001\000\026\014\117" +
    "\017\176\020\132\037\115\042\110\043\113\046\120\047" +
    "\133\060\106\076\114\001\001\000\026\014\117\017\175" +
    "\020\132\037\115\042\110\043\113\046\120\047\133\060" +
    "\106\076\114\001\001\000\026\014\117\017\174\020\132" +
    "\037\115\042\110\043\113\046\120\047\133\060\106\076" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\014\117\020\213\037\115\042\110\043\113\046" +
    "\120\047\133\050\212\051\211\076\114\001\001\000\022" +
    "\014\117\020\207\037\115\042\110\043\113\046\120\047" +
    "\133\076\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\014\117\020\215\037\115\042\110\043\113\046\120" +
    "\047\133\076\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\014\117\020\220\037\115\042\110\043\113" +
    "\046\120\047\133\076\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\014\117\017\223\020\132\037\115" +
    "\042\110\043\113\046\120\047\133\060\106\076\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\014\117" +
    "\020\226\037\115\042\110\043\113\046\120\047\133\076" +
    "\114\001\001\000\002\001\001\000\022\014\117\020\230" +
    "\037\115\042\110\043\113\046\120\047\133\076\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\014\117\020\235\037\115\042" +
    "\110\043\113\046\120\047\133\076\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\011\253\012\034\015" +
    "\250\021\245\025\240\027\256\031\247\032\257\033\243" +
    "\034\255\037\246\040\260\041\252\042\241\043\244\044" +
    "\261\046\251\066\242\001\001\000\046\011\253\012\034" +
    "\015\250\021\245\025\240\027\256\031\247\032\257\033" +
    "\243\034\255\037\246\040\260\041\252\042\241\043\244" +
    "\044\261\046\251\066\347\001\001\000\046\011\253\012" +
    "\034\015\250\021\245\025\240\027\256\031\247\032\257" +
    "\033\243\034\255\037\246\040\260\041\252\042\241\043" +
    "\244\044\261\046\251\066\346\001\001\000\004\071\340" +
    "\001\001\000\046\011\253\012\034\015\250\021\245\025" +
    "\240\027\256\031\247\032\257\033\243\034\255\037\246" +
    "\040\260\041\252\042\241\043\244\044\261\046\251\066" +
    "\336\001\001\000\046\011\253\012\034\015\250\021\245" +
    "\025\240\027\256\031\247\032\257\033\243\034\255\037" +
    "\246\040\260\041\252\042\241\043\244\044\261\046\251" +
    "\066\335\001\001\000\046\011\253\012\034\015\250\021" +
    "\245\025\240\027\256\031\247\032\257\033\243\034\255" +
    "\037\246\040\260\041\252\042\241\043\244\044\261\046" +
    "\251\066\304\001\001\000\046\011\253\012\034\015\250" +
    "\021\245\025\240\027\256\031\247\032\257\033\243\034" +
    "\255\037\246\040\260\041\252\042\241\043\244\044\261" +
    "\046\251\066\303\001\001\000\046\011\253\012\034\015" +
    "\250\021\245\025\240\027\256\031\247\032\257\033\243" +
    "\034\255\037\246\040\260\041\252\042\241\043\244\044" +
    "\261\046\251\066\302\001\001\000\046\011\253\012\034" +
    "\015\250\021\245\025\240\027\256\031\247\032\257\033" +
    "\243\034\255\037\246\040\260\041\252\042\241\043\244" +
    "\044\261\046\251\066\301\001\001\000\046\011\253\012" +
    "\034\015\250\021\245\025\240\027\256\031\247\032\257" +
    "\033\243\034\255\037\246\040\260\041\252\042\241\043" +
    "\244\044\261\046\251\066\300\001\001\000\046\011\253" +
    "\012\034\015\250\021\245\025\240\027\256\031\247\032" +
    "\257\033\243\034\255\037\246\040\260\041\252\042\241" +
    "\043\244\044\261\046\251\066\277\001\001\000\046\011" +
    "\253\012\034\015\250\021\245\025\240\027\256\031\247" +
    "\032\257\033\243\034\255\037\246\040\260\041\252\042" +
    "\241\043\244\044\261\046\251\066\272\001\001\000\026" +
    "\014\117\017\270\020\132\037\115\042\110\043\113\046" +
    "\120\047\133\060\106\076\114\001\001\000\046\011\253" +
    "\012\034\015\250\021\245\025\240\027\256\031\247\032" +
    "\257\033\243\034\255\037\246\040\260\041\252\042\241" +
    "\043\244\044\261\046\251\066\266\001\001\000\046\011" +
    "\253\012\034\015\250\021\245\025\240\027\256\031\247" +
    "\032\257\033\243\034\255\037\246\040\260\041\252\042" +
    "\241\043\244\044\261\046\251\066\265\001\001\000\046" +
    "\011\253\012\034\015\250\021\245\025\240\027\256\031" +
    "\247\032\257\033\243\034\255\037\246\040\260\041\252" +
    "\042\241\043\244\044\261\046\251\066\264\001\001\000" +
    "\046\011\253\012\034\015\250\021\245\025\240\027\256" +
    "\031\247\032\257\033\243\034\255\037\246\040\260\041" +
    "\252\042\241\043\244\044\261\046\251\066\263\001\001" +
    "\000\046\011\253\012\034\015\250\021\245\025\240\027" +
    "\256\031\247\032\257\033\243\034\255\037\246\040\260" +
    "\041\252\042\241\043\244\044\261\046\251\066\262\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\011\253\012\034\015\250\021\245\025\240\027\256" +
    "\031\247\032\257\033\243\034\255\037\246\040\260\041" +
    "\252\042\241\043\244\044\261\046\251\066\271\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\014\117\017\276\020\132\037\115" +
    "\042\110\043\113\046\120\047\133\060\106\076\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\307\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\014\117\017" +
    "\316\020\132\023\315\024\312\037\115\042\110\043\113" +
    "\046\120\047\133\060\106\061\313\075\314\076\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\014\117\017" +
    "\316\020\132\024\320\037\115\042\110\043\113\046\120" +
    "\047\133\060\106\061\313\075\321\076\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\014\117\017\316\020\132\024\325\037" +
    "\115\042\110\043\113\046\120\047\133\060\106\061\313" +
    "\075\326\076\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\014\117\017\316\020\132" +
    "\037\115\042\110\043\113\046\120\047\133\060\106\061" +
    "\332\076\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\064\341\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\014\117\017" +
    "\344\020\132\037\115\042\110\043\113\046\120\047\133" +
    "\060\106\076\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\014\117\017\352\020\132\037\115\042\110\043" +
    "\113\046\120\047\133\060\106\076\114\001\001\000\002" +
    "\001\001\000\004\063\354\001\001\000\046\011\253\012" +
    "\034\015\250\021\245\025\240\027\256\031\247\032\257" +
    "\033\243\034\255\037\246\040\260\041\252\042\241\043" +
    "\244\044\261\046\251\066\355\001\001\000\004\064\356" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\014\117\017\376\020\132\037\115\042\110\043" +
    "\113\046\120\047\133\060\106\076\114\001\001\000\026" +
    "\014\117\017\375\020\132\037\115\042\110\043\113\046" +
    "\120\047\133\060\106\076\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\014\117\017\372\020\132\037" +
    "\115\042\110\043\113\046\120\047\133\060\106\076\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\014" +
    "\117\017\316\020\132\037\115\042\110\043\113\046\120" +
    "\047\133\060\106\061\374\076\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\056\u010b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\014\117\020\u010f\037" +
    "\115\042\110\043\113\046\120\047\133\076\114\001\001" +
    "\000\002\001\001\000\022\014\117\020\u0111\037\115\042" +
    "\110\043\113\046\120\047\133\076\114\001\001\000\002" +
    "\001\001\000\022\014\117\020\u0113\037\115\042\110\043" +
    "\113\046\120\047\133\076\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\014\117\017\u0116\020\132\037" +
    "\115\042\110\043\113\046\120\047\133\060\106\076\114" +
    "\001\001\000\002\001\001\000\004\063\u0118\001\001\000" +
    "\046\011\253\012\034\015\250\021\245\025\240\027\256" +
    "\031\247\032\257\033\243\034\255\037\246\040\260\041" +
    "\252\042\241\043\244\044\261\046\251\066\u0119\001\001" +
    "\000\004\064\u011a\001\001\000\004\026\u011b\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\063\u011e\001\001" +
    "\000\046\011\253\012\034\015\250\021\245\025\240\027" +
    "\256\031\247\032\257\033\243\034\255\037\246\040\260" +
    "\041\252\042\241\043\244\044\261\046\251\066\u011f\001" +
    "\001\000\004\064\u0120\001\001\000\002\001\001\000\026" +
    "\014\117\017\u0122\020\132\037\115\042\110\043\113\046" +
    "\120\047\133\060\106\076\114\001\001\000\002\001\001" +
    "\000\004\063\u0124\001\001\000\046\011\253\012\034\015" +
    "\250\021\245\025\240\027\256\031\247\032\257\033\243" +
    "\034\255\037\246\040\260\041\252\042\241\043\244\044" +
    "\261\046\251\066\u0125\001\001\000\004\064\u0126\001\001" +
    "\000\004\026\u0127\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\057\u0130\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\052\u0138\001\001\000\004\016\u014b\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\014\117\017\u013b\020" +
    "\132\037\115\042\110\043\113\046\120\047\133\053\u013a" +
    "\060\106\076\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\u013e\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\063\u0140\001\001\000\046\011\253\012" +
    "\034\015\250\021\245\025\240\027\256\031\247\032\257" +
    "\033\243\034\255\037\246\040\260\041\252\042\241\043" +
    "\244\044\261\046\251\066\u0141\001\001\000\004\064\u0142" +
    "\001\001\000\002\001\001\000\022\014\117\020\u0148\037" +
    "\115\042\110\043\113\046\120\047\133\076\114\001\001" +
    "\000\002\001\001\000\022\014\117\020\u0147\037\115\042" +
    "\110\043\113\046\120\047\133\076\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\014" +
    "\117\020\u014a\037\115\042\110\043\113\046\120\047\133" +
    "\076\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\014\117\020\u014e\037\115\042\110" +
    "\043\113\046\120\047\133\076\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\063\u0155\001" +
    "\001\000\004\072\u0157\001\001\000\004\063\u0161\001\001" +
    "\000\004\064\u0160\001\001\000\022\014\117\020\u0159\037" +
    "\115\042\110\043\113\046\120\047\133\076\114\001\001" +
    "\000\004\063\u015a\001\001\000\046\011\253\012\034\015" +
    "\250\021\245\025\240\027\256\031\247\032\257\033\243" +
    "\034\255\037\246\040\260\041\252\042\241\043\244\044" +
    "\261\046\251\066\u015b\001\001\000\004\070\u015c\001\001" +
    "\000\004\064\u015e\001\001\000\002\001\001\000\004\072" +
    "\u015f\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\011\253\012\034\015\250\021\245\025\240\027\256\031" +
    "\247\032\257\033\243\034\255\037\246\040\260\041\252" +
    "\042\241\043\244\044\261\046\251\066\u0162\001\001\000" +
    "\004\064\u0163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\016\u0170\055\u016d\073\u016f\074\u016e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\u0177\001" +
    "\001\000\004\063\u0174\001\001\000\046\011\065\012\034" +
    "\015\060\021\054\025\047\027\071\031\057\032\073\033" +
    "\052\034\066\037\055\040\077\041\063\042\051\043\053" +
    "\044\075\046\061\067\u0175\001\001\000\004\064\u0176\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\016\u0170\055\u017b\073\u016f\074" +
    "\u016e\001\001\000\002\001\001\000\004\063\u017d\001\001" +
    "\000\046\011\253\012\034\015\250\021\245\025\240\027" +
    "\256\031\247\032\257\033\243\034\255\037\246\040\260" +
    "\041\252\042\241\043\244\044\261\046\251\066\u017e\001" +
    "\001\000\004\064\u017f\001\001\000\002\001\001\000\012" +
    "\016\u0170\055\u0181\073\u016f\074\u016e\001\001\000\002\001" +
    "\001\000\004\063\u0183\001\001\000\046\011\065\012\034" +
    "\015\060\021\054\025\047\027\071\031\057\032\073\033" +
    "\052\034\066\037\055\040\077\041\063\042\051\043\053" +
    "\044\075\046\061\067\u0184\001\001\000\004\064\u0185\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\016\u0170\055\u018c\073\u016f\074\u016e\001\001\000\002" +
    "\001\001\000\004\063\u018e\001\001\000\046\011\253\012" +
    "\034\015\250\021\245\025\240\027\256\031\247\032\257" +
    "\033\243\034\255\037\246\040\260\041\252\042\241\043" +
    "\244\044\261\046\251\066\u018f\001\001\000\004\064\u0190" +
    "\001\001\000\002\001\001\000\004\016\u0192\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\u0196\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\014\117\017\316\020\132\023\u0199\024\312\037\115" +
    "\042\110\043\113\046\120\047\133\060\106\061\313\075" +
    "\314\076\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\014\117\017\u019c\020\132\037\115\042\110\043" +
    "\113\046\120\047\133\060\106\076\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //codigo
    //public ArrayList<ErrorSintactico> listaErrores = new ArrayList<>();

    public void setAccion(String tipo, String mensaje, String accion){
    }

	private Symbol s;
	public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void syntax_error(Symbol s){
        String message = s.toString();
        StringBuilder m = new StringBuilder("Error: ");
        String cadena =  (String) s.value;
        int columna = s.left+1;
        int linea = s.right+1;
        agregarError("Sintactico",cadena,"No se esperaba un token tipo <"+s.value+">", linea, columna);
    }

	public void agregarError(String tipo, String cadena, String descripcion, int linea, int columna){
        System.out.println("Tipo: "+tipo+"\tCadena: "+cadena+", descripcion: "+descripcion+", Linea: "+linea+", Columna: "+columna);
    }


	public void unrecovered_syntax_error(Symbol cur_token){
        
        System.out.println("No se pudo recuperar y seguir analizando, no se encontraron mas tokens.");
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTS$actions {


	public TablaSimbolos tablaSimbolos = new TablaSimbolos();
    public ManejadorTablaSimbolos manejadorTablaSimbolos = new ManejadorTablaSimbolos(tablaSimbolos);

  private final AnalizadorSintacticoTS parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTS$actions(AnalizadorSintacticoTS parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTS$do_action(
    int                        CUP$AnalizadorSintacticoTS$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTS$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTS$stack,
    int                        CUP$AnalizadorSintacticoTS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTS$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // especiales_q_retornan ::= struct_longitud 
            {
              Object RESULT =null;
		 RESULT = "ENTERO"; 
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("especiales_q_retornan",60, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // especiales_q_retornan ::= struct_sumarizar 
            {
              Object RESULT =null;
		 RESULT = "CADENA"; 
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("especiales_q_retornan",60, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // especiales_q_retornan ::= struct_reproducir 
            {
              Object RESULT =null;
		 RESULT = "ENTERO";
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("especiales_q_retornan",60, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // state_continuar ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("state_continuar",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // state_continuar ::= CONTINUAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("state_continuar",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // struct_hacer ::= HACER st_ind code_funcion state_continuar st_ded MIENTRAS PA_A struct_operador_logico PA_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_hacer",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // struct_mientras ::= MIENTRAS PA_A struct_operador_logico PA_C st_ind code_funcion st_ded 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_mientras",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // incremento_para ::= IDENTIFICADOR MENOS_MENOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("incremento_para",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // incremento_para ::= IDENTIFICADOR MAS_MAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("incremento_para",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // incremento_para ::= IDENTIFICADOR MAS_IGUAL valor_operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("incremento_para",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // incremento_para ::= IDENTIFICADOR IGUAL valor_operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("incremento_para",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // condicion_para ::= struct_operador_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("condicion_para",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // para_asig_var ::= IDENTIFICADOR IGUAL valor_operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("para_asig_var",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // para_asig_var ::= VAR tipo_dato IDENTIFICADOR IGUAL valor_operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("para_asig_var",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // struct_para ::= PARA PA_A para_asig_var PUNTO_COMA condicion_para PUNTO_COMA incremento_para PA_C st_ind code_funcion st_ded 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_para",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // caso_salir ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("caso_salir",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // caso_salir ::= SALIR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("caso_salir",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // struct_caso ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_caso",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // struct_caso ::= DEFAULT st_ind code_funcion st_ded 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_caso",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // struct_caso ::= CASO valor_operacion st_ind code_funcion caso_salir st_ded struct_caso 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_caso",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // struct_switch ::= SWITCH PA_A IDENTIFICADOR PA_C st_ind struct_caso st_ded 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_switch",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // struct_sino ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_sino",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // struct_sino ::= SINO st_ind code_funcion st_ded 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_sino",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // struct_sino ::= SINO_SI PA_A struct_operador_logico PA_C st_ind code_funcion st_ded struct_sino 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_sino",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // struct_si ::= SI PA_A struct_operador_logico PA_C st_ind code_funcion st_ded struct_sino 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_si",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // struct_principal ::= PRINCIPAL PA_A PA_C st_ind code_metodo st_ded 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_principal",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // tipo_orden ::= PRIMOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("tipo_orden",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // tipo_orden ::= IMPARES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("tipo_orden",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // tipo_orden ::= PARES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("tipo_orden",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // tipo_orden ::= DESCENDENTE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("tipo_orden",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // tipo_orden ::= ASCENDENTE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("tipo_orden",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // notas ::= LA_S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // notas ::= SOL_S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // notas ::= FA_S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // notas ::= RE_S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // notas ::= DO_S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // notas ::= SI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // notas ::= LA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // notas ::= SOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // notas ::= FA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // notas ::= MI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // notas ::= RE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // notas ::= DO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // mensajes ::= struct_operador_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("mensajes",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // mensajes ::= mensajes MAS struct_operador_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("mensajes",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // struct_mensaje ::= MENSAJE PA_A PA_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_mensaje",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // struct_mensaje ::= MENSAJE PA_A mensajes PA_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_mensaje",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // struct_longitud ::= LONGITUD PA_A valor_operacion PA_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_longitud",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // struct_sumarizar ::= SUMARIZAR PA_A IDENTIFICADOR PA_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_sumarizar",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // struct_ordenar ::= ORDENAR PA_A IDENTIFICADOR COMA tipo_orden PA_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_ordenar",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // struct_esperar ::= ESPERAR PA_A valor_operacion COMA valor_operacion PA_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_esperar",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // struct_reproducir ::= REPRODUCIR PA_A notas COMA valor_operacion COMA valor_operacion COMA valor_operacion PA_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_reproducir",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // code_metodo ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // code_metodo ::= struct_mensaje code_metodo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // code_metodo ::= struct_longitud code_metodo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // code_metodo ::= struct_sumarizar code_metodo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // code_metodo ::= struct_ordenar code_metodo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // code_metodo ::= struct_esperar code_metodo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // code_metodo ::= struct_reproducir code_metodo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // code_metodo ::= struct_hacer code_metodo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // code_metodo ::= struct_mientras code_metodo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // code_metodo ::= struct_para code_metodo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // code_metodo ::= struct_switch code_metodo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // code_metodo ::= struct_si code_metodo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // code_metodo ::= strunt_llamada_funcion code_metodo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // code_metodo ::= struct_asig_arreglo code_metodo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // code_metodo ::= struct_declaracion_array code_metodo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // code_metodo ::= struc_asig_var code_metodo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // code_metodo ::= struct_declaracion_var code_metodo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // code_funcion ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // code_funcion ::= RETORNAR error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // code_funcion ::= RETORNAR struct_operador_logico code_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // code_funcion ::= struct_mensaje code_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // code_funcion ::= struct_longitud code_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // code_funcion ::= struct_sumarizar code_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // code_funcion ::= struct_ordenar code_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // code_funcion ::= struct_esperar code_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // code_funcion ::= struct_reproducir code_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // code_funcion ::= struct_hacer code_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // code_funcion ::= struct_mientras code_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // code_funcion ::= struct_para code_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // code_funcion ::= struct_switch code_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // code_funcion ::= struct_si code_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // code_funcion ::= strunt_llamada_funcion code_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // code_funcion ::= struct_asig_arreglo code_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // code_funcion ::= struct_declaracion_array code_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // code_funcion ::= struc_asig_var code_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // code_funcion ::= struct_declaracion_var code_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // param_vacio ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("param_vacio",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // params_lleno ::= tipo_dato IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("params_lleno",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // params_lleno ::= struct_parametros COMA tipo_dato IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("params_lleno",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // struct_parametros ::= param_vacio 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_parametros",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // struct_parametros ::= params_lleno 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_parametros",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // struct_procedimiento ::= KEEP IDENTIFICADOR PA_A struct_parametros PA_C st_ind code_metodo st_ded 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_procedimiento",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // struct_procedimiento ::= IDENTIFICADOR PA_A struct_parametros PA_C st_ind code_metodo st_ded 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_procedimiento",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // struct_funcion ::= KEEP tipo_dato IDENTIFICADOR PA_A struct_parametros PA_C st_ind code_funcion st_ded 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_funcion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // struct_funcion ::= tipo_dato IDENTIFICADOR PA_A struct_parametros PA_C st_ind code_funcion st_ded 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_funcion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // struct_asig_arreglo ::= IDENTIFICADOR dim_arreglo IGUAL tipo_valor_op_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_asig_arreglo",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // tipo_valor_op_logico ::= struct_operador_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("tipo_valor_op_logico",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // valores_array ::= tipo_valor_op_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valores_array",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // valores_array ::= valores_array COMA tipo_valor_op_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valores_array",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // valores_array_mas_dim ::= valores_array_mas_dim COMA LLAVE_A valores_array LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valores_array_mas_dim",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // valores_array_mas_dim ::= LLAVE_A valores_array LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valores_array_mas_dim",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // valores_array_mas_dim ::= valores_array_mas_dim COMA LLAVE_A valores_array_mas_dim LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valores_array_mas_dim",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // valores_array_mas_dim ::= LLAVE_A valores_array_mas_dim LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valores_array_mas_dim",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // valor_arreglo ::= valores_array 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valor_arreglo",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // valor_arreglo ::= valores_array_mas_dim 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valor_arreglo",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // dim_arreglo ::= CORCHETE_A valor_operacion CORCHETE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("dim_arreglo",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // dim_arreglo ::= dim_arreglo CORCHETE_A valor_operacion CORCHETE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("dim_arreglo",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // struct_declaracion_array ::= keep_state VAR tipo_dato ARREGLO IDENTIFICADOR dim_arreglo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // struct_declaracion_array ::= keep_state VAR tipo_dato ARREGLO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // struct_declaracion_array ::= keep_state VAR tipo_dato ARREGLO IDENTIFICADOR dim_arreglo IGUAL LLAVE_A valor_arreglo LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // struct_declaracion_array ::= struct_declaracion_array COMA IDENTIFICADOR dim_arreglo IGUAL LLAVE_A valor_arreglo LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // struct_declaracion_array ::= struct_declaracion_array COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // struct_declaracion_array ::= struct_declaracion_array COMA IDENTIFICADOR dim_arreglo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // struc_asig_var ::= IDENTIFICADOR error struct_operador_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struc_asig_var",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // struc_asig_var ::= IDENTIFICADOR MENOS_MENOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struc_asig_var",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // struc_asig_var ::= IDENTIFICADOR MAS_MAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struc_asig_var",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // struc_asig_var ::= IDENTIFICADOR MAS_IGUAL struct_operador_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struc_asig_var",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // struc_asig_var ::= IDENTIFICADOR IGUAL struct_operador_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struc_asig_var",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // valor_operacion ::= valor 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		RESULT = r;
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // valor_operacion ::= PA_A valor_operacion PA_C 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;
		RESULT = r;
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // valor_operacion ::= valor_operacion POTENCIA valor_operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // valor_operacion ::= valor_operacion MODULO valor_operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // valor_operacion ::= valor_operacion DIVISION valor_operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // valor_operacion ::= valor_operacion POR valor_operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // valor_operacion ::= valor_operacion MENOS valor_operacion 
            {
              Object RESULT =null;
		RESULT = "BOOLEAN";
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // valor_operacion ::= valor_operacion MAS valor_operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // state_op_racional ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("state_op_racional",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // state_op_racional ::= MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("state_op_racional",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // state_op_racional ::= MENOR_Q 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("state_op_racional",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // state_op_racional ::= MAYOR_Q 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("state_op_racional",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // state_op_racional ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("state_op_racional",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // state_op_racional ::= IGUAL_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("state_op_racional",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // struct_operador_relacional ::= IS_NULL valor_operacion 
            {
              Object RESULT =null;
		RESULT = "BOOLEAN";
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // struct_operador_relacional ::= valor_operacion MENOR_IGUAL valor_operacion 
            {
              Object RESULT =null;
		RESULT = "BOOLEAN";
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // struct_operador_relacional ::= valor_operacion MAYOR_IGUAL valor_operacion 
            {
              Object RESULT =null;
		RESULT = "BOOLEAN";
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // struct_operador_relacional ::= valor_operacion MENOR_Q valor_operacion 
            {
              Object RESULT =null;
		RESULT = "BOOLEAN";
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // struct_operador_relacional ::= valor_operacion MAYOR_Q valor_operacion 
            {
              Object RESULT =null;
		RESULT = "BOOLEAN";
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // struct_operador_relacional ::= valor_operacion DIFERENTE valor_operacion 
            {
              Object RESULT =null;
		RESULT = "BOOLEAN";
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // struct_operador_relacional ::= valor_operacion IGUAL_IGUAL valor_operacion 
            {
              Object RESULT =null;
		RESULT = "BOOLEAN";
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // state_op_logicos ::= NAND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("state_op_logicos",61, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // state_op_logicos ::= AND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("state_op_logicos",61, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // state_op_logicos ::= XOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("state_op_logicos",61, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // state_op_logicos ::= NOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("state_op_logicos",61, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // state_op_logicos ::= OR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("state_op_logicos",61, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // struct_operador_logico ::= valor_operacion 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		RESULT = r;
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // struct_operador_logico ::= struct_operador_relacional 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		RESULT = r;
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // struct_operador_logico ::= NOT PA_A struct_operador_logico PA_C 
            {
              Object RESULT =null;
		RESULT = "BOOLEAN";
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // struct_operador_logico ::= struct_operador_logico NAND struct_operador_logico 
            {
              Object RESULT =null;
		RESULT = "BOOLEAN";
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // struct_operador_logico ::= struct_operador_logico AND struct_operador_logico 
            {
              Object RESULT =null;
		RESULT = "BOOLEAN";
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // struct_operador_logico ::= struct_operador_logico XOR struct_operador_logico 
            {
              Object RESULT =null;
		RESULT = "BOOLEAN";
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // struct_operador_logico ::= struct_operador_logico NOR struct_operador_logico 
            {
              Object RESULT =null;
		RESULT = "BOOLEAN";
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // struct_operador_logico ::= struct_operador_logico OR struct_operador_logico 
            {
              Object RESULT =null;
		RESULT = "BOOLEAN";
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipo_dato ::= BOOLEAN 
            {
              String RESULT =null;
		RESULT = "BOOLEAN";
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("tipo_dato",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipo_dato ::= CADENA_RSV 
            {
              String RESULT =null;
		RESULT = "CADENA";
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("tipo_dato",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipo_dato ::= CARACTER_RSV 
            {
              String RESULT =null;
		RESULT = "CARACTER";
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("tipo_dato",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tipo_dato ::= ENTERO 
            {
              String RESULT =null;
		RESULT = "ENTERO";
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("tipo_dato",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tipo_dato ::= DOBLE 
            {
              String RESULT =null;
		RESULT = "DOBLE";
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("tipo_dato",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // struct_llamada_arreglo ::= IDENTIFICADOR dim_arreglo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_llamada_arreglo",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // state_params ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("state_params",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // state_params ::= parametros 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("state_params",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametros ::= valor_operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("parametros",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parametros ::= parametros COMA valor_operacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("parametros",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // strunt_llamada_funcion ::= IDENTIFICADOR PA_A state_params PA_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("strunt_llamada_funcion",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // valor ::= FALSE 
            {
              Object RESULT =null;
		RESULT = "BOOLEAN";
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // valor ::= TRUE 
            {
              Object RESULT =null;
		RESULT = "BOOLEAN";
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // valor ::= CARACTER 
            {
              Object RESULT =null;
		RESULT = "CARACTER";
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // valor ::= CADENA 
            {
              Object RESULT =null;
		RESULT = "CADENA";
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // valor ::= DECIMAL 
            {
              Object RESULT =null;
		RESULT = "DOBLE";
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // valor ::= NUMERO 
            {
              Object RESULT =null;
		RESULT = "ENTERO";
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // valor ::= especiales_q_retornan 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		RESULT = r;
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // valor ::= struct_llamada_arreglo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // valor ::= strunt_llamada_funcion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // valor ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // keep_state ::= 
            {
              Boolean RESULT =null;
		RESULT = false;
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("keep_state",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // keep_state ::= KEEP 
            {
              Boolean RESULT =null;
		RESULT = true;
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("keep_state",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // struct_declaracion_var ::= keep_state VAR tipo_dato IDENTIFICADOR 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).right;
		Boolean k = (Boolean)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		
				Simbolo s = new Simbolo(a,t,manejadorTablaSimbolos.ambitoFlag,k);
				if(manejadorTablaSimbolos.isExistSimbolo(s)){
					manejadorTablaSimbolos.agregarSimbolo(s);
				}else{
					parser.agregarError("Semantico",a,"Error: Ya existe un simbolo con el mismo nombre dentro del ambito", aright+1, aleft+1);
				}
				RESULT = s;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // struct_declaracion_var ::= keep_state VAR tipo_dato IDENTIFICADOR IGUAL struct_operador_logico 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)).right;
		Boolean k = (Boolean)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).value;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // struct_declaracion_var ::= struct_declaracion_var COMA IDENTIFICADOR IGUAL struct_operador_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // struct_declaracion_var ::= struct_declaracion_var COMA IDENTIFICADOR 
            {
              Object RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).right;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;
		
				Simbolo sAux =(Simbolo) ss;
				Simbolo s = new Simbolo(a,sAux.getTipo(),manejadorTablaSimbolos.ambitoFlag,sAux.isIsKeep());
				if(manejadorTablaSimbolos.isExistSimbolo(s)){
					manejadorTablaSimbolos.agregarSimbolo(s);
				}else{
					parser.agregarError("Semantico",a,"Error: Ya existe un simbolo con el mismo nombre dentro del ambito", aright+1, aleft+1);
				}
				RESULT = s;
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // struc_code ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struc_code",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // struc_code ::= struct_principal struc_code 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struc_code",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // struc_code ::= struct_procedimiento struc_code 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struc_code",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // struc_code ::= struct_funcion struc_code 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struc_code",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // struc_code ::= struct_declaracion_array struc_code 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struc_code",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // struc_code ::= struct_declaracion_var struc_code 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struc_code",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // struct_extiende ::= EXTIENDE IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_extiende",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // struct_extiende ::= struct_extiende COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_extiende",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // extiende_state ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("extiende_state",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // extiende_state ::= struct_extiende 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("extiende_state",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // struct_pista ::= PISTA IDENTIFICADOR NT$0 extiende_state st_ind struc_code st_final 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-5)).value;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("struct_pista",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$0 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.peek()).value;

				Simbolo s = new Simbolo(a,"PISTA",manejadorTablaSimbolos.ambitoFlag);
				if(manejadorTablaSimbolos.isExistSimbolo(s)){
					manejadorTablaSimbolos.agregarSimbolo(s);
				}else{
					parser.agregarError("Semantico",a,"Error: Ya existe un simbolo con el mismo nombre dentro del ambito", aright+1, aleft+1);
				}
	
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("NT$0",63, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // codigo ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigo ::= struct_pista codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // st_final ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("st_final",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // st_final ::= DEDENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("st_final",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // st_ded ::= DEDENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("st_ded",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // st_ind ::= INDENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("st_ind",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // blanco ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("blanco",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // blanco ::= INDENT blanco DEDENT blanco 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("blanco",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= blanco codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.elementAt(CUP$AnalizadorSintacticoTS$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTS$parser.done_parsing();
          return CUP$AnalizadorSintacticoTS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

