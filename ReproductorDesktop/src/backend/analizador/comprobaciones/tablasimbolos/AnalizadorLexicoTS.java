/* The following code was generated by JFlex 1.4.3 on 30/8/21 14:15 */

package backend.analizador.comprobaciones.tablasimbolos;
import backend.analizador.ErrorLexico;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 30/8/21 14:15 from the specification file
 * <tt>LexicoTS.jflex</tt>
 */
public class AnalizadorLexicoTS implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  1, 11,  2,  0,  0,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    12, 26, 10, 31,  0, 24, 27, 71, 13, 14,  5, 22, 19,  4, 70, 23, 
     9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  0, 20,  3, 21,  6,  0, 
     7, 56, 55, 52, 29, 45, 36,  8, 63, 65,  8, 49, 40, 34,  8, 64, 
    41,  8, 32, 38, 68,  8, 50,  8,  8,  8,  8, 15,  0, 16, 25, 69, 
     0, 37, 54, 53, 48, 33, 60, 57, 59, 35, 67, 49, 39, 62, 47, 30, 
    42,  8, 51, 43, 44, 61, 50, 58, 46,  8, 66, 17, 28, 18,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  8,  0,  0,  0,  0,  0,  0,  0,  8,  0,  0,  0,  8,  0,  0, 
     0,  8,  0,  8,  0,  0,  0,  0,  0,  0,  8,  0,  0,  0,  0,  0, 
     0,  0,  0,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\1\1\10\1\1\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\2\1\27\6\1\1\1\0\1\27\1\30\1\0"+
    "\1\31\2\0\1\32\1\1\1\33\1\34\1\35\1\36"+
    "\1\37\2\0\1\40\1\41\1\42\1\43\2\6\1\44"+
    "\4\6\1\45\1\6\1\46\3\6\1\47\4\6\1\50"+
    "\20\6\4\0\1\51\1\0\1\52\1\1\1\53\1\54"+
    "\1\55\4\6\1\56\10\6\1\57\3\6\1\60\5\6"+
    "\1\61\7\6\1\62\6\6\2\63\1\0\1\64\1\51"+
    "\1\10\17\6\1\65\1\66\6\6\1\67\2\6\1\70"+
    "\1\71\1\72\2\6\1\73\4\6\1\64\1\0\1\74"+
    "\13\6\1\75\2\6\1\0\1\76\3\6\1\77\1\100"+
    "\7\6\1\101\7\6\1\102\5\6\1\0\1\103\3\6"+
    "\1\104\2\6\1\105\3\6\1\106\1\107\2\6\1\110"+
    "\1\6\1\111\1\6\1\112\1\6\1\113\1\114\6\6"+
    "\1\115\2\6\1\116\1\117\1\120\2\6\1\121\3\6"+
    "\1\122\3\6\1\123\1\124\1\125\1\6\1\126\1\127"+
    "\1\130";

  private static int [] zzUnpackAction() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\u0120\0\110\0\u0168\0\u01b0"+
    "\0\u01f8\0\u0240\0\u0288\0\u02d0\0\110\0\110\0\110\0\110"+
    "\0\110\0\110\0\110\0\110\0\u0318\0\u0360\0\110\0\110"+
    "\0\110\0\u03a8\0\u03f0\0\u0438\0\u0480\0\u04c8\0\u0510\0\u0558"+
    "\0\u05a0\0\u05e8\0\u0630\0\u0678\0\u06c0\0\u0708\0\u0750\0\u0798"+
    "\0\u07e0\0\u0828\0\u0870\0\u08b8\0\u0900\0\u0948\0\u0990\0\u09d8"+
    "\0\u0a20\0\u0a68\0\u0ab0\0\u0af8\0\u0b40\0\110\0\110\0\u0b88"+
    "\0\110\0\u0bd0\0\u0240\0\110\0\u0c18\0\110\0\110\0\110"+
    "\0\110\0\110\0\u0c60\0\u0ca8\0\110\0\110\0\110\0\u0cf0"+
    "\0\u0d38\0\u0d80\0\u0dc8\0\u0e10\0\u0e58\0\u0ea0\0\u0ee8\0\u0f30"+
    "\0\u0f78\0\u0fc0\0\u1008\0\u1050\0\u1098\0\u10e0\0\u1128\0\u1170"+
    "\0\u11b8\0\u1200\0\u1248\0\u1290\0\u12d8\0\u1320\0\u1368\0\u13b0"+
    "\0\u13f8\0\u1440\0\u1488\0\u14d0\0\u1518\0\u1560\0\u15a8\0\u15f0"+
    "\0\u1638\0\u1680\0\u0f30\0\u16c8\0\u1710\0\u1758\0\u17a0\0\110"+
    "\0\u17e8\0\u0bd0\0\u1830\0\110\0\110\0\110\0\u1878\0\u18c0"+
    "\0\u1908\0\u1950\0\110\0\u1998\0\u19e0\0\u1a28\0\u1a70\0\u1ab8"+
    "\0\u1b00\0\u1b48\0\u1b90\0\110\0\u1bd8\0\u1c20\0\u1c68\0\u1cb0"+
    "\0\u1cf8\0\u1d40\0\u1d88\0\u1dd0\0\u1e18\0\110\0\u1e60\0\u1ea8"+
    "\0\u1ef0\0\u1f38\0\u1f80\0\u1fc8\0\u2010\0\u01b0\0\u2058\0\u20a0"+
    "\0\u20e8\0\u2130\0\u2178\0\u21c0\0\110\0\u16c8\0\u2208\0\u1758"+
    "\0\u2250\0\u2298\0\u22e0\0\u2328\0\u2370\0\u23b8\0\u2400\0\u2448"+
    "\0\u2490\0\u24d8\0\u2520\0\u2568\0\u25b0\0\u25f8\0\u2640\0\u2688"+
    "\0\u26d0\0\110\0\u2718\0\u2760\0\u27a8\0\u27f0\0\u2838\0\u2880"+
    "\0\u28c8\0\u01b0\0\u2910\0\u2958\0\u01b0\0\u01b0\0\u01b0\0\u29a0"+
    "\0\u29e8\0\u01b0\0\u2a30\0\u2a78\0\u2ac0\0\u2b08\0\110\0\u2250"+
    "\0\u01b0\0\u2b50\0\u2b98\0\u2be0\0\u2c28\0\u2c70\0\u2cb8\0\u2d00"+
    "\0\u2d48\0\u2d90\0\u2dd8\0\u2e20\0\u01b0\0\u2e68\0\u2eb0\0\u2ef8"+
    "\0\u01b0\0\u2f40\0\u2f88\0\u2fd0\0\u01b0\0\u01b0\0\u3018\0\u3060"+
    "\0\u30a8\0\u30f0\0\u3138\0\u3180\0\u31c8\0\u01b0\0\u3210\0\u3258"+
    "\0\u32a0\0\u32e8\0\u3330\0\u3378\0\u33c0\0\u01b0\0\u3408\0\u3450"+
    "\0\u3498\0\u34e0\0\u3528\0\u3570\0\u01b0\0\u35b8\0\u3600\0\u3648"+
    "\0\u01b0\0\u3690\0\u36d8\0\u01b0\0\u3720\0\u3768\0\u37b0\0\u01b0"+
    "\0\u01b0\0\u37f8\0\u3840\0\u01b0\0\u3888\0\u01b0\0\u38d0\0\u01b0"+
    "\0\u3918\0\u01b0\0\110\0\u3960\0\u39a8\0\u39f0\0\u3a38\0\u3a80"+
    "\0\u3ac8\0\u01b0\0\u3b10\0\u3b58\0\u01b0\0\u01b0\0\u01b0\0\u3ba0"+
    "\0\u3be8\0\u01b0\0\u3c30\0\u3c78\0\u3cc0\0\u01b0\0\u3d08\0\u3d50"+
    "\0\u3d98\0\u01b0\0\u01b0\0\u01b0\0\u3de0\0\u01b0\0\u01b0\0\u01b0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\2\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\2\50\1\51\1\52\1\40\2\10\1\53\1\54\1\55"+
    "\1\56\2\57\2\60\1\44\2\10\1\61\1\62\1\10"+
    "\1\63\1\61\1\36\1\42\2\10\1\52\2\2\1\64"+
    "\111\0\2\3\11\0\1\3\77\0\1\65\20\0\1\66"+
    "\66\0\1\67\111\0\1\70\16\0\1\71\72\0\2\10"+
    "\23\0\2\10\1\0\46\10\13\0\1\11\74\0\1\72"+
    "\1\0\12\73\1\74\75\73\13\0\1\13\75\0\2\3"+
    "\11\0\1\75\120\0\1\76\107\0\1\77\1\100\106\0"+
    "\1\101\4\0\1\102\1\103\1\104\106\0\1\105\1\106"+
    "\107\0\1\107\63\0\2\10\23\0\1\10\1\110\1\0"+
    "\1\10\1\111\44\10\12\0\2\10\23\0\2\10\1\0"+
    "\23\10\1\112\22\10\12\0\2\10\23\0\2\10\1\0"+
    "\1\10\1\113\44\10\12\0\2\10\23\0\2\10\1\0"+
    "\13\10\1\114\2\10\1\115\1\116\26\10\12\0\2\10"+
    "\23\0\2\10\1\0\1\10\1\117\1\10\1\120\42\10"+
    "\12\0\2\10\23\0\2\10\1\0\36\10\1\121\7\10"+
    "\12\0\2\10\23\0\2\10\1\0\5\10\1\122\40\10"+
    "\12\0\2\10\23\0\2\10\1\0\13\10\1\123\7\10"+
    "\1\124\22\10\12\0\2\10\23\0\1\10\1\125\1\0"+
    "\3\10\1\126\1\10\1\127\24\10\1\130\2\10\1\131"+
    "\10\10\12\0\2\10\23\0\1\10\1\132\1\0\46\10"+
    "\12\0\2\10\23\0\1\10\1\132\1\0\5\10\1\133"+
    "\40\10\12\0\2\10\23\0\2\10\1\0\3\10\1\134"+
    "\1\10\1\135\15\10\1\136\22\10\12\0\2\10\23\0"+
    "\2\10\1\0\3\10\1\126\1\10\1\127\24\10\1\130"+
    "\2\10\1\131\10\10\12\0\2\10\23\0\2\10\1\0"+
    "\23\10\1\137\22\10\12\0\2\10\23\0\1\10\1\140"+
    "\1\0\1\10\1\111\44\10\12\0\2\10\23\0\2\10"+
    "\1\0\1\10\1\141\44\10\12\0\2\10\23\0\1\10"+
    "\1\142\1\0\1\10\1\143\3\10\1\144\40\10\12\0"+
    "\2\10\23\0\2\10\1\0\1\10\1\145\44\10\12\0"+
    "\2\10\23\0\1\10\1\146\1\0\5\10\1\147\40\10"+
    "\12\0\2\10\23\0\1\10\1\150\1\0\46\10\12\0"+
    "\2\10\23\0\2\10\1\0\5\10\1\151\40\10\12\0"+
    "\2\10\23\0\2\10\1\0\5\10\1\152\40\10\12\0"+
    "\2\10\23\0\2\10\1\0\1\10\1\117\1\10\1\153"+
    "\42\10\6\0\2\154\1\0\3\154\15\0\2\154\1\0"+
    "\5\154\1\155\47\154\1\0\4\156\1\157\1\0\102\156"+
    "\2\70\1\160\7\70\1\161\75\70\11\0\1\162\77\0"+
    "\2\3\11\0\1\163\126\0\1\164\110\0\1\165\63\0"+
    "\2\10\23\0\2\10\1\166\26\10\1\167\17\10\12\0"+
    "\2\10\23\0\2\10\1\0\13\10\1\170\20\10\1\171"+
    "\11\10\12\0\2\10\23\0\2\10\1\0\20\10\1\172"+
    "\25\10\12\0\2\10\23\0\2\10\1\173\12\10\1\174"+
    "\1\10\1\175\31\10\12\0\2\10\23\0\2\10\1\0"+
    "\12\10\1\176\33\10\12\0\2\10\23\0\2\10\1\0"+
    "\14\10\1\177\31\10\12\0\2\10\23\0\2\10\1\0"+
    "\14\10\1\200\31\10\12\0\2\10\23\0\2\10\1\0"+
    "\17\10\1\201\26\10\12\0\2\10\23\0\2\10\1\0"+
    "\1\10\1\202\44\10\12\0\2\10\23\0\2\10\1\0"+
    "\12\10\1\203\33\10\12\0\2\10\23\0\2\10\1\204"+
    "\7\10\1\205\36\10\12\0\2\10\23\0\2\10\1\0"+
    "\25\10\1\206\20\10\12\0\2\10\23\0\2\10\1\0"+
    "\23\10\1\207\22\10\12\0\2\10\23\0\2\10\1\0"+
    "\7\10\1\210\36\10\12\0\2\10\23\0\2\10\1\0"+
    "\17\10\1\211\26\10\12\0\2\10\23\0\2\10\1\0"+
    "\7\10\1\212\36\10\12\0\2\10\23\0\2\10\1\0"+
    "\3\10\1\213\42\10\12\0\2\10\23\0\2\10\1\0"+
    "\36\10\1\214\7\10\12\0\2\10\23\0\2\10\1\0"+
    "\17\10\1\215\26\10\12\0\2\10\23\0\2\10\1\216"+
    "\46\10\12\0\2\10\23\0\2\10\1\0\13\10\1\217"+
    "\32\10\12\0\2\10\23\0\2\10\1\0\23\10\1\220"+
    "\22\10\12\0\2\10\23\0\2\10\1\0\3\10\1\221"+
    "\42\10\12\0\2\10\23\0\2\10\1\0\35\10\1\222"+
    "\10\10\12\0\2\10\23\0\2\10\1\0\26\10\1\167"+
    "\17\10\12\0\2\10\23\0\2\10\1\0\1\10\1\223"+
    "\44\10\12\0\2\10\23\0\2\10\1\0\3\10\1\224"+
    "\42\10\12\0\2\10\23\0\2\10\1\0\23\10\1\225"+
    "\22\10\12\0\2\10\23\0\2\10\1\0\23\10\1\226"+
    "\22\10\12\0\2\10\23\0\2\10\1\0\12\10\1\174"+
    "\1\10\1\175\31\10\12\0\2\10\23\0\2\10\1\0"+
    "\17\10\1\227\26\10\12\0\2\10\23\0\2\10\1\0"+
    "\13\10\1\230\4\10\1\231\2\10\1\232\22\10\12\0"+
    "\2\10\23\0\1\10\1\233\1\0\46\10\12\0\2\10"+
    "\23\0\2\10\1\0\25\10\1\234\20\10\12\0\2\10"+
    "\23\0\2\10\1\0\7\10\1\205\36\10\111\0\1\235"+
    "\37\0\1\154\14\0\1\154\2\0\1\154\3\0\1\154"+
    "\23\0\1\236\4\156\1\237\107\156\1\237\1\156\1\240"+
    "\101\156\2\161\1\241\105\161\1\0\2\3\11\0\1\242"+
    "\103\0\2\10\23\0\2\10\1\0\7\10\1\243\36\10"+
    "\12\0\2\10\23\0\2\10\1\0\25\10\1\244\20\10"+
    "\12\0\2\10\23\0\2\10\1\0\5\10\1\245\40\10"+
    "\12\0\2\10\23\0\2\10\1\0\1\10\1\246\44\10"+
    "\12\0\2\10\23\0\2\10\1\0\23\10\1\247\22\10"+
    "\12\0\2\10\23\0\1\10\1\250\1\0\46\10\12\0"+
    "\2\10\23\0\2\10\1\0\1\10\1\251\44\10\12\0"+
    "\2\10\23\0\2\10\1\0\3\10\1\252\42\10\12\0"+
    "\2\10\23\0\2\10\1\0\1\10\1\253\44\10\12\0"+
    "\2\10\23\0\2\10\1\0\13\10\1\254\32\10\12\0"+
    "\2\10\23\0\2\10\1\0\17\10\1\255\26\10\12\0"+
    "\2\10\23\0\2\10\1\0\5\10\1\256\40\10\12\0"+
    "\2\10\23\0\2\10\1\0\13\10\1\257\32\10\12\0"+
    "\2\10\23\0\2\10\1\0\1\10\1\260\44\10\12\0"+
    "\2\10\23\0\2\10\1\0\1\10\1\261\44\10\12\0"+
    "\2\10\23\0\2\10\1\262\46\10\12\0\2\10\23\0"+
    "\1\10\1\263\1\0\46\10\12\0\2\10\23\0\2\10"+
    "\1\0\3\10\1\264\42\10\12\0\2\10\23\0\2\10"+
    "\1\0\14\10\1\265\31\10\12\0\2\10\23\0\2\10"+
    "\1\0\5\10\1\266\40\10\12\0\2\10\23\0\2\10"+
    "\1\0\31\10\1\267\14\10\12\0\2\10\23\0\2\10"+
    "\1\0\14\10\1\270\31\10\12\0\2\10\23\0\2\10"+
    "\1\0\1\10\1\271\3\10\1\272\40\10\12\0\2\10"+
    "\23\0\2\10\1\0\17\10\1\273\16\10\1\274\7\10"+
    "\12\0\2\10\23\0\2\10\1\0\1\10\1\275\44\10"+
    "\12\0\2\10\23\0\2\10\1\0\12\10\1\276\33\10"+
    "\12\0\2\10\23\0\2\10\1\0\20\10\1\277\25\10"+
    "\12\0\2\10\23\0\2\10\1\0\20\10\1\300\25\10"+
    "\12\0\2\10\23\0\2\10\1\0\14\10\1\301\31\10"+
    "\12\0\2\10\23\0\1\10\1\302\1\0\46\10\12\0"+
    "\2\10\23\0\2\10\1\0\1\10\1\303\44\10\12\0"+
    "\2\10\23\0\2\10\1\0\5\10\1\304\40\10\12\0"+
    "\2\10\23\0\2\10\1\0\7\10\1\305\36\10\12\0"+
    "\2\10\23\0\2\10\1\0\1\10\1\306\44\10\2\0"+
    "\4\156\1\237\1\156\1\307\101\156\12\310\1\70\75\310"+
    "\1\0\2\3\11\0\1\14\103\0\2\10\23\0\2\10"+
    "\1\0\1\10\1\311\44\10\12\0\2\10\23\0\2\10"+
    "\1\0\1\10\1\312\44\10\12\0\2\10\23\0\2\10"+
    "\1\0\35\10\1\313\10\10\12\0\2\10\23\0\2\10"+
    "\1\0\17\10\1\314\26\10\12\0\2\10\23\0\1\10"+
    "\1\315\1\0\46\10\12\0\2\10\23\0\2\10\1\0"+
    "\23\10\1\316\22\10\12\0\2\10\23\0\2\10\1\0"+
    "\23\10\1\317\22\10\12\0\2\10\23\0\2\10\1\0"+
    "\1\10\1\320\44\10\12\0\2\10\23\0\2\10\1\0"+
    "\23\10\1\321\22\10\12\0\2\10\23\0\2\10\1\0"+
    "\5\10\1\322\40\10\12\0\2\10\23\0\2\10\1\0"+
    "\14\10\1\323\31\10\12\0\2\10\23\0\2\10\1\0"+
    "\23\10\1\324\22\10\12\0\2\10\23\0\1\10\1\325"+
    "\1\0\1\10\1\325\44\10\12\0\2\10\23\0\2\10"+
    "\1\0\17\10\1\326\26\10\12\0\2\10\23\0\2\10"+
    "\1\0\31\10\1\327\14\10\12\0\2\10\2\0\1\330"+
    "\20\0\2\10\1\0\46\10\12\0\2\10\23\0\2\10"+
    "\1\0\23\10\1\331\22\10\12\0\2\10\23\0\2\10"+
    "\1\0\25\10\1\332\20\10\12\0\2\10\23\0\2\10"+
    "\1\0\23\10\1\333\22\10\12\0\2\10\23\0\2\10"+
    "\1\0\3\10\1\334\42\10\12\0\2\10\23\0\2\10"+
    "\1\0\5\10\1\335\40\10\12\0\2\10\23\0\2\10"+
    "\1\0\13\10\1\336\32\10\12\0\2\10\23\0\2\10"+
    "\1\0\25\10\1\337\20\10\12\0\2\10\23\0\1\10"+
    "\1\340\1\0\46\10\12\0\2\10\23\0\2\10\1\0"+
    "\5\10\1\341\40\10\12\0\2\10\23\0\2\10\1\0"+
    "\3\10\1\342\42\10\12\0\2\10\23\0\2\10\1\0"+
    "\17\10\1\343\26\10\12\0\2\10\23\0\2\10\1\0"+
    "\25\10\1\344\20\10\12\0\2\10\23\0\2\10\1\0"+
    "\1\10\1\345\44\10\12\0\2\10\23\0\2\10\1\0"+
    "\23\10\1\346\22\10\12\0\2\10\23\0\2\10\1\0"+
    "\17\10\1\347\26\10\12\0\2\10\23\0\2\10\1\0"+
    "\7\10\1\350\36\10\12\0\2\10\23\0\2\10\1\0"+
    "\5\10\1\351\40\10\12\0\2\10\23\0\2\10\1\0"+
    "\20\10\1\352\25\10\12\0\2\10\23\0\2\10\1\0"+
    "\17\10\1\353\26\10\12\0\2\10\23\0\2\10\1\0"+
    "\5\10\1\354\40\10\12\0\2\10\23\0\2\10\1\0"+
    "\17\10\1\355\26\10\12\0\2\10\23\0\1\10\1\356"+
    "\1\0\46\10\12\0\2\10\23\0\2\10\1\0\43\10"+
    "\1\357\2\10\12\0\2\10\23\0\2\10\1\0\23\10"+
    "\1\360\22\10\12\0\2\10\23\0\2\10\1\0\1\10"+
    "\1\361\44\10\12\0\2\10\23\0\2\10\1\0\20\10"+
    "\1\362\25\10\12\0\2\10\23\0\2\10\1\0\7\10"+
    "\1\363\36\10\55\0\1\364\44\0\2\10\23\0\2\10"+
    "\1\0\33\10\1\365\12\10\12\0\2\10\23\0\2\10"+
    "\1\0\3\10\1\366\42\10\12\0\2\10\23\0\2\10"+
    "\1\0\14\10\1\367\31\10\12\0\2\10\23\0\2\10"+
    "\1\0\3\10\1\370\42\10\12\0\2\10\23\0\2\10"+
    "\1\0\13\10\1\371\32\10\12\0\2\10\23\0\2\10"+
    "\1\0\20\10\1\372\25\10\12\0\2\10\23\0\2\10"+
    "\1\0\17\10\1\373\26\10\12\0\2\10\23\0\2\10"+
    "\1\0\5\10\1\374\40\10\12\0\2\10\23\0\2\10"+
    "\1\0\14\10\1\375\31\10\12\0\2\10\23\0\2\10"+
    "\1\0\5\10\1\376\40\10\12\0\2\10\23\0\2\10"+
    "\1\0\20\10\1\377\25\10\12\0\2\10\23\0\2\10"+
    "\1\0\14\10\1\u0100\31\10\12\0\2\10\23\0\2\10"+
    "\1\0\23\10\1\u0101\22\10\12\0\2\10\23\0\2\10"+
    "\1\0\35\10\1\u0102\10\10\12\0\2\10\23\0\2\10"+
    "\1\0\5\10\1\u0103\40\10\12\0\2\10\23\0\2\10"+
    "\1\0\23\10\1\u0104\22\10\12\0\2\10\23\0\2\10"+
    "\1\0\20\10\1\u0105\25\10\12\0\2\10\23\0\2\10"+
    "\1\0\1\10\1\u0106\44\10\12\0\2\10\23\0\2\10"+
    "\1\0\5\10\1\u0107\40\10\12\0\2\10\23\0\2\10"+
    "\1\0\13\10\1\u0108\32\10\12\0\2\10\23\0\2\10"+
    "\1\0\1\10\1\u0109\44\10\12\0\2\10\23\0\1\10"+
    "\1\u010a\1\0\46\10\45\0\1\u010b\54\0\2\10\23\0"+
    "\2\10\1\0\42\10\1\u010c\3\10\12\0\2\10\23\0"+
    "\2\10\1\0\35\10\1\u010d\10\10\12\0\2\10\23\0"+
    "\2\10\1\0\12\10\1\u010e\33\10\12\0\2\10\23\0"+
    "\2\10\1\0\1\10\1\u010f\44\10\12\0\2\10\23\0"+
    "\2\10\1\0\35\10\1\u0110\10\10\12\0\2\10\23\0"+
    "\2\10\1\0\1\10\1\u0111\44\10\12\0\2\10\23\0"+
    "\2\10\1\0\17\10\1\u0112\26\10\12\0\2\10\23\0"+
    "\2\10\1\0\1\10\1\u0113\44\10\12\0\2\10\23\0"+
    "\2\10\1\0\25\10\1\u0114\20\10\12\0\2\10\23\0"+
    "\2\10\1\0\23\10\1\u0115\22\10\12\0\2\10\23\0"+
    "\2\10\1\0\1\10\1\u0116\44\10\12\0\2\10\23\0"+
    "\2\10\1\0\13\10\1\u0117\32\10\12\0\2\10\23\0"+
    "\2\10\1\0\17\10\1\u0118\26\10\12\0\2\10\23\0"+
    "\2\10\1\0\5\10\1\u0119\40\10\12\0\2\10\23\0"+
    "\2\10\1\0\20\10\1\u011a\25\10\12\0\2\10\23\0"+
    "\2\10\1\0\5\10\1\u011b\40\10\12\0\2\10\23\0"+
    "\2\10\1\0\23\10\1\u011c\22\10\12\0\2\10\23\0"+
    "\2\10\1\0\5\10\1\u011d\40\10\12\0\2\10\23\0"+
    "\2\10\1\0\23\10\1\u011e\22\10\12\0\2\10\23\0"+
    "\2\10\1\0\17\10\1\u011f\26\10\12\0\2\10\23\0"+
    "\2\10\1\0\3\10\1\u0120\42\10\12\0\2\10\23\0"+
    "\2\10\1\0\14\10\1\u0121\31\10\12\0\2\10\23\0"+
    "\2\10\1\0\23\10\1\u0122\22\10\12\0\2\10\23\0"+
    "\2\10\1\0\7\10\1\u0123\36\10\12\0\2\10\23\0"+
    "\1\10\1\275\1\0\46\10\12\0\2\10\23\0\2\10"+
    "\1\0\23\10\1\u0124\22\10\12\0\2\10\23\0\2\10"+
    "\1\0\14\10\1\u0125\31\10\12\0\2\10\23\0\2\10"+
    "\1\0\23\10\1\u0126\22\10\12\0\2\10\23\0\2\10"+
    "\1\0\1\10\1\u0127\44\10\12\0\2\10\23\0\2\10"+
    "\1\0\1\10\1\u0128\44\10\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15912];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\6\1\10\11\2\1\3\11"+
    "\33\1\1\0\2\11\1\0\1\11\2\0\1\11\1\1"+
    "\5\11\2\0\3\11\44\1\4\0\1\11\1\0\2\1"+
    "\3\11\4\1\1\11\10\1\1\11\11\1\1\11\16\1"+
    "\1\11\1\1\1\0\22\1\1\11\24\1\1\11\1\0"+
    "\17\1\1\0\33\1\1\0\26\1\1\11\35\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    public ArrayList<ErrorLexico> listaErrores = new ArrayList<>();

    private void agregarError(ErrorLexico errorL){
        listaErrores.add(errorL);
    }

    Stack<Integer> pilaAmbitos = new Stack();
    public void iniciar(){
        pilaAmbitos.push(0);
    }
    //coidgo de usuario en sintaxis java
    public void printConsole(String s){
        //System.out.println(s);
    }
    String cadena="";
    //public Pintar pintar = new Pintar();

    //para la identacion
    boolean estadoIdent = false;
    int contadorAmbito=0, ambitoActual=0;

    public Symbol symbol(String value, int size){
        if(!pilaAmbitos.isEmpty()){
            int ambito = pilaAmbitos.peek();
            if((ambito+1)==size){
                pilaAmbitos.push(ambito+1);
                //System.out.println("INDENT: "+(ambito+1));
                return new Symbol(SimbolosTS.INDENT , yycolumn, yyline, yytext());
            }else if((ambito-1)==size){
                pilaAmbitos.pop();
                //System.out.println("DEDENT: "+(ambito-1));
                return new Symbol(SimbolosTS.DEDENT , yycolumn, yyline, yytext());
            }else if(ambito==size){
                //UN SALATO DE LINEA
                //System.out.println("SALTO DE LINEA: "+ambito);
            }else{
                //error de identacion
                //System.out.println("Error de identacion");
                //agregarError(new ErrorLexico(yyline + 1,yycolumn + 1, yytext(), "Error de Indentacion", "Sintactico"));
            }
        }
        return null;
    }

    public Symbol symbol(int size){
        size = (size/4);
        if(!pilaAmbitos.isEmpty()){
            int ambito = pilaAmbitos.peek();
            if((ambito+1)==size){
                pilaAmbitos.push(ambito+1);
                //System.out.println("IDENT: "+(ambito+1));
                return new Symbol(SimbolosTS.INDENT , yycolumn, yyline, yytext());
            }else if((ambito-1)==size){
                pilaAmbitos.pop();
                //System.out.println("DEDENT: "+(ambito-1));
                return new Symbol(SimbolosTS.DEDENT , yycolumn, yyline, yytext());
            }else if(ambito==size){
                //UN SALATO DE LINEA
                //System.out.println("SALTO DE LINEA: "+ambito);
            }else{
                //error de identacion
                //System.out.println("Error de identacion");
                //agregarError(new ErrorLexico(yyline + 1,yycolumn + 1, yytext(), "Error de Indentacion", "Sintactico"));
            }
        }
        return null;
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexicoTS(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AnalizadorLexicoTS(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 74: 
          { return new Symbol(SimbolosTS.IMPARES , yycolumn, yyline, yytext());
          }
        case 89: break;
        case 34: 
          { return new Symbol(SimbolosTS.OR , yycolumn, yyline, yytext());
          }
        case 90: break;
        case 12: 
          { return new Symbol(SimbolosTS.CORCHETE_C , yycolumn, yyline, yytext());
          }
        case 91: break;
        case 36: 
          { return new Symbol(SimbolosTS.RE , yycolumn, yyline, yytext());
          }
        case 92: break;
        case 11: 
          { return new Symbol(SimbolosTS.CORCHETE_A , yycolumn, yyline, yytext());
          }
        case 93: break;
        case 60: 
          { return new Symbol(SimbolosTS.DOBLE , yycolumn, yyline, yytext());
          }
        case 94: break;
        case 55: 
          { return new Symbol(SimbolosTS.PARA , yycolumn, yyline, yytext());
          }
        case 95: break;
        case 45: 
          { return new Symbol(SimbolosTS.DO_S , yycolumn, yyline, yytext());
          }
        case 96: break;
        case 81: 
          { return new Symbol(SimbolosTS.LONGITUD , yycolumn, yyline, yytext());
          }
        case 97: break;
        case 83: 
          { return new Symbol(SimbolosTS.SUMARIZAR , yycolumn, yyline, yytext());
          }
        case 98: break;
        case 77: 
          { return new Symbol(SimbolosTS.BOOLEAN , yycolumn, yyline, yytext());
          }
        case 99: break;
        case 19: 
          { return new Symbol(SimbolosTS.DIVISION , yycolumn, yyline, yytext());
          }
        case 100: break;
        case 26: 
          { return new Symbol(SimbolosTS.CADENA , yycolumn, yyline, yytext());
          }
        case 101: break;
        case 88: 
          { return new Symbol(SimbolosTS.DESCENDENTE , yycolumn, yyline, yytext());
          }
        case 102: break;
        case 17: 
          { return new Symbol(SimbolosTS.IGUAL , yycolumn, yyline, yytext());
          }
        case 103: break;
        case 71: 
          { return new Symbol(SimbolosTS.ORDENAR , yycolumn, yyline, yytext());
          }
        case 104: break;
        case 70: 
          { return new Symbol(SimbolosTS.DEFAULT , yycolumn, yyline, yytext());
          }
        case 105: break;
        case 48: 
          { return new Symbol(SimbolosTS.SOL , yycolumn, yyline, yytext());
          }
        case 106: break;
        case 42: 
          { return new Symbol(SimbolosTS.DECIMAL , yycolumn, yyline, new Double(yytext()));
          }
        case 107: break;
        case 66: 
          { return new Symbol(SimbolosTS.ENTERO , yycolumn, yyline, yytext());
          }
        case 108: break;
        case 72: 
          { return new Symbol(SimbolosTS.ESPERAR , yycolumn, yyline, yytext());
          }
        case 109: break;
        case 18: 
          { return new Symbol(SimbolosTS.MAS , yycolumn, yyline, yytext());
          }
        case 110: break;
        case 29: 
          { return new Symbol(SimbolosTS.MAS_MAS , yycolumn, yyline, yytext());
          }
        case 111: break;
        case 14: 
          { return new Symbol(SimbolosTS.LLAVE_C , yycolumn, yyline, yytext());
          }
        case 112: break;
        case 21: 
          { return new Symbol(SimbolosTS.POTENCIA , yycolumn, yyline, yytext());
          }
        case 113: break;
        case 50: 
          { return new Symbol(SimbolosTS.VAR , yycolumn, yyline, yytext());
          }
        case 114: break;
        case 84: 
          { return new Symbol(SimbolosTS.PRINCIPAL , yycolumn, yyline, yytext());
          }
        case 115: break;
        case 13: 
          { return new Symbol(SimbolosTS.LLAVE_A , yycolumn, yyline, yytext());
          }
        case 116: break;
        case 8: 
          { Symbol sim = symbol(yytext(), yytext().length()); if(sim!=null){return sim;}else{/*IGNORAR*/}
          }
        case 117: break;
        case 1: 
          { /*Ignore*/
          }
        case 118: break;
        case 64: 
          { return new Symbol(SimbolosTS.PARES , yycolumn, yyline, yytext());
          }
        case 119: break;
        case 53: 
          { return new Symbol(SimbolosTS.SOL_S , yycolumn, yyline, yytext());
          }
        case 120: break;
        case 46: 
          { return new Symbol(SimbolosTS.RE_S , yycolumn, yyline, yytext());
          }
        case 121: break;
        case 56: 
          { return new Symbol(SimbolosTS.TRUE , yycolumn, yyline, true);
          }
        case 122: break;
        case 28: 
          { return new Symbol(SimbolosTS.MAS_IGUAL , yycolumn, yyline, yytext());
          }
        case 123: break;
        case 7: 
          { return new Symbol(SimbolosTS.NUMERO , yycolumn, yyline, new Integer(yytext()));
          }
        case 124: break;
        case 68: 
          { return new Symbol(SimbolosTS.PRIMOS , yycolumn, yyline, yytext());
          }
        case 125: break;
        case 67: 
          { return new Symbol(SimbolosTS.SWITCH , yycolumn, yyline, yytext());
          }
        case 126: break;
        case 35: 
          { return new Symbol(SimbolosTS.DO , yycolumn, yyline, yytext());
          }
        case 127: break;
        case 51: 
          { return new Symbol(SimbolosTS.CARACTER , yycolumn, yyline, yytext());
          }
        case 128: break;
        case 52: 
          { printConsole("COMENTARIO: "+yytext()+"\n"); /*return new Symbol(SimbolosTS.COMENTARIO_BLOQUE , yycolumn, yyline, yytext());*/
          }
        case 129: break;
        case 4: 
          { return new Symbol(SimbolosTS.POR , yycolumn, yyline, yytext());
          }
        case 130: break;
        case 40: 
          { return new Symbol(SimbolosTS.LA , yycolumn, yyline, yytext());
          }
        case 131: break;
        case 61: 
          { return new Symbol(SimbolosTS.FALSE , yycolumn, yyline, false);
          }
        case 132: break;
        case 78: 
          { return new Symbol(SimbolosTS.RETORNAR , yycolumn, yyline, yytext());
          }
        case 133: break;
        case 87: 
          { return new Symbol(SimbolosTS.ASCENDENTE , yycolumn, yyline, yytext());
          }
        case 134: break;
        case 69: 
          { return new Symbol(SimbolosTS.CADENA_RSV , yycolumn, yyline, yytext());
          }
        case 135: break;
        case 33: 
          { return new Symbol(SimbolosTS.XOR , yycolumn, yyline, yytext());
          }
        case 136: break;
        case 3: 
          { return new Symbol(SimbolosTS.MENOS , yycolumn, yyline, yytext());
          }
        case 137: break;
        case 2: 
          { return new Symbol(SimbolosTS.MENOR_Q , yycolumn, yyline, yytext());
          }
        case 138: break;
        case 43: 
          { return new Symbol(SimbolosTS.NAND , yycolumn, yyline, yytext());
          }
        case 139: break;
        case 75: 
          { return new Symbol(SimbolosTS.ARREGLO , yycolumn, yyline, yytext());
          }
        case 140: break;
        case 6: 
          { return new Symbol(SimbolosTS.IDENTIFICADOR , yycolumn, yyline, yytext());
          }
        case 141: break;
        case 5: 
          { return new Symbol(SimbolosTS.MAYOR_Q , yycolumn, yyline, yytext());
          }
        case 142: break;
        case 31: 
          { return new Symbol(SimbolosTS.IS_NULL , yycolumn, yyline, yytext());
          }
        case 143: break;
        case 39: 
          { return new Symbol(SimbolosTS.SI , yycolumn, yyline, yytext());
          }
        case 144: break;
        case 22: 
          { return new Symbol(SimbolosTS.NOT , yycolumn, yyline, yytext());
          }
        case 145: break;
        case 44: 
          { return new Symbol(SimbolosTS.NOR , yycolumn, yyline, yytext());
          }
        case 146: break;
        case 63: 
          { return new Symbol(SimbolosTS.PISTA, yycolumn, yyline, yytext());
          }
        case 147: break;
        case 47: 
          { return new Symbol(SimbolosTS.FA_S , yycolumn, yyline, yytext());
          }
        case 148: break;
        case 65: 
          { return new Symbol(SimbolosTS.HACER , yycolumn, yyline, yytext());
          }
        case 149: break;
        case 30: 
          { return new Symbol(SimbolosTS.DIFERENTE , yycolumn, yyline, yytext());
          }
        case 150: break;
        case 32: 
          { return new Symbol(SimbolosTS.AND , yycolumn, yyline, yytext());
          }
        case 151: break;
        case 27: 
          { return new Symbol(SimbolosTS.IGUAL_IGUAL , yycolumn, yyline, yytext());
          }
        case 152: break;
        case 49: 
          { return new Symbol(SimbolosTS.LA_S , yycolumn, yyline, yytext());
          }
        case 153: break;
        case 23: 
          { return new Symbol(SimbolosTS.MENOR_IGUAL , yycolumn, yyline, yytext());
          }
        case 154: break;
        case 15: 
          { return new Symbol(SimbolosTS.COMA , yycolumn, yyline, yytext());
          }
        case 155: break;
        case 62: 
          { return new Symbol(SimbolosTS.SALIR , yycolumn, yyline, yytext());
          }
        case 156: break;
        case 41: 
          { printConsole("COMENTARIO_SIMPLE: "+yytext()+"\n"); /*return new Symbol(SimbolosTS.COMENTARIO_LINEA , yycolumn, yyline, yytext());*/
          }
        case 157: break;
        case 16: 
          { return new Symbol(SimbolosTS.PUNTO_COMA , yycolumn, yyline, yytext());
          }
        case 158: break;
        case 20: 
          { return new Symbol(SimbolosTS.MODULO , yycolumn, yyline, yytext());
          }
        case 159: break;
        case 38: 
          { return new Symbol(SimbolosTS.FA , yycolumn, yyline, yytext());
          }
        case 160: break;
        case 73: 
          { return new Symbol(SimbolosTS.MENSAJE , yycolumn, yyline, yytext());
          }
        case 161: break;
        case 79: 
          { return new Symbol(SimbolosTS.EXTIENDE , yycolumn, yyline, yytext());
          }
        case 162: break;
        case 76: 
          { return new Symbol(SimbolosTS.SINO_SI , yycolumn, yyline, yytext());
          }
        case 163: break;
        case 59: 
          { return new Symbol(SimbolosTS.CASO , yycolumn, yyline, yytext());
          }
        case 164: break;
        case 82: 
          { return new Symbol(SimbolosTS.CARACTER_RSV , yycolumn, yyline, yytext());
          }
        case 165: break;
        case 57: 
          { return new Symbol(SimbolosTS.KEEP , yycolumn, yyline, yytext());
          }
        case 166: break;
        case 37: 
          { return new Symbol(SimbolosTS.MI , yycolumn, yyline, yytext());
          }
        case 167: break;
        case 85: 
          { return new Symbol(SimbolosTS.CONTINUAR , yycolumn, yyline, yytext());
          }
        case 168: break;
        case 25: 
          { return new Symbol(SimbolosTS.MAYOR_IGUAL , yycolumn, yyline, yytext());
          }
        case 169: break;
        case 80: 
          { return new Symbol(SimbolosTS.MIENTRAS , yycolumn, yyline, yytext());
          }
        case 170: break;
        case 10: 
          { return new Symbol(SimbolosTS.PA_C , yycolumn, yyline, yytext());
          }
        case 171: break;
        case 9: 
          { return new Symbol(SimbolosTS.PA_A , yycolumn, yyline, yytext());
          }
        case 172: break;
        case 24: 
          { return new Symbol(SimbolosTS.MENOS_MENOS , yycolumn, yyline, yytext());
          }
        case 173: break;
        case 54: 
          { return new Symbol(SimbolosTS.SINO , yycolumn, yyline, yytext());
          }
        case 174: break;
        case 58: 
          { return new Symbol(SimbolosTS.VOID , yycolumn, yyline, yytext());
          }
        case 175: break;
        case 86: 
          { return new Symbol(SimbolosTS.REPRODUCIR , yycolumn, yyline, yytext());
          }
        case 176: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(SimbolosTS.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
