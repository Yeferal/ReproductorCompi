// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: Lexico.jflex

package backend.analizador;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.Stack;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  4,  5,  6,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     7,  8,  9, 10,  0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 
    22, 22, 22, 22, 22, 22, 22, 22, 22, 22,  0, 23, 24, 25, 26,  0, 
    27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 34, 37, 38, 39, 34, 40, 
    41, 34, 42, 43, 44, 34, 45, 34, 34, 34, 34, 46,  0, 47, 48, 49, 
     0, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 37, 60, 61, 62, 63, 
    64, 34, 65, 66, 67, 68, 45, 69, 70, 34, 71, 72, 73, 74,  0,  0, 
     0,  0,  0,  0,  0,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 34,  0,  0,  0,  0,  0,  0,  0, 34,  0,  0,  0, 34,  0,  0, 
     0, 34,  0, 34,  0,  0,  0,  0,  0,  0, 34,  0,  0,  0,  0,  0, 
     0, 34,  0,  0,  0,  0,  0,  0,  0, 34,  0,  0,  0, 34,  0,  0, 
     0, 34,  0, 34,  0,  0,  0,  0,  0,  0, 34,  0,  0,  0,  0,  0
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\2\1\4\1\1\1\5"+
    "\2\1\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\22\22\1\23\1\24"+
    "\1\25\6\22\1\26\1\1\1\27\2\2\1\30\1\0"+
    "\1\31\2\0\1\32\1\33\1\34\2\0\1\35\1\36"+
    "\1\37\2\0\1\40\1\41\1\42\1\0\6\22\1\43"+
    "\3\22\1\44\3\22\1\45\2\22\1\46\4\22\1\47"+
    "\1\22\1\50\13\22\1\51\2\2\1\52\1\53\2\54"+
    "\1\55\2\0\1\56\1\0\11\22\1\57\4\22\1\60"+
    "\4\22\1\61\7\22\1\62\4\22\1\63\3\22\1\64"+
    "\2\22\1\65\1\0\1\66\1\56\1\0\5\22\1\67"+
    "\12\22\1\70\4\22\1\71\7\22\1\72\1\73\2\22"+
    "\1\74\1\22\1\75\1\66\10\22\1\76\3\22\1\77"+
    "\1\100\5\22\1\101\1\102\4\22\1\103\1\0\6\22"+
    "\1\104\4\22\1\105\7\22\1\106\3\22\1\0\1\22"+
    "\1\107\1\22\1\110\1\22\1\111\2\22\1\112\1\22"+
    "\1\113\1\22\1\114\1\22\1\115\1\22\1\116\3\22"+
    "\1\117\3\22\1\120\2\22\1\121\1\122\1\123\2\22"+
    "\1\124\3\22\1\125\1\22\1\126\1\22\1\127\1\130"+
    "\1\22\1\131\1\132";

  private static int [] zzUnpackAction() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\113\0\226\0\341\0\u012c\0\u0177\0\u01c2\0\u020d"+
    "\0\113\0\u0258\0\u02a3\0\113\0\113\0\113\0\u02ee\0\113"+
    "\0\u0339\0\113\0\u0384\0\113\0\u03cf\0\u041a\0\u0465\0\u04b0"+
    "\0\u04fb\0\u0546\0\u0591\0\u05dc\0\u0627\0\u0672\0\u06bd\0\u0708"+
    "\0\u0753\0\u079e\0\u07e9\0\u0834\0\u087f\0\u08ca\0\u0915\0\u0960"+
    "\0\u09ab\0\113\0\113\0\113\0\u09f6\0\u0a41\0\u0a8c\0\u0ad7"+
    "\0\u0b22\0\u0b6d\0\113\0\u0bb8\0\113\0\u0c03\0\u0c4e\0\113"+
    "\0\u0c99\0\113\0\u0ce4\0\u020d\0\113\0\113\0\113\0\u0d2f"+
    "\0\u0d7a\0\113\0\113\0\113\0\u0dc5\0\u0e10\0\113\0\113"+
    "\0\113\0\u0e5b\0\u0ea6\0\u0ef1\0\u0f3c\0\u0f87\0\u0fd2\0\u101d"+
    "\0\u1068\0\u10b3\0\u10fe\0\u1149\0\u1194\0\u11df\0\u122a\0\u1275"+
    "\0\u12c0\0\u130b\0\u1356\0\u13a1\0\u13ec\0\u1437\0\u1482\0\u14cd"+
    "\0\u1518\0\u1563\0\u15ae\0\u15f9\0\u1644\0\u168f\0\u16da\0\u1725"+
    "\0\u1770\0\u17bb\0\u1806\0\u1851\0\u13a1\0\u189c\0\113\0\u18e7"+
    "\0\u1932\0\113\0\113\0\113\0\u0d2f\0\u0dc5\0\u197d\0\u19c8"+
    "\0\113\0\u1a13\0\u1a5e\0\u1aa9\0\u1af4\0\u1b3f\0\u1b8a\0\u1bd5"+
    "\0\u1c20\0\u1c6b\0\u1cb6\0\113\0\u1d01\0\u1d4c\0\u1d97\0\u1de2"+
    "\0\113\0\u1e2d\0\u1e78\0\u1ec3\0\u1f0e\0\113\0\u1f59\0\u1fa4"+
    "\0\u1fef\0\u203a\0\u2085\0\u20d0\0\u211b\0\113\0\u2166\0\u21b1"+
    "\0\u21fc\0\u2247\0\u2292\0\u22dd\0\u2328\0\u2373\0\u0672\0\u23be"+
    "\0\u2409\0\u2454\0\u249f\0\u197d\0\u24ea\0\u24ea\0\u2535\0\u2580"+
    "\0\u25cb\0\u2616\0\u2661\0\u0672\0\u26ac\0\u26f7\0\u2742\0\u278d"+
    "\0\u27d8\0\u2823\0\u286e\0\u28b9\0\u2904\0\u294f\0\u0672\0\u299a"+
    "\0\u29e5\0\u2a30\0\u2a7b\0\u0672\0\u2ac6\0\u2b11\0\u2b5c\0\u2ba7"+
    "\0\u2bf2\0\u2c3d\0\u2c88\0\u2cd3\0\113\0\u2d1e\0\u2d69\0\u0672"+
    "\0\u2db4\0\u0672\0\113\0\u2dff\0\u2e4a\0\u2e95\0\u2ee0\0\u2f2b"+
    "\0\u2f76\0\u2fc1\0\u300c\0\u0672\0\u3057\0\u30a2\0\u30ed\0\u0672"+
    "\0\u0672\0\u3138\0\u3183\0\u31ce\0\u3219\0\u3264\0\u0672\0\u0672"+
    "\0\u32af\0\u32fa\0\u3345\0\u3390\0\u0672\0\u33db\0\u3426\0\u3471"+
    "\0\u34bc\0\u3507\0\u3552\0\u359d\0\u0672\0\u35e8\0\u3633\0\u367e"+
    "\0\u36c9\0\u0672\0\u3714\0\u375f\0\u37aa\0\u37f5\0\u3840\0\u388b"+
    "\0\u38d6\0\u0672\0\u3921\0\u396c\0\u39b7\0\u3a02\0\u3a4d\0\u0672"+
    "\0\u3a98\0\u0672\0\u3ae3\0\u0672\0\u3b2e\0\u3b79\0\u0672\0\u3bc4"+
    "\0\u0672\0\u3c0f\0\u0672\0\u3c5a\0\u0672\0\u3ca5\0\u0672\0\u3cf0"+
    "\0\u3d3b\0\u3d86\0\113\0\u3dd1\0\u3e1c\0\u3e67\0\u0672\0\u3eb2"+
    "\0\u3efd\0\u0672\0\u0672\0\u0672\0\u3f48\0\u3f93\0\u0672\0\u3fde"+
    "\0\u4029\0\u4074\0\u0672\0\u40bf\0\u0672\0\u410a\0\u0672\0\u0672"+
    "\0\u4155\0\u0672\0\u0672";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\0\1\5\1\6\1\7"+
    "\1\10\1\2\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\2\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\2\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\2\1\30\1\31\1\32\1\55\1\34\1\56\1\36"+
    "\1\37\1\40\1\36\1\57\1\60\1\36\1\44\1\45"+
    "\1\61\1\62\1\50\4\36\1\63\1\64\1\65\114\0"+
    "\1\66\1\0\1\5\2\0\2\5\105\0\1\4\111\0"+
    "\1\5\1\0\1\5\2\0\2\5\104\0\1\5\1\0"+
    "\1\5\2\0\1\5\1\67\113\0\1\70\3\0\1\71"+
    "\14\0\1\72\57\0\1\73\1\0\11\74\1\75\101\74"+
    "\14\0\1\76\74\0\1\77\11\0\1\100\1\0\1\101"+
    "\2\100\3\0\1\100\2\0\4\100\4\0\23\100\3\0"+
    "\27\100\1\0\1\100\22\0\1\102\7\0\1\103\104\0"+
    "\1\104\113\0\1\105\1\0\1\23\107\0\1\106\5\0"+
    "\1\107\112\0\1\110\112\0\1\111\1\112\106\0\1\36"+
    "\5\0\22\36\3\0\20\36\1\113\1\114\5\36\31\0"+
    "\1\36\5\0\22\36\3\0\16\36\1\115\10\36\31\0"+
    "\1\36\5\0\22\36\3\0\1\36\1\116\14\36\1\117"+
    "\10\36\31\0\1\36\5\0\22\36\3\0\5\36\1\120"+
    "\10\36\1\121\10\36\31\0\1\36\5\0\22\36\3\0"+
    "\15\36\1\122\3\36\1\123\3\36\1\124\1\36\31\0"+
    "\1\36\5\0\22\36\3\0\1\36\1\125\25\36\31\0"+
    "\1\36\5\0\22\36\3\0\27\36\31\0\1\36\5\0"+
    "\22\36\3\0\1\36\1\126\25\36\31\0\1\36\5\0"+
    "\22\36\3\0\14\36\1\127\12\36\31\0\1\36\5\0"+
    "\22\36\3\0\5\36\1\130\21\36\31\0\1\36\5\0"+
    "\22\36\3\0\1\36\1\131\14\36\1\132\10\36\31\0"+
    "\1\36\5\0\22\36\3\0\5\36\1\133\3\36\1\134"+
    "\15\36\31\0\1\36\5\0\22\36\3\0\20\36\1\135"+
    "\6\36\31\0\1\36\5\0\22\36\3\0\1\36\1\136"+
    "\7\36\1\137\6\36\1\140\6\36\31\0\1\36\5\0"+
    "\22\36\3\0\5\36\1\141\21\36\31\0\1\36\5\0"+
    "\22\36\3\0\1\36\1\142\7\36\1\143\4\36\1\144"+
    "\4\36\1\145\1\146\2\36\31\0\1\36\5\0\22\36"+
    "\3\0\20\36\1\147\6\36\31\0\1\36\5\0\22\36"+
    "\3\0\1\36\1\150\3\36\1\151\10\36\1\152\10\36"+
    "\31\0\1\36\5\0\22\36\3\0\5\36\1\120\10\36"+
    "\1\153\10\36\31\0\1\36\5\0\22\36\3\0\1\36"+
    "\1\154\25\36\31\0\1\36\5\0\22\36\3\0\16\36"+
    "\1\132\10\36\31\0\1\36\5\0\22\36\3\0\5\36"+
    "\1\133\3\36\1\155\15\36\31\0\1\36\5\0\22\36"+
    "\3\0\5\36\1\156\21\36\31\0\1\36\5\0\22\36"+
    "\3\0\1\36\1\142\7\36\1\143\11\36\1\145\1\146"+
    "\2\36\114\0\1\157\2\0\1\160\1\0\1\5\2\0"+
    "\2\5\104\0\1\5\1\0\1\5\2\0\1\5\1\161"+
    "\117\0\1\162\207\0\1\163\16\0\1\164\107\0\1\100"+
    "\2\0\1\165\60\0\1\100\2\0\1\100\1\0\1\100"+
    "\35\0\1\166\64\0\20\167\1\0\2\167\1\170\67\167"+
    "\3\112\1\171\1\0\4\112\1\172\101\112\26\0\1\36"+
    "\5\0\22\36\3\0\20\36\1\173\6\36\31\0\1\36"+
    "\5\0\22\36\3\0\3\36\1\174\23\36\31\0\1\36"+
    "\5\0\22\36\3\0\16\36\1\175\10\36\31\0\1\36"+
    "\5\0\22\36\3\0\4\36\1\176\13\36\1\177\1\200"+
    "\5\36\31\0\1\36\5\0\22\36\3\0\15\36\1\201"+
    "\11\36\31\0\1\36\5\0\22\36\3\0\6\36\1\202"+
    "\12\36\1\203\5\36\15\0\1\204\13\0\1\36\5\0"+
    "\22\36\3\0\2\36\1\205\24\36\31\0\1\36\5\0"+
    "\22\36\3\0\22\36\1\206\4\36\31\0\1\36\5\0"+
    "\22\36\3\0\17\36\1\207\7\36\31\0\1\36\5\0"+
    "\22\36\3\0\22\36\1\210\4\36\15\0\1\211\13\0"+
    "\1\36\5\0\22\36\3\0\13\36\1\212\13\36\31\0"+
    "\1\36\5\0\22\36\3\0\3\36\1\213\23\36\31\0"+
    "\1\36\5\0\22\36\3\0\17\36\1\214\7\36\31\0"+
    "\1\36\5\0\22\36\3\0\5\36\1\215\21\36\15\0"+
    "\1\216\13\0\1\36\5\0\22\36\3\0\27\36\31\0"+
    "\1\36\5\0\22\36\3\0\15\36\1\217\11\36\31\0"+
    "\1\36\5\0\22\36\3\0\15\36\1\220\11\36\31\0"+
    "\1\36\5\0\22\36\3\0\5\36\1\221\21\36\31\0"+
    "\1\36\5\0\22\36\3\0\4\36\1\222\22\36\31\0"+
    "\1\36\5\0\22\36\3\0\20\36\1\223\6\36\31\0"+
    "\1\36\5\0\22\36\3\0\21\36\1\224\5\36\31\0"+
    "\1\36\5\0\22\36\3\0\11\36\1\225\15\36\15\0"+
    "\1\226\13\0\1\36\5\0\22\36\3\0\17\36\1\227"+
    "\2\36\1\230\4\36\31\0\1\36\5\0\22\36\3\0"+
    "\13\36\1\231\13\36\31\0\1\36\5\0\22\36\3\0"+
    "\15\36\1\232\11\36\31\0\1\36\5\0\22\36\3\0"+
    "\13\36\1\233\13\36\31\0\1\36\5\0\22\36\3\0"+
    "\14\36\1\234\12\36\31\0\1\36\5\0\22\36\3\0"+
    "\11\36\1\235\15\36\31\0\1\36\5\0\22\36\3\0"+
    "\23\36\1\236\3\36\31\0\1\36\5\0\22\36\3\0"+
    "\20\36\1\237\6\36\31\0\1\36\5\0\22\36\3\0"+
    "\20\36\1\240\6\36\31\0\1\36\5\0\22\36\3\0"+
    "\11\36\1\241\15\36\31\0\1\36\5\0\22\36\3\0"+
    "\2\36\1\205\24\36\31\0\1\36\5\0\22\36\3\0"+
    "\13\36\1\212\13\36\31\0\1\36\5\0\22\36\3\0"+
    "\17\36\1\227\2\36\1\230\4\36\4\0\1\242\1\0"+
    "\1\5\2\0\2\5\104\0\1\5\1\0\1\5\2\0"+
    "\1\5\1\242\103\0\23\167\1\243\112\167\1\243\6\167"+
    "\1\244\60\167\3\172\1\245\1\246\106\172\26\0\1\36"+
    "\5\0\22\36\3\0\5\36\1\247\21\36\31\0\1\36"+
    "\5\0\22\36\3\0\5\36\1\250\21\36\31\0\1\36"+
    "\5\0\22\36\3\0\13\36\1\251\13\36\31\0\1\36"+
    "\5\0\22\36\3\0\5\36\1\252\21\36\31\0\1\36"+
    "\5\0\22\36\3\0\1\36\1\253\25\36\31\0\1\36"+
    "\5\0\22\36\3\0\16\36\1\254\10\36\31\0\1\36"+
    "\5\0\22\36\3\0\22\36\1\255\4\36\31\0\1\36"+
    "\5\0\22\36\3\0\1\36\1\256\25\36\31\0\1\36"+
    "\5\0\22\36\3\0\3\36\1\257\23\36\31\0\1\36"+
    "\5\0\22\36\3\0\13\36\1\260\13\36\31\0\1\36"+
    "\5\0\22\36\3\0\5\36\1\261\21\36\31\0\1\36"+
    "\5\0\22\36\3\0\5\36\1\262\21\36\31\0\1\36"+
    "\5\0\22\36\3\0\11\36\1\263\15\36\31\0\1\36"+
    "\5\0\22\36\3\0\21\36\1\264\5\36\31\0\1\36"+
    "\5\0\22\36\3\0\5\36\1\265\21\36\31\0\1\36"+
    "\5\0\22\36\3\0\1\36\1\266\25\36\31\0\1\36"+
    "\5\0\22\36\3\0\17\36\1\267\7\36\31\0\1\36"+
    "\5\0\22\36\3\0\7\36\1\270\17\36\31\0\1\36"+
    "\5\0\22\36\3\0\21\36\1\271\5\36\31\0\1\36"+
    "\5\0\22\36\3\0\15\36\1\272\11\36\31\0\1\36"+
    "\5\0\22\36\3\0\5\36\1\273\21\36\31\0\1\36"+
    "\5\0\22\36\3\0\1\36\1\274\3\36\1\275\21\36"+
    "\31\0\1\36\5\0\22\36\3\0\22\36\1\276\4\36"+
    "\31\0\1\36\5\0\22\36\3\0\14\36\1\277\1\300"+
    "\11\36\31\0\1\36\5\0\22\36\3\0\20\36\1\301"+
    "\6\36\31\0\1\36\5\0\22\36\3\0\16\36\1\302"+
    "\10\36\31\0\1\36\5\0\22\36\3\0\11\36\1\303"+
    "\15\36\31\0\1\36\5\0\22\36\3\0\16\36\1\304"+
    "\10\36\15\0\1\305\13\0\1\36\5\0\22\36\3\0"+
    "\27\36\31\0\1\36\5\0\22\36\3\0\1\36\1\306"+
    "\25\36\31\0\1\36\5\0\22\36\3\0\22\36\1\307"+
    "\4\36\31\0\1\36\5\0\22\36\3\0\5\36\1\310"+
    "\21\36\31\0\1\36\5\0\22\36\3\0\4\36\1\311"+
    "\22\36\31\0\1\36\5\0\22\36\3\0\4\36\1\312"+
    "\22\36\4\0\1\3\1\0\1\5\2\0\1\5\1\6"+
    "\103\0\23\167\1\243\6\167\1\313\60\167\11\246\1\112"+
    "\101\246\26\0\1\36\5\0\22\36\3\0\7\36\1\314"+
    "\17\36\31\0\1\36\5\0\22\36\3\0\15\36\1\315"+
    "\11\36\31\0\1\36\5\0\22\36\3\0\5\36\1\316"+
    "\21\36\31\0\1\36\5\0\22\36\3\0\15\36\1\317"+
    "\11\36\31\0\1\36\5\0\22\36\3\0\3\36\1\320"+
    "\23\36\31\0\1\36\5\0\22\36\3\0\11\36\1\321"+
    "\15\36\31\0\1\36\5\0\22\36\3\0\23\36\1\322"+
    "\3\36\31\0\1\36\5\0\22\36\3\0\5\36\1\323"+
    "\21\36\31\0\1\36\5\0\22\36\3\0\5\36\1\324"+
    "\21\36\31\0\1\36\5\0\22\36\3\0\20\36\1\325"+
    "\6\36\31\0\1\36\5\0\22\36\3\0\20\36\1\326"+
    "\6\36\31\0\1\36\5\0\22\36\3\0\5\36\1\327"+
    "\21\36\31\0\1\36\5\0\22\36\3\0\5\36\1\330"+
    "\10\36\1\330\10\36\31\0\1\36\5\0\22\36\3\0"+
    "\20\36\1\331\6\36\31\0\1\36\5\0\22\36\3\0"+
    "\20\36\1\332\6\36\31\0\1\36\5\0\22\36\3\0"+
    "\11\36\1\333\15\36\31\0\1\36\5\0\22\36\3\0"+
    "\1\36\1\334\25\36\31\0\1\36\5\0\22\36\3\0"+
    "\22\36\1\335\4\36\31\0\1\36\5\0\22\36\3\0"+
    "\15\36\1\336\11\36\31\0\1\36\5\0\22\36\3\0"+
    "\21\36\1\337\5\36\31\0\1\36\5\0\22\36\3\0"+
    "\1\36\1\340\25\36\31\0\1\36\5\0\22\36\3\0"+
    "\16\36\1\341\10\36\31\0\1\36\5\0\22\36\3\0"+
    "\3\36\1\342\23\36\31\0\1\36\5\0\22\36\3\0"+
    "\16\36\1\343\10\36\31\0\1\36\5\0\22\36\3\0"+
    "\20\36\1\344\6\36\31\0\1\36\5\0\22\36\3\0"+
    "\20\36\1\345\6\36\12\0\1\346\16\0\1\36\5\0"+
    "\22\36\3\0\27\36\31\0\1\36\5\0\22\36\3\0"+
    "\20\36\1\347\6\36\31\0\1\36\5\0\22\36\3\0"+
    "\3\36\1\350\23\36\31\0\1\36\5\0\22\36\3\0"+
    "\1\36\1\351\25\36\31\0\1\36\5\0\22\36\3\0"+
    "\13\36\1\352\13\36\31\0\1\36\5\0\22\36\3\0"+
    "\4\36\1\353\22\36\31\0\1\36\5\0\22\36\3\0"+
    "\1\36\1\354\25\36\31\0\1\36\5\0\22\36\3\0"+
    "\1\36\1\355\25\36\31\0\1\36\5\0\22\36\3\0"+
    "\22\36\1\356\4\36\31\0\1\36\5\0\22\36\3\0"+
    "\15\36\1\357\11\36\31\0\1\36\5\0\22\36\3\0"+
    "\13\36\1\360\13\36\31\0\1\36\5\0\22\36\3\0"+
    "\15\36\1\361\11\36\31\0\1\36\5\0\22\36\3\0"+
    "\16\36\1\362\10\36\31\0\1\36\5\0\22\36\3\0"+
    "\1\36\1\363\25\36\31\0\1\36\5\0\22\36\3\0"+
    "\15\36\1\364\11\36\31\0\1\36\5\0\22\36\3\0"+
    "\5\36\1\365\21\36\31\0\1\36\5\0\22\36\3\0"+
    "\22\36\1\366\4\36\31\0\1\36\5\0\22\36\3\0"+
    "\12\36\1\367\14\36\31\0\1\36\5\0\22\36\3\0"+
    "\20\36\1\370\6\36\31\0\1\36\5\0\22\36\3\0"+
    "\1\36\1\371\25\36\31\0\1\36\5\0\22\36\3\0"+
    "\21\36\1\372\5\36\31\0\1\36\5\0\22\36\3\0"+
    "\11\36\1\373\15\36\31\0\1\36\5\0\22\36\3\0"+
    "\4\36\1\374\22\36\31\0\1\36\5\0\22\36\3\0"+
    "\15\36\1\375\11\36\105\0\1\376\36\0\1\36\5\0"+
    "\22\36\3\0\11\36\1\377\15\36\31\0\1\36\5\0"+
    "\22\36\3\0\10\36\1\u0100\16\36\31\0\1\36\5\0"+
    "\22\36\3\0\4\36\1\u0101\22\36\31\0\1\36\5\0"+
    "\22\36\3\0\16\36\1\u0102\10\36\31\0\1\36\5\0"+
    "\22\36\3\0\5\36\1\u0103\21\36\31\0\1\36\5\0"+
    "\22\36\3\0\15\36\1\u0104\11\36\31\0\1\36\5\0"+
    "\22\36\3\0\5\36\1\u0105\21\36\31\0\1\36\5\0"+
    "\22\36\3\0\23\36\1\u0106\3\36\31\0\1\36\5\0"+
    "\22\36\3\0\22\36\1\u0107\4\36\31\0\1\36\5\0"+
    "\22\36\3\0\4\36\1\u0108\22\36\31\0\1\36\5\0"+
    "\22\36\3\0\20\36\1\u0109\6\36\31\0\1\36\5\0"+
    "\22\36\3\0\4\36\1\u010a\22\36\31\0\1\36\5\0"+
    "\22\36\3\0\21\36\1\u010b\5\36\31\0\1\36\5\0"+
    "\22\36\3\0\23\36\1\u010c\3\36\31\0\1\36\5\0"+
    "\22\36\3\0\5\36\1\u010d\21\36\31\0\1\36\5\0"+
    "\22\36\3\0\1\36\1\u010e\25\36\31\0\1\36\5\0"+
    "\22\36\3\0\20\36\1\u010f\6\36\31\0\1\36\5\0"+
    "\22\36\3\0\17\36\1\u0110\7\36\31\0\1\36\5\0"+
    "\22\36\3\0\23\36\1\u0111\3\36\31\0\1\36\5\0"+
    "\22\36\3\0\1\36\1\u0112\25\36\75\0\1\u0113\46\0"+
    "\1\36\5\0\22\36\3\0\26\36\1\u0114\31\0\1\36"+
    "\5\0\22\36\3\0\5\36\1\u0115\21\36\31\0\1\36"+
    "\5\0\22\36\3\0\15\36\1\u0116\11\36\31\0\1\36"+
    "\5\0\22\36\3\0\20\36\1\u0117\6\36\31\0\1\36"+
    "\5\0\22\36\3\0\1\36\1\u0118\25\36\31\0\1\36"+
    "\5\0\22\36\3\0\5\36\1\u0119\21\36\31\0\1\36"+
    "\5\0\22\36\3\0\5\36\1\u011a\21\36\31\0\1\36"+
    "\5\0\22\36\3\0\4\36\1\u011b\22\36\31\0\1\36"+
    "\5\0\22\36\3\0\21\36\1\u011c\5\36\31\0\1\36"+
    "\5\0\22\36\3\0\1\36\1\u011d\25\36\31\0\1\36"+
    "\5\0\22\36\3\0\3\36\1\u011e\23\36\31\0\1\36"+
    "\5\0\22\36\3\0\20\36\1\u011f\6\36\31\0\1\36"+
    "\5\0\22\36\3\0\1\36\1\u0120\25\36\31\0\1\36"+
    "\5\0\22\36\3\0\20\36\1\u0121\6\36\31\0\1\36"+
    "\5\0\22\36\3\0\22\36\1\u0122\4\36\31\0\1\36"+
    "\5\0\22\36\3\0\20\36\1\u0123\6\36\31\0\1\36"+
    "\5\0\22\36\3\0\15\36\1\u0124\11\36\31\0\1\36"+
    "\5\0\22\36\3\0\13\36\1\u0125\13\36\31\0\1\36"+
    "\5\0\22\36\3\0\11\36\1\u0126\15\36\31\0\1\36"+
    "\5\0\22\36\3\0\20\36\1\u0127\6\36\31\0\1\36"+
    "\5\0\22\36\3\0\16\36\1\310\10\36\31\0\1\36"+
    "\5\0\22\36\3\0\5\36\1\u0128\21\36\31\0\1\36"+
    "\5\0\22\36\3\0\22\36\1\u0129\4\36\31\0\1\36"+
    "\5\0\22\36\3\0\20\36\1\u012a\6\36\31\0\1\36"+
    "\5\0\22\36\3\0\5\36\1\u012b\21\36\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16800];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\1\11\2\1\3\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\25\1\3\11\6\1\1\11"+
    "\1\1\1\11\2\1\1\11\1\0\1\11\2\0\3\11"+
    "\2\0\3\11\2\0\3\11\1\0\44\1\1\11\2\1"+
    "\3\11\2\1\2\0\1\11\1\0\11\1\1\11\4\1"+
    "\1\11\4\1\1\11\7\1\1\11\14\1\1\0\2\1"+
    "\1\0\36\1\1\11\5\1\1\11\32\1\1\0\27\1"+
    "\1\0\24\1\1\11\30\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

    public ArrayList<ErrorLSS> listaErrores = new ArrayList<>();

    private void agregarError(ErrorLSS errorL){
        listaErrores.add(errorL);
    }

    Stack<Integer> pilaAmbitos = new Stack();
    public void iniciar(){
        pilaAmbitos.push(0);
    }
    //coidgo de usuario en sintaxis java
    public void printConsole(String s){
        //System.out.println(s);
    }
    String cadena="";
    //public Pintar pintar = new Pintar();

    //para la identacion
    boolean estadoIdent = false;
    int contadorAmbito=0, ambitoActual=0;

    public Symbol symbol(String value, int size){
        if(!pilaAmbitos.isEmpty()){
            int ambito = pilaAmbitos.peek();
            if((ambito+1)==size){
                pilaAmbitos.push(ambito+1);
                System.out.println("INDENT: "+(ambito+1));
                return new Symbol(Simbolos.INDENT , yycolumn, yyline, yytext());
            }else if((ambito-1)==size){
                pilaAmbitos.pop();
                System.out.println("DEDENT: "+(ambito-1));
                return new Symbol(Simbolos.DEDENT , yycolumn, yyline, yytext());
            }else if(ambito==size){
                //UN SALATO DE LINEA
                System.out.println("SALTO DE LINEA: "+ambito);
            }else{
                //ErrorLSS de identacion
                System.out.println("ErrorLSS de identacion");
                agregarError(new ErrorLSS(yyline + 1,yycolumn + 1, yytext(), "ErrorLSS de Indentacion", "Sintactico"));
            }
        }
        return null;
    }

    public Symbol symbol(int size){
        System.out.println("\tTabs!: "+size);
        size = (size/4);
        System.out.println("\tTabsS: "+size);
        if(!pilaAmbitos.isEmpty()){
            int ambito = pilaAmbitos.peek();
            if((ambito+1)==size){
                pilaAmbitos.push(ambito+1);
                System.out.println("IDENT: "+(ambito+1));
                return new Symbol(Simbolos.INDENT , yycolumn, yyline, yytext());
            }else if((ambito-1)==size){
                pilaAmbitos.pop();
                System.out.println("DEDENT: "+(ambito-1));
                return new Symbol(Simbolos.DEDENT , yycolumn, yyline, yytext());
            }else if(ambito==size){
                //UN SALATO DE LINEA
                System.out.println("SALTO DE LINEA: "+ambito);
            }else{
                //ErrorLSS de identacion
                System.out.println("ErrorLSS de identacion");
                agregarError(new ErrorLSS(yyline + 1,yycolumn + 1, yytext(), "ErrorLSS de Indentacion", "Sintactico"));
            }
        }
        return null;
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { //System.out.println("CUALQUIER_SIM: "+yytext()); 
                                    //ErrorG e = new ErrorG(yyline+1, yycolumn+1,yytext(),"Lexico","ErrorLSS Lexico token: " + yytext()+"   Linea: " + (yyline+1) + " ,    Columna: " + (yycolumn+1));
                                    //listaErrores.add(e);
                                    //return new Symbol(Simbolos.CUALQUIER_SIM , yycolumn, yyline, yytext());
                                            //printConsole("ERR: "+yytext()+"\n"); /*return new Symbol(Simbolos.OTROS , yycolumn, yyline, yytext());*/
            }
            // fall through
          case 91: break;
          case 2:
            { /*Ignore*/
            }
            // fall through
          case 92: break;
          case 3:
            { Symbol sim = symbol(yytext(), yytext().length()); if(sim!=null){return sim;}else{/*IGNORAR*/}
            }
            // fall through
          case 93: break;
          case 4:
            { printConsole(yytext()); return new Symbol(Simbolos.NOT , yycolumn, yyline, yytext());
            }
            // fall through
          case 94: break;
          case 5:
            { printConsole(yytext()); return new Symbol(Simbolos.MODULO , yycolumn, yyline, yytext());
            }
            // fall through
          case 95: break;
          case 6:
            { printConsole(yytext()+"\n"); return new Symbol(Simbolos.PA_A , yycolumn, yyline, yytext());
            }
            // fall through
          case 96: break;
          case 7:
            { printConsole(yytext()); return new Symbol(Simbolos.PA_C , yycolumn, yyline, yytext());
            }
            // fall through
          case 97: break;
          case 8:
            { printConsole(yytext()); return new Symbol(Simbolos.POR , yycolumn, yyline, yytext());
            }
            // fall through
          case 98: break;
          case 9:
            { printConsole(yytext()); return new Symbol(Simbolos.MAS , yycolumn, yyline, yytext());
            }
            // fall through
          case 99: break;
          case 10:
            { printConsole(yytext()); return new Symbol(Simbolos.COMA , yycolumn, yyline, yytext());
            }
            // fall through
          case 100: break;
          case 11:
            { printConsole(yytext()); return new Symbol(Simbolos.MENOS , yycolumn, yyline, yytext());
            }
            // fall through
          case 101: break;
          case 12:
            { printConsole(yytext()); return new Symbol(Simbolos.DIVISION , yycolumn, yyline, yytext());
            }
            // fall through
          case 102: break;
          case 13:
            { printConsole(yytext()); return new Symbol(Simbolos.NUMERO , yycolumn, yyline, yytext());
            }
            // fall through
          case 103: break;
          case 14:
            { printConsole(yytext()+"\n"); return new Symbol(Simbolos.PUNTO_COMA , yycolumn, yyline, yytext());
            }
            // fall through
          case 104: break;
          case 15:
            { printConsole(yytext()); return new Symbol(Simbolos.MENOR_Q , yycolumn, yyline, yytext());
            }
            // fall through
          case 105: break;
          case 16:
            { printConsole(yytext()); return new Symbol(Simbolos.IGUAL , yycolumn, yyline, yytext());
            }
            // fall through
          case 106: break;
          case 17:
            { printConsole(yytext()); return new Symbol(Simbolos.MAYOR_Q , yycolumn, yyline, yytext());
            }
            // fall through
          case 107: break;
          case 18:
            { printConsole(yytext()); return new Symbol(Simbolos.IDENTIFICADOR , yycolumn, yyline, yytext());
            }
            // fall through
          case 108: break;
          case 19:
            { printConsole(yytext()+"\n"); return new Symbol(Simbolos.CORCHETE_A , yycolumn, yyline, yytext());
            }
            // fall through
          case 109: break;
          case 20:
            { printConsole(yytext()); return new Symbol(Simbolos.CORCHETE_C , yycolumn, yyline, yytext());
            }
            // fall through
          case 110: break;
          case 21:
            { printConsole(yytext()); return new Symbol(Simbolos.POTENCIA , yycolumn, yyline, yytext());
            }
            // fall through
          case 111: break;
          case 22:
            { printConsole(yytext()+"\n"); return new Symbol(Simbolos.LLAVE_A , yycolumn, yyline, yytext());
            }
            // fall through
          case 112: break;
          case 23:
            { printConsole(yytext()+"\n"); return new Symbol(Simbolos.LLAVE_C , yycolumn, yyline, yytext());
            }
            // fall through
          case 113: break;
          case 24:
            { printConsole(yytext()); return new Symbol(Simbolos.IS_NULL , yycolumn, yyline, yytext());
            }
            // fall through
          case 114: break;
          case 25:
            { printConsole(yytext()); return new Symbol(Simbolos.DIFERENTE , yycolumn, yyline, yytext());
            }
            // fall through
          case 115: break;
          case 26:
            { printConsole(yytext()); return new Symbol(Simbolos.CADENA , yycolumn, yyline, yytext());
            }
            // fall through
          case 116: break;
          case 27:
            { printConsole(yytext()); return new Symbol(Simbolos.AND , yycolumn, yyline, yytext());
            }
            // fall through
          case 117: break;
          case 28:
            { printConsole(yytext()); return new Symbol(Simbolos.XOR , yycolumn, yyline, yytext());
            }
            // fall through
          case 118: break;
          case 29:
            { printConsole(yytext()); return new Symbol(Simbolos.MAS_MAS , yycolumn, yyline, yytext());
            }
            // fall through
          case 119: break;
          case 30:
            { printConsole(yytext()); return new Symbol(Simbolos.MAS_IGUAL , yycolumn, yyline, yytext());
            }
            // fall through
          case 120: break;
          case 31:
            { printConsole(yytext()); return new Symbol(Simbolos.MENOS_MENOS , yycolumn, yyline, yytext());
            }
            // fall through
          case 121: break;
          case 32:
            { printConsole(yytext()); return new Symbol(Simbolos.MENOR_IGUAL , yycolumn, yyline, yytext());
            }
            // fall through
          case 122: break;
          case 33:
            { printConsole(yytext()); return new Symbol(Simbolos.IGUAL_IGUAL , yycolumn, yyline, yytext());
            }
            // fall through
          case 123: break;
          case 34:
            { printConsole(yytext()); return new Symbol(Simbolos.MAYOR_IGUAL , yycolumn, yyline, yytext());
            }
            // fall through
          case 124: break;
          case 35:
            { printConsole(yytext()); return new Symbol(Simbolos.DO , yycolumn, yyline, yytext());
            }
            // fall through
          case 125: break;
          case 36:
            { printConsole(yytext()); return new Symbol(Simbolos.FA , yycolumn, yyline, yytext());
            }
            // fall through
          case 126: break;
          case 37:
            { printConsole(yytext()); return new Symbol(Simbolos.LA , yycolumn, yyline, yytext());
            }
            // fall through
          case 127: break;
          case 38:
            { printConsole(yytext()); return new Symbol(Simbolos.MI , yycolumn, yyline, yytext());
            }
            // fall through
          case 128: break;
          case 39:
            { printConsole(yytext()); return new Symbol(Simbolos.RE , yycolumn, yyline, yytext());
            }
            // fall through
          case 129: break;
          case 40:
            { printConsole(yytext()); return new Symbol(Simbolos.SI , yycolumn, yyline, yytext());
            }
            // fall through
          case 130: break;
          case 41:
            { printConsole(yytext()); return new Symbol(Simbolos.OR , yycolumn, yyline, yytext());
            }
            // fall through
          case 131: break;
          case 42:
            { printConsole(yytext()); return new Symbol(Simbolos.NAND , yycolumn, yyline, yytext());
            }
            // fall through
          case 132: break;
          case 43:
            { printConsole(yytext()); return new Symbol(Simbolos.NOR , yycolumn, yyline, yytext());
            }
            // fall through
          case 133: break;
          case 44:
            { printConsole(yytext()); return new Symbol(Simbolos.CARACTER , yycolumn, yyline, yytext());
            }
            // fall through
          case 134: break;
          case 45:
            { printConsole(yytext()); return new Symbol(Simbolos.DECIMAL , yycolumn, yyline, yytext());
            }
            // fall through
          case 135: break;
          case 46:
            { printConsole("COMENTARIO_SIMPLE: "+yytext()+"\n"); /*return new Symbol(Simbolos.COMENTARIO_LINEA , yycolumn, yyline, yytext());*/
            }
            // fall through
          case 136: break;
          case 47:
            { printConsole(yytext()); return new Symbol(Simbolos.DO_S , yycolumn, yyline, yytext());
            }
            // fall through
          case 137: break;
          case 48:
            { printConsole(yytext()); return new Symbol(Simbolos.FA_S , yycolumn, yyline, yytext());
            }
            // fall through
          case 138: break;
          case 49:
            { printConsole(yytext()); return new Symbol(Simbolos.LA_S , yycolumn, yyline, yytext());
            }
            // fall through
          case 139: break;
          case 50:
            { printConsole(yytext()); return new Symbol(Simbolos.RE_S , yycolumn, yyline, yytext());
            }
            // fall through
          case 140: break;
          case 51:
            { printConsole(yytext()); return new Symbol(Simbolos.SOL , yycolumn, yyline, yytext());
            }
            // fall through
          case 141: break;
          case 52:
            { printConsole(yytext()); return new Symbol(Simbolos.VAR , yycolumn, yyline, yytext());
            }
            // fall through
          case 142: break;
          case 53:
            { System.out.println("TABESPACIOS: Linea: "+yyline+", col: "+yycolumn); Symbol sim = symbol(yytext().length()); if(sim!=null){return sim;}else{/*IGNORAR*/}
            }
            // fall through
          case 143: break;
          case 54:
            { printConsole("COMENTARIO: "+yytext()+"\n"); /*return new Symbol(Simbolos.COMENTARIO_BLOQUE , yycolumn, yyline, yytext());*/
            }
            // fall through
          case 144: break;
          case 55:
            { printConsole(yytext()); return new Symbol(Simbolos.CASO , yycolumn, yyline, yytext());
            }
            // fall through
          case 145: break;
          case 56:
            { printConsole(yytext()); return new Symbol(Simbolos.KEEP , yycolumn, yyline, yytext());
            }
            // fall through
          case 146: break;
          case 57:
            { printConsole(yytext()); return new Symbol(Simbolos.PARA , yycolumn, yyline, yytext());
            }
            // fall through
          case 147: break;
          case 58:
            { printConsole(yytext()); return new Symbol(Simbolos.SINO , yycolumn, yyline, yytext());
            }
            // fall through
          case 148: break;
          case 59:
            { printConsole(yytext()); return new Symbol(Simbolos.SOL_S , yycolumn, yyline, yytext());
            }
            // fall through
          case 149: break;
          case 60:
            { printConsole(yytext()); return new Symbol(Simbolos.TRUE , yycolumn, yyline, yytext());
            }
            // fall through
          case 150: break;
          case 61:
            { printConsole(yytext()); return new Symbol(Simbolos.VOID , yycolumn, yyline, yytext());
            }
            // fall through
          case 151: break;
          case 62:
            { printConsole(yytext()); return new Symbol(Simbolos.DOBLE , yycolumn, yyline, yytext());
            }
            // fall through
          case 152: break;
          case 63:
            { printConsole(yytext()); return new Symbol(Simbolos.FALSE , yycolumn, yyline, yytext());
            }
            // fall through
          case 153: break;
          case 64:
            { printConsole(yytext()); return new Symbol(Simbolos.HACER , yycolumn, yyline, yytext());
            }
            // fall through
          case 154: break;
          case 65:
            { printConsole(yytext()); return new Symbol(Simbolos.PARES , yycolumn, yyline, yytext());
            }
            // fall through
          case 155: break;
          case 66:
            { printConsole(yytext()); return new Symbol(Simbolos.PISTA, yycolumn, yyline, yytext());
            }
            // fall through
          case 156: break;
          case 67:
            { printConsole(yytext()); return new Symbol(Simbolos.SALIR , yycolumn, yyline, yytext());
            }
            // fall through
          case 157: break;
          case 68:
            { printConsole(yytext()); return new Symbol(Simbolos.CADENA_RSV , yycolumn, yyline, yytext());
            }
            // fall through
          case 158: break;
          case 69:
            { printConsole(yytext()); return new Symbol(Simbolos.ENTERO , yycolumn, yyline, yytext());
            }
            // fall through
          case 159: break;
          case 70:
            { printConsole(yytext()); return new Symbol(Simbolos.PRIMOS , yycolumn, yyline, yytext());
            }
            // fall through
          case 160: break;
          case 71:
            { printConsole(yytext()); return new Symbol(Simbolos.SWITCH , yycolumn, yyline, yytext());
            }
            // fall through
          case 161: break;
          case 72:
            { printConsole(yytext()); return new Symbol(Simbolos.ARREGLO , yycolumn, yyline, yytext());
            }
            // fall through
          case 162: break;
          case 73:
            { printConsole(yytext()); return new Symbol(Simbolos.BOOLEAN , yycolumn, yyline, yytext());
            }
            // fall through
          case 163: break;
          case 74:
            { printConsole(yytext()); return new Symbol(Simbolos.DEFAULT , yycolumn, yyline, yytext());
            }
            // fall through
          case 164: break;
          case 75:
            { printConsole(yytext()); return new Symbol(Simbolos.ESPERAR , yycolumn, yyline, yytext());
            }
            // fall through
          case 165: break;
          case 76:
            { printConsole(yytext()); return new Symbol(Simbolos.IMPARES , yycolumn, yyline, yytext());
            }
            // fall through
          case 166: break;
          case 77:
            { printConsole(yytext()); return new Symbol(Simbolos.MENSAJE , yycolumn, yyline, yytext());
            }
            // fall through
          case 167: break;
          case 78:
            { printConsole(yytext()); return new Symbol(Simbolos.ORDENAR , yycolumn, yyline, yytext());
            }
            // fall through
          case 168: break;
          case 79:
            { printConsole(yytext()); return new Symbol(Simbolos.SINO_SI , yycolumn, yyline, yytext());
            }
            // fall through
          case 169: break;
          case 80:
            { printConsole(yytext()); return new Symbol(Simbolos.CARACTER_RSV , yycolumn, yyline, yytext());
            }
            // fall through
          case 170: break;
          case 81:
            { printConsole(yytext()); return new Symbol(Simbolos.EXTIENDE , yycolumn, yyline, yytext());
            }
            // fall through
          case 171: break;
          case 82:
            { printConsole(yytext()); return new Symbol(Simbolos.LONGITUD , yycolumn, yyline, yytext());
            }
            // fall through
          case 172: break;
          case 83:
            { printConsole(yytext()); return new Symbol(Simbolos.MIENTRAS , yycolumn, yyline, yytext());
            }
            // fall through
          case 173: break;
          case 84:
            { printConsole(yytext()); return new Symbol(Simbolos.RETORNAR , yycolumn, yyline, yytext());
            }
            // fall through
          case 174: break;
          case 85:
            { printConsole(yytext()); return new Symbol(Simbolos.CONTINUAR , yycolumn, yyline, yytext());
            }
            // fall through
          case 175: break;
          case 86:
            { printConsole(yytext()); return new Symbol(Simbolos.PRINCIPAL , yycolumn, yyline, yytext());
            }
            // fall through
          case 176: break;
          case 87:
            { printConsole(yytext()); return new Symbol(Simbolos.SUMARIZAR , yycolumn, yyline, yytext());
            }
            // fall through
          case 177: break;
          case 88:
            { printConsole(yytext()); return new Symbol(Simbolos.ASCENDENTE , yycolumn, yyline, yytext());
            }
            // fall through
          case 178: break;
          case 89:
            { printConsole(yytext()); return new Symbol(Simbolos.REPRODUCIR , yycolumn, yyline, yytext());
            }
            // fall through
          case 179: break;
          case 90:
            { printConsole(yytext()); return new Symbol(Simbolos.DESCENDENTE , yycolumn, yyline, yytext());
            }
            // fall through
          case 180: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
