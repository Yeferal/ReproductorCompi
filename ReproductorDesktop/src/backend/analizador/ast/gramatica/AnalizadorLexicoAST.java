// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: LexicoAST.jflex

package backend.analizador.ast.gramatica;
import backend.analizador.ErrorLSS;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.Stack;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class AnalizadorLexicoAST implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  4,  5,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     6,  7,  8,  9,  0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 
    21, 21, 21, 21, 21, 21, 21, 21, 21, 21,  0, 22, 23, 24, 25,  0, 
    26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 33, 36, 37, 38, 33, 39, 
    40, 33, 41, 42, 43, 33, 44, 33, 33, 33, 33, 45,  0, 46, 47, 48, 
     0, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 36, 59, 60, 61, 62, 
    63, 33, 64, 65, 66, 67, 44, 68, 69, 33, 70, 71, 72, 73,  0,  0, 
     0,  0,  0,  0,  0,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 33,  0,  0,  0,  0,  0,  0,  0, 33,  0,  0,  0, 33,  0,  0, 
     0, 33,  0, 33,  0,  0,  0,  0,  0,  0, 33,  0,  0,  0,  0,  0, 
     0, 33,  0,  0,  0,  0,  0,  0,  0, 33,  0,  0,  0, 33,  0,  0, 
     0, 33,  0, 33,  0,  0,  0,  0,  0,  0, 33,  0,  0,  0,  0,  0
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\1\1\3\1\1\1\4\2\1"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\22\21\1\22\1\23\1\24"+
    "\6\21\1\25\1\1\1\26\1\1\1\27\1\0\1\30"+
    "\2\0\1\31\1\32\1\33\2\0\1\34\1\35\1\36"+
    "\2\0\1\37\1\40\1\41\1\0\6\21\1\42\3\21"+
    "\1\43\3\21\1\44\2\21\1\45\4\21\1\46\1\21"+
    "\1\47\13\21\1\50\1\1\1\51\1\52\2\53\1\54"+
    "\2\0\1\55\1\0\11\21\1\56\4\21\1\57\4\21"+
    "\1\60\7\21\1\61\4\21\1\62\3\21\1\63\2\21"+
    "\1\2\1\0\1\64\1\55\1\0\5\21\1\65\12\21"+
    "\1\66\4\21\1\67\7\21\1\70\1\71\2\21\1\72"+
    "\1\21\1\73\1\64\10\21\1\74\3\21\1\75\1\76"+
    "\5\21\1\77\1\100\4\21\1\101\1\0\6\21\1\102"+
    "\4\21\1\103\7\21\1\104\3\21\1\0\1\21\1\105"+
    "\1\21\1\106\1\21\1\107\2\21\1\110\1\21\1\111"+
    "\1\21\1\112\1\21\1\113\1\21\1\114\3\21\1\115"+
    "\3\21\1\116\2\21\1\117\1\120\1\121\2\21\1\122"+
    "\3\21\1\123\1\21\1\124\1\21\1\125\1\126\1\21"+
    "\1\127\1\130";

  private static int [] zzUnpackAction() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\112\0\224\0\336\0\u0128\0\u0172\0\u01bc\0\112"+
    "\0\u0206\0\u0250\0\112\0\112\0\112\0\u029a\0\112\0\u02e4"+
    "\0\112\0\u032e\0\112\0\u0378\0\u03c2\0\u040c\0\u0456\0\u04a0"+
    "\0\u04ea\0\u0534\0\u057e\0\u05c8\0\u0612\0\u065c\0\u06a6\0\u06f0"+
    "\0\u073a\0\u0784\0\u07ce\0\u0818\0\u0862\0\u08ac\0\u08f6\0\u0940"+
    "\0\112\0\112\0\112\0\u098a\0\u09d4\0\u0a1e\0\u0a68\0\u0ab2"+
    "\0\u0afc\0\112\0\u0b46\0\112\0\u0b90\0\112\0\u0bda\0\112"+
    "\0\u0c24\0\u01bc\0\112\0\112\0\112\0\u0c6e\0\u0cb8\0\112"+
    "\0\112\0\112\0\u0d02\0\u0d4c\0\112\0\112\0\112\0\u0d96"+
    "\0\u0de0\0\u0e2a\0\u0e74\0\u0ebe\0\u0f08\0\u0f52\0\u0f9c\0\u0fe6"+
    "\0\u1030\0\u107a\0\u10c4\0\u110e\0\u1158\0\u11a2\0\u11ec\0\u1236"+
    "\0\u1280\0\u12ca\0\u1314\0\u135e\0\u13a8\0\u13f2\0\u143c\0\u1486"+
    "\0\u14d0\0\u151a\0\u1564\0\u15ae\0\u15f8\0\u1642\0\u168c\0\u16d6"+
    "\0\u1720\0\u176a\0\u12ca\0\u17b4\0\112\0\u17fe\0\112\0\112"+
    "\0\112\0\u0c6e\0\u0d02\0\u1848\0\u1892\0\112\0\u18dc\0\u1926"+
    "\0\u1970\0\u19ba\0\u1a04\0\u1a4e\0\u1a98\0\u1ae2\0\u1b2c\0\u1b76"+
    "\0\112\0\u1bc0\0\u1c0a\0\u1c54\0\u1c9e\0\112\0\u1ce8\0\u1d32"+
    "\0\u1d7c\0\u1dc6\0\112\0\u1e10\0\u1e5a\0\u1ea4\0\u1eee\0\u1f38"+
    "\0\u1f82\0\u1fcc\0\112\0\u2016\0\u2060\0\u20aa\0\u20f4\0\u213e"+
    "\0\u2188\0\u21d2\0\u221c\0\u0612\0\u2266\0\u22b0\0\u22fa\0\u2344"+
    "\0\u1848\0\u238e\0\u238e\0\u23d8\0\u2422\0\u246c\0\u24b6\0\u2500"+
    "\0\u0612\0\u254a\0\u2594\0\u25de\0\u2628\0\u2672\0\u26bc\0\u2706"+
    "\0\u2750\0\u279a\0\u27e4\0\u0612\0\u282e\0\u2878\0\u28c2\0\u290c"+
    "\0\u0612\0\u2956\0\u29a0\0\u29ea\0\u2a34\0\u2a7e\0\u2ac8\0\u2b12"+
    "\0\u2b5c\0\112\0\u2ba6\0\u2bf0\0\u0612\0\u2c3a\0\u0612\0\112"+
    "\0\u2c84\0\u2cce\0\u2d18\0\u2d62\0\u2dac\0\u2df6\0\u2e40\0\u2e8a"+
    "\0\u0612\0\u2ed4\0\u2f1e\0\u2f68\0\u0612\0\u0612\0\u2fb2\0\u2ffc"+
    "\0\u3046\0\u3090\0\u30da\0\u0612\0\u0612\0\u3124\0\u316e\0\u31b8"+
    "\0\u3202\0\u0612\0\u324c\0\u3296\0\u32e0\0\u332a\0\u3374\0\u33be"+
    "\0\u3408\0\u0612\0\u3452\0\u349c\0\u34e6\0\u3530\0\u0612\0\u357a"+
    "\0\u35c4\0\u360e\0\u3658\0\u36a2\0\u36ec\0\u3736\0\u0612\0\u3780"+
    "\0\u37ca\0\u3814\0\u385e\0\u38a8\0\u0612\0\u38f2\0\u0612\0\u393c"+
    "\0\u0612\0\u3986\0\u39d0\0\u0612\0\u3a1a\0\u0612\0\u3a64\0\u0612"+
    "\0\u3aae\0\u0612\0\u3af8\0\u0612\0\u3b42\0\u3b8c\0\u3bd6\0\112"+
    "\0\u3c20\0\u3c6a\0\u3cb4\0\u0612\0\u3cfe\0\u3d48\0\u0612\0\u0612"+
    "\0\u0612\0\u3d92\0\u3ddc\0\u0612\0\u3e26\0\u3e70\0\u3eba\0\u0612"+
    "\0\u3f04\0\u0612\0\u3f4e\0\u0612\0\u0612\0\u3f98\0\u0612\0\u0612";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\2\0\1\5\1\6\1\7"+
    "\1\2\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\2\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\2\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\2"+
    "\1\27\1\30\1\31\1\54\1\33\1\55\1\35\1\36"+
    "\1\37\1\35\1\56\1\57\1\35\1\43\1\44\1\60"+
    "\1\61\1\47\4\35\1\62\1\63\1\64\113\0\1\3"+
    "\1\0\1\3\2\0\1\3\105\0\1\4\110\0\1\3"+
    "\1\0\1\3\2\0\1\65\112\0\1\66\3\0\1\67"+
    "\14\0\1\70\57\0\1\71\1\0\10\72\1\73\101\72"+
    "\13\0\1\74\74\0\1\75\10\0\1\76\1\0\1\77"+
    "\2\76\3\0\1\76\2\0\4\76\4\0\23\76\3\0"+
    "\27\76\1\0\1\76\21\0\1\100\7\0\1\101\103\0"+
    "\1\102\112\0\1\103\1\0\1\22\106\0\1\104\5\0"+
    "\1\105\111\0\1\106\111\0\1\107\1\110\105\0\1\35"+
    "\5\0\22\35\3\0\20\35\1\111\1\112\5\35\30\0"+
    "\1\35\5\0\22\35\3\0\16\35\1\113\10\35\30\0"+
    "\1\35\5\0\22\35\3\0\1\35\1\114\14\35\1\115"+
    "\10\35\30\0\1\35\5\0\22\35\3\0\5\35\1\116"+
    "\10\35\1\117\10\35\30\0\1\35\5\0\22\35\3\0"+
    "\15\35\1\120\3\35\1\121\3\35\1\122\1\35\30\0"+
    "\1\35\5\0\22\35\3\0\1\35\1\123\25\35\30\0"+
    "\1\35\5\0\22\35\3\0\27\35\30\0\1\35\5\0"+
    "\22\35\3\0\1\35\1\124\25\35\30\0\1\35\5\0"+
    "\22\35\3\0\14\35\1\125\12\35\30\0\1\35\5\0"+
    "\22\35\3\0\5\35\1\126\21\35\30\0\1\35\5\0"+
    "\22\35\3\0\1\35\1\127\14\35\1\130\10\35\30\0"+
    "\1\35\5\0\22\35\3\0\5\35\1\131\3\35\1\132"+
    "\15\35\30\0\1\35\5\0\22\35\3\0\20\35\1\133"+
    "\6\35\30\0\1\35\5\0\22\35\3\0\1\35\1\134"+
    "\7\35\1\135\6\35\1\136\6\35\30\0\1\35\5\0"+
    "\22\35\3\0\5\35\1\137\21\35\30\0\1\35\5\0"+
    "\22\35\3\0\1\35\1\140\7\35\1\141\4\35\1\142"+
    "\4\35\1\143\1\144\2\35\30\0\1\35\5\0\22\35"+
    "\3\0\20\35\1\145\6\35\30\0\1\35\5\0\22\35"+
    "\3\0\1\35\1\146\3\35\1\147\10\35\1\150\10\35"+
    "\30\0\1\35\5\0\22\35\3\0\5\35\1\116\10\35"+
    "\1\151\10\35\30\0\1\35\5\0\22\35\3\0\1\35"+
    "\1\152\25\35\30\0\1\35\5\0\22\35\3\0\16\35"+
    "\1\130\10\35\30\0\1\35\5\0\22\35\3\0\5\35"+
    "\1\131\3\35\1\153\15\35\30\0\1\35\5\0\22\35"+
    "\3\0\5\35\1\154\21\35\30\0\1\35\5\0\22\35"+
    "\3\0\1\35\1\140\7\35\1\141\11\35\1\143\1\144"+
    "\2\35\113\0\1\155\2\0\1\3\1\0\1\3\2\0"+
    "\1\156\116\0\1\157\206\0\1\160\15\0\1\161\106\0"+
    "\1\76\2\0\1\162\60\0\1\76\2\0\1\76\1\0"+
    "\1\76\34\0\1\163\64\0\17\164\1\0\2\164\1\165"+
    "\67\164\3\110\1\166\1\0\3\110\1\167\101\110\25\0"+
    "\1\35\5\0\22\35\3\0\20\35\1\170\6\35\30\0"+
    "\1\35\5\0\22\35\3\0\3\35\1\171\23\35\30\0"+
    "\1\35\5\0\22\35\3\0\16\35\1\172\10\35\30\0"+
    "\1\35\5\0\22\35\3\0\4\35\1\173\13\35\1\174"+
    "\1\175\5\35\30\0\1\35\5\0\22\35\3\0\15\35"+
    "\1\176\11\35\30\0\1\35\5\0\22\35\3\0\6\35"+
    "\1\177\12\35\1\200\5\35\14\0\1\201\13\0\1\35"+
    "\5\0\22\35\3\0\2\35\1\202\24\35\30\0\1\35"+
    "\5\0\22\35\3\0\22\35\1\203\4\35\30\0\1\35"+
    "\5\0\22\35\3\0\17\35\1\204\7\35\30\0\1\35"+
    "\5\0\22\35\3\0\22\35\1\205\4\35\14\0\1\206"+
    "\13\0\1\35\5\0\22\35\3\0\13\35\1\207\13\35"+
    "\30\0\1\35\5\0\22\35\3\0\3\35\1\210\23\35"+
    "\30\0\1\35\5\0\22\35\3\0\17\35\1\211\7\35"+
    "\30\0\1\35\5\0\22\35\3\0\5\35\1\212\21\35"+
    "\14\0\1\213\13\0\1\35\5\0\22\35\3\0\27\35"+
    "\30\0\1\35\5\0\22\35\3\0\15\35\1\214\11\35"+
    "\30\0\1\35\5\0\22\35\3\0\15\35\1\215\11\35"+
    "\30\0\1\35\5\0\22\35\3\0\5\35\1\216\21\35"+
    "\30\0\1\35\5\0\22\35\3\0\4\35\1\217\22\35"+
    "\30\0\1\35\5\0\22\35\3\0\20\35\1\220\6\35"+
    "\30\0\1\35\5\0\22\35\3\0\21\35\1\221\5\35"+
    "\30\0\1\35\5\0\22\35\3\0\11\35\1\222\15\35"+
    "\14\0\1\223\13\0\1\35\5\0\22\35\3\0\17\35"+
    "\1\224\2\35\1\225\4\35\30\0\1\35\5\0\22\35"+
    "\3\0\13\35\1\226\13\35\30\0\1\35\5\0\22\35"+
    "\3\0\15\35\1\227\11\35\30\0\1\35\5\0\22\35"+
    "\3\0\13\35\1\230\13\35\30\0\1\35\5\0\22\35"+
    "\3\0\14\35\1\231\12\35\30\0\1\35\5\0\22\35"+
    "\3\0\11\35\1\232\15\35\30\0\1\35\5\0\22\35"+
    "\3\0\23\35\1\233\3\35\30\0\1\35\5\0\22\35"+
    "\3\0\20\35\1\234\6\35\30\0\1\35\5\0\22\35"+
    "\3\0\20\35\1\235\6\35\30\0\1\35\5\0\22\35"+
    "\3\0\11\35\1\236\15\35\30\0\1\35\5\0\22\35"+
    "\3\0\2\35\1\202\24\35\30\0\1\35\5\0\22\35"+
    "\3\0\13\35\1\207\13\35\30\0\1\35\5\0\22\35"+
    "\3\0\17\35\1\224\2\35\1\225\4\35\4\0\1\3"+
    "\1\0\1\3\2\0\1\237\103\0\22\164\1\240\111\164"+
    "\1\240\6\164\1\241\60\164\3\167\1\242\1\243\105\167"+
    "\25\0\1\35\5\0\22\35\3\0\5\35\1\244\21\35"+
    "\30\0\1\35\5\0\22\35\3\0\5\35\1\245\21\35"+
    "\30\0\1\35\5\0\22\35\3\0\13\35\1\246\13\35"+
    "\30\0\1\35\5\0\22\35\3\0\5\35\1\247\21\35"+
    "\30\0\1\35\5\0\22\35\3\0\1\35\1\250\25\35"+
    "\30\0\1\35\5\0\22\35\3\0\16\35\1\251\10\35"+
    "\30\0\1\35\5\0\22\35\3\0\22\35\1\252\4\35"+
    "\30\0\1\35\5\0\22\35\3\0\1\35\1\253\25\35"+
    "\30\0\1\35\5\0\22\35\3\0\3\35\1\254\23\35"+
    "\30\0\1\35\5\0\22\35\3\0\13\35\1\255\13\35"+
    "\30\0\1\35\5\0\22\35\3\0\5\35\1\256\21\35"+
    "\30\0\1\35\5\0\22\35\3\0\5\35\1\257\21\35"+
    "\30\0\1\35\5\0\22\35\3\0\11\35\1\260\15\35"+
    "\30\0\1\35\5\0\22\35\3\0\21\35\1\261\5\35"+
    "\30\0\1\35\5\0\22\35\3\0\5\35\1\262\21\35"+
    "\30\0\1\35\5\0\22\35\3\0\1\35\1\263\25\35"+
    "\30\0\1\35\5\0\22\35\3\0\17\35\1\264\7\35"+
    "\30\0\1\35\5\0\22\35\3\0\7\35\1\265\17\35"+
    "\30\0\1\35\5\0\22\35\3\0\21\35\1\266\5\35"+
    "\30\0\1\35\5\0\22\35\3\0\15\35\1\267\11\35"+
    "\30\0\1\35\5\0\22\35\3\0\5\35\1\270\21\35"+
    "\30\0\1\35\5\0\22\35\3\0\1\35\1\271\3\35"+
    "\1\272\21\35\30\0\1\35\5\0\22\35\3\0\22\35"+
    "\1\273\4\35\30\0\1\35\5\0\22\35\3\0\14\35"+
    "\1\274\1\275\11\35\30\0\1\35\5\0\22\35\3\0"+
    "\20\35\1\276\6\35\30\0\1\35\5\0\22\35\3\0"+
    "\16\35\1\277\10\35\30\0\1\35\5\0\22\35\3\0"+
    "\11\35\1\300\15\35\30\0\1\35\5\0\22\35\3\0"+
    "\16\35\1\301\10\35\14\0\1\302\13\0\1\35\5\0"+
    "\22\35\3\0\27\35\30\0\1\35\5\0\22\35\3\0"+
    "\1\35\1\303\25\35\30\0\1\35\5\0\22\35\3\0"+
    "\22\35\1\304\4\35\30\0\1\35\5\0\22\35\3\0"+
    "\5\35\1\305\21\35\30\0\1\35\5\0\22\35\3\0"+
    "\4\35\1\306\22\35\30\0\1\35\5\0\22\35\3\0"+
    "\4\35\1\307\22\35\4\0\1\3\1\0\1\3\2\0"+
    "\1\5\103\0\22\164\1\240\6\164\1\310\60\164\10\243"+
    "\1\110\101\243\25\0\1\35\5\0\22\35\3\0\7\35"+
    "\1\311\17\35\30\0\1\35\5\0\22\35\3\0\15\35"+
    "\1\312\11\35\30\0\1\35\5\0\22\35\3\0\5\35"+
    "\1\313\21\35\30\0\1\35\5\0\22\35\3\0\15\35"+
    "\1\314\11\35\30\0\1\35\5\0\22\35\3\0\3\35"+
    "\1\315\23\35\30\0\1\35\5\0\22\35\3\0\11\35"+
    "\1\316\15\35\30\0\1\35\5\0\22\35\3\0\23\35"+
    "\1\317\3\35\30\0\1\35\5\0\22\35\3\0\5\35"+
    "\1\320\21\35\30\0\1\35\5\0\22\35\3\0\5\35"+
    "\1\321\21\35\30\0\1\35\5\0\22\35\3\0\20\35"+
    "\1\322\6\35\30\0\1\35\5\0\22\35\3\0\20\35"+
    "\1\323\6\35\30\0\1\35\5\0\22\35\3\0\5\35"+
    "\1\324\21\35\30\0\1\35\5\0\22\35\3\0\5\35"+
    "\1\325\10\35\1\325\10\35\30\0\1\35\5\0\22\35"+
    "\3\0\20\35\1\326\6\35\30\0\1\35\5\0\22\35"+
    "\3\0\20\35\1\327\6\35\30\0\1\35\5\0\22\35"+
    "\3\0\11\35\1\330\15\35\30\0\1\35\5\0\22\35"+
    "\3\0\1\35\1\331\25\35\30\0\1\35\5\0\22\35"+
    "\3\0\22\35\1\332\4\35\30\0\1\35\5\0\22\35"+
    "\3\0\15\35\1\333\11\35\30\0\1\35\5\0\22\35"+
    "\3\0\21\35\1\334\5\35\30\0\1\35\5\0\22\35"+
    "\3\0\1\35\1\335\25\35\30\0\1\35\5\0\22\35"+
    "\3\0\16\35\1\336\10\35\30\0\1\35\5\0\22\35"+
    "\3\0\3\35\1\337\23\35\30\0\1\35\5\0\22\35"+
    "\3\0\16\35\1\340\10\35\30\0\1\35\5\0\22\35"+
    "\3\0\20\35\1\341\6\35\30\0\1\35\5\0\22\35"+
    "\3\0\20\35\1\342\6\35\11\0\1\343\16\0\1\35"+
    "\5\0\22\35\3\0\27\35\30\0\1\35\5\0\22\35"+
    "\3\0\20\35\1\344\6\35\30\0\1\35\5\0\22\35"+
    "\3\0\3\35\1\345\23\35\30\0\1\35\5\0\22\35"+
    "\3\0\1\35\1\346\25\35\30\0\1\35\5\0\22\35"+
    "\3\0\13\35\1\347\13\35\30\0\1\35\5\0\22\35"+
    "\3\0\4\35\1\350\22\35\30\0\1\35\5\0\22\35"+
    "\3\0\1\35\1\351\25\35\30\0\1\35\5\0\22\35"+
    "\3\0\1\35\1\352\25\35\30\0\1\35\5\0\22\35"+
    "\3\0\22\35\1\353\4\35\30\0\1\35\5\0\22\35"+
    "\3\0\15\35\1\354\11\35\30\0\1\35\5\0\22\35"+
    "\3\0\13\35\1\355\13\35\30\0\1\35\5\0\22\35"+
    "\3\0\15\35\1\356\11\35\30\0\1\35\5\0\22\35"+
    "\3\0\16\35\1\357\10\35\30\0\1\35\5\0\22\35"+
    "\3\0\1\35\1\360\25\35\30\0\1\35\5\0\22\35"+
    "\3\0\15\35\1\361\11\35\30\0\1\35\5\0\22\35"+
    "\3\0\5\35\1\362\21\35\30\0\1\35\5\0\22\35"+
    "\3\0\22\35\1\363\4\35\30\0\1\35\5\0\22\35"+
    "\3\0\12\35\1\364\14\35\30\0\1\35\5\0\22\35"+
    "\3\0\20\35\1\365\6\35\30\0\1\35\5\0\22\35"+
    "\3\0\1\35\1\366\25\35\30\0\1\35\5\0\22\35"+
    "\3\0\21\35\1\367\5\35\30\0\1\35\5\0\22\35"+
    "\3\0\11\35\1\370\15\35\30\0\1\35\5\0\22\35"+
    "\3\0\4\35\1\371\22\35\30\0\1\35\5\0\22\35"+
    "\3\0\15\35\1\372\11\35\104\0\1\373\35\0\1\35"+
    "\5\0\22\35\3\0\11\35\1\374\15\35\30\0\1\35"+
    "\5\0\22\35\3\0\10\35\1\375\16\35\30\0\1\35"+
    "\5\0\22\35\3\0\4\35\1\376\22\35\30\0\1\35"+
    "\5\0\22\35\3\0\16\35\1\377\10\35\30\0\1\35"+
    "\5\0\22\35\3\0\5\35\1\u0100\21\35\30\0\1\35"+
    "\5\0\22\35\3\0\15\35\1\u0101\11\35\30\0\1\35"+
    "\5\0\22\35\3\0\5\35\1\u0102\21\35\30\0\1\35"+
    "\5\0\22\35\3\0\23\35\1\u0103\3\35\30\0\1\35"+
    "\5\0\22\35\3\0\22\35\1\u0104\4\35\30\0\1\35"+
    "\5\0\22\35\3\0\4\35\1\u0105\22\35\30\0\1\35"+
    "\5\0\22\35\3\0\20\35\1\u0106\6\35\30\0\1\35"+
    "\5\0\22\35\3\0\4\35\1\u0107\22\35\30\0\1\35"+
    "\5\0\22\35\3\0\21\35\1\u0108\5\35\30\0\1\35"+
    "\5\0\22\35\3\0\23\35\1\u0109\3\35\30\0\1\35"+
    "\5\0\22\35\3\0\5\35\1\u010a\21\35\30\0\1\35"+
    "\5\0\22\35\3\0\1\35\1\u010b\25\35\30\0\1\35"+
    "\5\0\22\35\3\0\20\35\1\u010c\6\35\30\0\1\35"+
    "\5\0\22\35\3\0\17\35\1\u010d\7\35\30\0\1\35"+
    "\5\0\22\35\3\0\23\35\1\u010e\3\35\30\0\1\35"+
    "\5\0\22\35\3\0\1\35\1\u010f\25\35\74\0\1\u0110"+
    "\45\0\1\35\5\0\22\35\3\0\26\35\1\u0111\30\0"+
    "\1\35\5\0\22\35\3\0\5\35\1\u0112\21\35\30\0"+
    "\1\35\5\0\22\35\3\0\15\35\1\u0113\11\35\30\0"+
    "\1\35\5\0\22\35\3\0\20\35\1\u0114\6\35\30\0"+
    "\1\35\5\0\22\35\3\0\1\35\1\u0115\25\35\30\0"+
    "\1\35\5\0\22\35\3\0\5\35\1\u0116\21\35\30\0"+
    "\1\35\5\0\22\35\3\0\5\35\1\u0117\21\35\30\0"+
    "\1\35\5\0\22\35\3\0\4\35\1\u0118\22\35\30\0"+
    "\1\35\5\0\22\35\3\0\21\35\1\u0119\5\35\30\0"+
    "\1\35\5\0\22\35\3\0\1\35\1\u011a\25\35\30\0"+
    "\1\35\5\0\22\35\3\0\3\35\1\u011b\23\35\30\0"+
    "\1\35\5\0\22\35\3\0\20\35\1\u011c\6\35\30\0"+
    "\1\35\5\0\22\35\3\0\1\35\1\u011d\25\35\30\0"+
    "\1\35\5\0\22\35\3\0\20\35\1\u011e\6\35\30\0"+
    "\1\35\5\0\22\35\3\0\22\35\1\u011f\4\35\30\0"+
    "\1\35\5\0\22\35\3\0\20\35\1\u0120\6\35\30\0"+
    "\1\35\5\0\22\35\3\0\15\35\1\u0121\11\35\30\0"+
    "\1\35\5\0\22\35\3\0\13\35\1\u0122\13\35\30\0"+
    "\1\35\5\0\22\35\3\0\11\35\1\u0123\15\35\30\0"+
    "\1\35\5\0\22\35\3\0\20\35\1\u0124\6\35\30\0"+
    "\1\35\5\0\22\35\3\0\16\35\1\305\10\35\30\0"+
    "\1\35\5\0\22\35\3\0\5\35\1\u0125\21\35\30\0"+
    "\1\35\5\0\22\35\3\0\22\35\1\u0126\4\35\30\0"+
    "\1\35\5\0\22\35\3\0\20\35\1\u0127\6\35\30\0"+
    "\1\35\5\0\22\35\3\0\5\35\1\u0128\21\35\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16354];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\1\11\2\1\3\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\25\1\3\11\6\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\0\1\11\2\0\3\11"+
    "\2\0\3\11\2\0\3\11\1\0\44\1\1\11\1\1"+
    "\3\11\2\1\2\0\1\11\1\0\11\1\1\11\4\1"+
    "\1\11\4\1\1\11\7\1\1\11\14\1\1\0\2\1"+
    "\1\0\36\1\1\11\5\1\1\11\32\1\1\0\27\1"+
    "\1\0\24\1\1\11\30\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

    public ArrayList<ErrorLSS> listaErrores = new ArrayList<>();

    private void agregarError(ErrorLSS errorL){
        listaErrores.add(errorL);
    }

    Stack<Integer> pilaAmbitos = new Stack();
    public void iniciar(){
        pilaAmbitos.push(0);
    }
    //coidgo de usuario en sintaxis java
    public void printConsole(String s){
        //System.out.println(s);
    }
    String cadena="";
    //public Pintar pintar = new Pintar();

    //para la identacion
    boolean estadoIdent = false;
    int contadorAmbito=0, ambitoActual=0;

    public Symbol symbol(String value, int size){
        if(!pilaAmbitos.isEmpty()){
            int ambito = pilaAmbitos.peek();
            if((ambito+1)==size){
                pilaAmbitos.push(ambito+1);
                //System.out.println("INDENT: "+(ambito+1));
                return new Symbol(SimbolosAST.INDENT , yycolumn, yyline, yytext());
            }else if((ambito-1)==size){
                pilaAmbitos.pop();
                //System.out.println("DEDENT: "+(ambito-1));
                return new Symbol(SimbolosAST.DEDENT , yycolumn, yyline, yytext());
            }else if(ambito==size){
                //UN SALATO DE LINEA
                //System.out.println("SALTO DE LINEA: "+ambito);
            }else{
                //ErrorLSS de identacion
                //System.out.println("ErrorLSS de identacion");
                //agregarError(new ErrorLSS(yyline + 1,yycolumn + 1, yytext(), "ErrorLSS de Indentacion", "Sintactico"));
            }
        }
        return null;
    }

    public Symbol symbol(int size){
        size = (size/4);
        if(!pilaAmbitos.isEmpty()){
            int ambito = pilaAmbitos.peek();
            if((ambito+1)==size){
                pilaAmbitos.push(ambito+1);
                //System.out.println("IDENT: "+(ambito+1));
                return new Symbol(SimbolosAST.INDENT , yycolumn, yyline, yytext());
            }else if((ambito-1)==size){
                pilaAmbitos.pop();
                //System.out.println("DEDENT: "+(ambito-1));
                return new Symbol(SimbolosAST.DEDENT , yycolumn, yyline, yytext());
            }else if(ambito==size){
                //UN SALATO DE LINEA
                //System.out.println("SALTO DE LINEA: "+ambito);
            }else{
                //ErrorLSS de identacion
                //System.out.println("ErrorLSS de identacion");
                //agregarError(new ErrorLSS(yyline + 1,yycolumn + 1, yytext(), "ErrorLSS de Indentacion", "Sintactico"));
            }
        }
        return null;
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexicoAST(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(SimbolosAST.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /*Ignore*/
            }
            // fall through
          case 89: break;
          case 2:
            { Symbol sim = symbol(yytext(), yytext().length()); if(sim!=null){return sim;}else{/*IGNORAR*/}
            }
            // fall through
          case 90: break;
          case 3:
            { return new Symbol(SimbolosAST.NOT , yycolumn, yyline, yytext());
            }
            // fall through
          case 91: break;
          case 4:
            { return new Symbol(SimbolosAST.MODULO , yycolumn, yyline, yytext());
            }
            // fall through
          case 92: break;
          case 5:
            { return new Symbol(SimbolosAST.PA_A , yycolumn, yyline, yytext());
            }
            // fall through
          case 93: break;
          case 6:
            { return new Symbol(SimbolosAST.PA_C , yycolumn, yyline, yytext());
            }
            // fall through
          case 94: break;
          case 7:
            { return new Symbol(SimbolosAST.POR , yycolumn, yyline, yytext());
            }
            // fall through
          case 95: break;
          case 8:
            { return new Symbol(SimbolosAST.MAS , yycolumn, yyline, yytext());
            }
            // fall through
          case 96: break;
          case 9:
            { return new Symbol(SimbolosAST.COMA , yycolumn, yyline, yytext());
            }
            // fall through
          case 97: break;
          case 10:
            { return new Symbol(SimbolosAST.MENOS , yycolumn, yyline, yytext());
            }
            // fall through
          case 98: break;
          case 11:
            { return new Symbol(SimbolosAST.DIVISION , yycolumn, yyline, yytext());
            }
            // fall through
          case 99: break;
          case 12:
            { return new Symbol(SimbolosAST.NUMERO , yycolumn, yyline, new Integer(yytext()));
            }
            // fall through
          case 100: break;
          case 13:
            { return new Symbol(SimbolosAST.PUNTO_COMA , yycolumn, yyline, yytext());
            }
            // fall through
          case 101: break;
          case 14:
            { return new Symbol(SimbolosAST.MENOR_Q , yycolumn, yyline, yytext());
            }
            // fall through
          case 102: break;
          case 15:
            { return new Symbol(SimbolosAST.IGUAL , yycolumn, yyline, yytext());
            }
            // fall through
          case 103: break;
          case 16:
            { return new Symbol(SimbolosAST.MAYOR_Q , yycolumn, yyline, yytext());
            }
            // fall through
          case 104: break;
          case 17:
            { return new Symbol(SimbolosAST.IDENTIFICADOR , yycolumn, yyline, yytext());
            }
            // fall through
          case 105: break;
          case 18:
            { return new Symbol(SimbolosAST.CORCHETE_A , yycolumn, yyline, yytext());
            }
            // fall through
          case 106: break;
          case 19:
            { return new Symbol(SimbolosAST.CORCHETE_C , yycolumn, yyline, yytext());
            }
            // fall through
          case 107: break;
          case 20:
            { return new Symbol(SimbolosAST.POTENCIA , yycolumn, yyline, yytext());
            }
            // fall through
          case 108: break;
          case 21:
            { return new Symbol(SimbolosAST.LLAVE_A , yycolumn, yyline, yytext());
            }
            // fall through
          case 109: break;
          case 22:
            { return new Symbol(SimbolosAST.LLAVE_C , yycolumn, yyline, yytext());
            }
            // fall through
          case 110: break;
          case 23:
            { return new Symbol(SimbolosAST.IS_NULL , yycolumn, yyline, yytext());
            }
            // fall through
          case 111: break;
          case 24:
            { return new Symbol(SimbolosAST.DIFERENTE , yycolumn, yyline, yytext());
            }
            // fall through
          case 112: break;
          case 25:
            { return new Symbol(SimbolosAST.CADENA , yycolumn, yyline, yytext().substring(1, yytext().length()-1));
            }
            // fall through
          case 113: break;
          case 26:
            { return new Symbol(SimbolosAST.AND , yycolumn, yyline, yytext());
            }
            // fall through
          case 114: break;
          case 27:
            { return new Symbol(SimbolosAST.XOR , yycolumn, yyline, yytext());
            }
            // fall through
          case 115: break;
          case 28:
            { return new Symbol(SimbolosAST.MAS_MAS , yycolumn, yyline, yytext());
            }
            // fall through
          case 116: break;
          case 29:
            { return new Symbol(SimbolosAST.MAS_IGUAL , yycolumn, yyline, yytext());
            }
            // fall through
          case 117: break;
          case 30:
            { return new Symbol(SimbolosAST.MENOS_MENOS , yycolumn, yyline, yytext());
            }
            // fall through
          case 118: break;
          case 31:
            { return new Symbol(SimbolosAST.MENOR_IGUAL , yycolumn, yyline, yytext());
            }
            // fall through
          case 119: break;
          case 32:
            { return new Symbol(SimbolosAST.IGUAL_IGUAL , yycolumn, yyline, yytext());
            }
            // fall through
          case 120: break;
          case 33:
            { return new Symbol(SimbolosAST.MAYOR_IGUAL , yycolumn, yyline, yytext());
            }
            // fall through
          case 121: break;
          case 34:
            { return new Symbol(SimbolosAST.DO , yycolumn, yyline, yytext());
            }
            // fall through
          case 122: break;
          case 35:
            { return new Symbol(SimbolosAST.FA , yycolumn, yyline, yytext());
            }
            // fall through
          case 123: break;
          case 36:
            { return new Symbol(SimbolosAST.LA , yycolumn, yyline, yytext());
            }
            // fall through
          case 124: break;
          case 37:
            { return new Symbol(SimbolosAST.MI , yycolumn, yyline, yytext());
            }
            // fall through
          case 125: break;
          case 38:
            { return new Symbol(SimbolosAST.RE , yycolumn, yyline, yytext());
            }
            // fall through
          case 126: break;
          case 39:
            { return new Symbol(SimbolosAST.SI , yycolumn, yyline, yytext());
            }
            // fall through
          case 127: break;
          case 40:
            { return new Symbol(SimbolosAST.OR , yycolumn, yyline, yytext());
            }
            // fall through
          case 128: break;
          case 41:
            { return new Symbol(SimbolosAST.NAND , yycolumn, yyline, yytext());
            }
            // fall through
          case 129: break;
          case 42:
            { return new Symbol(SimbolosAST.NOR , yycolumn, yyline, yytext());
            }
            // fall through
          case 130: break;
          case 43:
            { return new Symbol(SimbolosAST.CARACTER , yycolumn, yyline, yytext().substring(1, yytext().length()-1));
            }
            // fall through
          case 131: break;
          case 44:
            { return new Symbol(SimbolosAST.DECIMAL , yycolumn, yyline, new Double(yytext()));
            }
            // fall through
          case 132: break;
          case 45:
            { /*printConsole("COMENTARIO_SIMPLE: "+yytext()+"\n");*/ /*return new Symbol(SimbolosAST.COMENTARIO_LINEA , yycolumn, yyline, yytext());*/
            }
            // fall through
          case 133: break;
          case 46:
            { return new Symbol(SimbolosAST.DO_S , yycolumn, yyline, yytext());
            }
            // fall through
          case 134: break;
          case 47:
            { return new Symbol(SimbolosAST.FA_S , yycolumn, yyline, yytext());
            }
            // fall through
          case 135: break;
          case 48:
            { return new Symbol(SimbolosAST.LA_S , yycolumn, yyline, yytext());
            }
            // fall through
          case 136: break;
          case 49:
            { return new Symbol(SimbolosAST.RE_S , yycolumn, yyline, yytext());
            }
            // fall through
          case 137: break;
          case 50:
            { return new Symbol(SimbolosAST.SOL , yycolumn, yyline, yytext());
            }
            // fall through
          case 138: break;
          case 51:
            { return new Symbol(SimbolosAST.VAR , yycolumn, yyline, yytext());
            }
            // fall through
          case 139: break;
          case 52:
            { /*printConsole("COMENTARIO: "+yytext()+"\n");*/ /*return new Symbol(SimbolosAST.COMENTARIO_BLOQUE , yycolumn, yyline, yytext());*/
            }
            // fall through
          case 140: break;
          case 53:
            { return new Symbol(SimbolosAST.CASO , yycolumn, yyline, yytext());
            }
            // fall through
          case 141: break;
          case 54:
            { return new Symbol(SimbolosAST.KEEP , yycolumn, yyline, yytext());
            }
            // fall through
          case 142: break;
          case 55:
            { return new Symbol(SimbolosAST.PARA , yycolumn, yyline, yytext());
            }
            // fall through
          case 143: break;
          case 56:
            { return new Symbol(SimbolosAST.SINO , yycolumn, yyline, yytext());
            }
            // fall through
          case 144: break;
          case 57:
            { return new Symbol(SimbolosAST.SOL_S , yycolumn, yyline, yytext());
            }
            // fall through
          case 145: break;
          case 58:
            { return new Symbol(SimbolosAST.TRUE , yycolumn, yyline, true);
            }
            // fall through
          case 146: break;
          case 59:
            { return new Symbol(SimbolosAST.VOID , yycolumn, yyline, yytext());
            }
            // fall through
          case 147: break;
          case 60:
            { return new Symbol(SimbolosAST.DOBLE , yycolumn, yyline, yytext());
            }
            // fall through
          case 148: break;
          case 61:
            { return new Symbol(SimbolosAST.FALSE , yycolumn, yyline, false);
            }
            // fall through
          case 149: break;
          case 62:
            { return new Symbol(SimbolosAST.HACER , yycolumn, yyline, yytext());
            }
            // fall through
          case 150: break;
          case 63:
            { return new Symbol(SimbolosAST.PARES , yycolumn, yyline, yytext());
            }
            // fall through
          case 151: break;
          case 64:
            { return new Symbol(SimbolosAST.PISTA, yycolumn, yyline, yytext());
            }
            // fall through
          case 152: break;
          case 65:
            { return new Symbol(SimbolosAST.SALIR , yycolumn, yyline, yytext());
            }
            // fall through
          case 153: break;
          case 66:
            { return new Symbol(SimbolosAST.CADENA_RSV , yycolumn, yyline, yytext());
            }
            // fall through
          case 154: break;
          case 67:
            { return new Symbol(SimbolosAST.ENTERO , yycolumn, yyline, yytext());
            }
            // fall through
          case 155: break;
          case 68:
            { return new Symbol(SimbolosAST.PRIMOS , yycolumn, yyline, yytext());
            }
            // fall through
          case 156: break;
          case 69:
            { return new Symbol(SimbolosAST.SWITCH , yycolumn, yyline, yytext());
            }
            // fall through
          case 157: break;
          case 70:
            { return new Symbol(SimbolosAST.ARREGLO , yycolumn, yyline, yytext());
            }
            // fall through
          case 158: break;
          case 71:
            { return new Symbol(SimbolosAST.BOOLEAN , yycolumn, yyline, yytext());
            }
            // fall through
          case 159: break;
          case 72:
            { return new Symbol(SimbolosAST.DEFAULT , yycolumn, yyline, yytext());
            }
            // fall through
          case 160: break;
          case 73:
            { return new Symbol(SimbolosAST.ESPERAR , yycolumn, yyline, yytext());
            }
            // fall through
          case 161: break;
          case 74:
            { return new Symbol(SimbolosAST.IMPARES , yycolumn, yyline, yytext());
            }
            // fall through
          case 162: break;
          case 75:
            { return new Symbol(SimbolosAST.MENSAJE , yycolumn, yyline, yytext());
            }
            // fall through
          case 163: break;
          case 76:
            { return new Symbol(SimbolosAST.ORDENAR , yycolumn, yyline, yytext());
            }
            // fall through
          case 164: break;
          case 77:
            { return new Symbol(SimbolosAST.SINO_SI , yycolumn, yyline, yytext());
            }
            // fall through
          case 165: break;
          case 78:
            { return new Symbol(SimbolosAST.CARACTER_RSV , yycolumn, yyline, yytext());
            }
            // fall through
          case 166: break;
          case 79:
            { return new Symbol(SimbolosAST.EXTIENDE , yycolumn, yyline, yytext());
            }
            // fall through
          case 167: break;
          case 80:
            { return new Symbol(SimbolosAST.LONGITUD , yycolumn, yyline, yytext());
            }
            // fall through
          case 168: break;
          case 81:
            { return new Symbol(SimbolosAST.MIENTRAS , yycolumn, yyline, yytext());
            }
            // fall through
          case 169: break;
          case 82:
            { return new Symbol(SimbolosAST.RETORNAR , yycolumn, yyline, yytext());
            }
            // fall through
          case 170: break;
          case 83:
            { return new Symbol(SimbolosAST.CONTINUAR , yycolumn, yyline, yytext());
            }
            // fall through
          case 171: break;
          case 84:
            { return new Symbol(SimbolosAST.PRINCIPAL , yycolumn, yyline, yytext());
            }
            // fall through
          case 172: break;
          case 85:
            { return new Symbol(SimbolosAST.SUMARIZAR , yycolumn, yyline, yytext());
            }
            // fall through
          case 173: break;
          case 86:
            { return new Symbol(SimbolosAST.ASCENDENTE , yycolumn, yyline, yytext());
            }
            // fall through
          case 174: break;
          case 87:
            { return new Symbol(SimbolosAST.REPRODUCIR , yycolumn, yyline, yytext());
            }
            // fall through
          case 175: break;
          case 88:
            { return new Symbol(SimbolosAST.DESCENDENTE , yycolumn, yyline, yytext());
            }
            // fall through
          case 176: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
