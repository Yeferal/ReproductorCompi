
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Sep 06 18:19:06 CST 2021
//----------------------------------------------------

package backend.analizador;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.Stack;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Sep 06 18:19:06 CST 2021
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u014c\000\002\002\004\000\002\002\004\000\002\003" +
    "\006\000\002\003\002\000\002\063\003\000\002\064\003" +
    "\000\002\065\003\000\002\065\002\000\002\004\004\000" +
    "\002\004\002\000\002\005\010\000\002\005\010\000\002" +
    "\007\003\000\002\007\002\000\002\006\005\000\002\006" +
    "\004\000\002\006\003\000\002\010\004\000\002\010\004" +
    "\000\002\010\004\000\002\010\004\000\002\010\004\000" +
    "\002\010\002\000\002\011\005\000\002\011\007\000\002" +
    "\011\010\000\002\011\006\000\002\011\006\000\002\011" +
    "\007\000\002\011\005\000\002\102\005\000\002\102\007" +
    "\000\002\102\007\000\002\102\005\000\002\102\006\000" +
    "\002\102\007\000\002\102\005\000\002\012\003\000\002" +
    "\012\002\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\046\006\000\002\046\006\000\002" +
    "\050\005\000\002\050\003\000\002\050\005\000\002\050" +
    "\004\000\002\051\003\000\002\051\002\000\002\047\004" +
    "\000\002\047\004\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\006" +
    "\000\002\017\003\000\002\017\003\000\002\017\004\000" +
    "\002\017\004\000\002\017\004\000\002\077\003\000\002" +
    "\077\003\000\002\077\003\000\002\077\003\000\002\077" +
    "\003\000\002\060\005\000\002\060\005\000\002\060\005" +
    "\000\002\060\005\000\002\060\005\000\002\060\005\000" +
    "\002\060\004\000\002\060\004\000\002\060\005\000\002" +
    "\060\004\000\002\060\004\000\002\100\003\000\002\100" +
    "\003\000\002\100\003\000\002\100\003\000\002\100\003" +
    "\000\002\100\003\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\003\000\002\020" +
    "\004\000\002\020\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\004\000\002\015\004\000\002\104\002\000" +
    "\002\015\006\000\002\015\005\000\002\015\005\000\002" +
    "\015\004\000\002\015\004\000\002\021\006\000\002\021" +
    "\005\000\002\021\012\000\002\021\014\000\002\021\007" +
    "\000\002\021\010\000\002\021\013\000\002\021\006\000" +
    "\002\021\007\000\002\103\006\000\002\103\005\000\002" +
    "\103\012\000\002\103\013\000\002\103\006\000\002\103" +
    "\007\000\002\103\013\000\002\103\006\000\002\103\007" +
    "\000\002\022\006\000\002\022\005\000\002\022\005\000" +
    "\002\022\006\000\002\023\003\000\002\023\003\000\002" +
    "\075\005\000\002\075\007\000\002\075\005\000\002\075" +
    "\007\000\002\075\006\000\002\075\006\000\002\075\004" +
    "\000\002\024\005\000\002\024\003\000\002\024\005\000" +
    "\002\024\005\000\002\061\003\000\002\031\006\000\002" +
    "\031\006\000\002\031\006\000\002\031\006\000\002\035" +
    "\012\000\002\035\013\000\002\035\011\000\002\035\012" +
    "\000\002\035\013\000\002\035\007\000\002\035\012\000" +
    "\002\035\013\000\002\036\011\000\002\036\012\000\002" +
    "\036\011\000\002\036\011\000\002\036\012\000\002\036" +
    "\012\000\002\055\003\000\002\055\003\000\002\073\006" +
    "\000\002\073\004\000\002\073\004\000\002\073\005\000" +
    "\002\073\006\000\002\074\002\000\002\066\004\000\002" +
    "\066\004\000\002\066\004\000\002\066\004\000\002\066" +
    "\004\000\002\066\004\000\002\066\004\000\002\066\004" +
    "\000\002\066\004\000\002\066\004\000\002\066\004\000" +
    "\002\066\004\000\002\066\004\000\002\066\004\000\002" +
    "\066\004\000\002\066\004\000\002\066\005\000\002\066" +
    "\004\000\002\066\002\000\002\067\004\000\002\067\004" +
    "\000\002\067\004\000\002\067\004\000\002\067\004\000" +
    "\002\067\004\000\002\067\004\000\002\067\004\000\002" +
    "\067\004\000\002\067\004\000\002\067\004\000\002\067" +
    "\004\000\002\067\004\000\002\067\004\000\002\067\004" +
    "\000\002\067\004\000\002\067\002\000\002\037\014\000" +
    "\002\037\006\000\002\037\014\000\002\037\014\000\002" +
    "\037\014\000\002\037\005\000\002\040\010\000\002\040" +
    "\010\000\002\040\006\000\002\040\005\000\002\041\010" +
    "\000\002\041\006\000\002\041\010\000\002\041\005\000" +
    "\002\042\006\000\002\042\006\000\002\042\005\000\002" +
    "\043\006\000\002\043\006\000\002\043\005\000\002\044" +
    "\006\000\002\044\005\000\002\044\006\000\002\044\005" +
    "\000\002\062\005\000\002\062\003\000\002\062\005\000" +
    "\002\062\005\000\002\056\003\000\002\056\003\000\002" +
    "\056\003\000\002\056\003\000\002\056\003\000\002\056" +
    "\003\000\002\056\003\000\002\056\003\000\002\056\003" +
    "\000\002\056\003\000\002\056\003\000\002\056\003\000" +
    "\002\056\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\045\010\000\002\045\007\000\002\045\010" +
    "\000\002\025\012\000\002\025\012\000\002\025\012\000" +
    "\002\025\010\000\002\025\011\000\002\025\006\000\002" +
    "\026\012\000\002\026\006\000\002\026\002\000\002\026" +
    "\012\000\002\026\012\000\002\026\010\000\002\026\011" +
    "\000\002\026\006\000\002\027\011\000\002\027\011\000" +
    "\002\027\007\000\002\027\011\000\002\072\011\000\002" +
    "\072\006\000\002\072\002\000\002\072\011\000\002\072" +
    "\011\000\002\072\006\000\002\070\003\000\002\070\002" +
    "\000\002\032\015\000\002\032\014\000\002\032\014\000" +
    "\002\032\015\000\002\032\011\000\002\032\015\000\002" +
    "\052\007\000\002\052\005\000\002\052\006\000\002\052" +
    "\007\000\002\052\007\000\002\052\007\000\002\052\005" +
    "\000\002\052\005\000\002\052\005\000\002\053\003\000" +
    "\002\054\005\000\002\054\005\000\002\054\004\000\002" +
    "\054\004\000\002\054\005\000\002\054\005\000\002\054" +
    "\004\000\002\054\004\000\002\033\011\000\002\033\011" +
    "\000\002\033\011\000\002\033\010\000\002\033\005\000" +
    "\002\034\013\000\002\034\013\000\002\034\011\000\002" +
    "\034\013\000\002\034\013\000\002\034\005\000\002\071" +
    "\003\000\002\071\002\000\002\076\003\000\002\076\003" +
    "\000\002\076\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0311\000\010\002\ufffe\004\ufffe\130\006\001\002\000" +
    "\006\002\ufff8\004\015\001\002\000\004\002\012\001\002" +
    "\000\006\130\006\131\ufffe\001\002\000\004\131\010\001" +
    "\002\000\012\002\ufffe\004\ufffe\130\006\131\ufffe\001\002" +
    "\000\010\002\uffff\004\uffff\131\uffff\001\002\000\004\002" +
    "\001\001\002\000\006\002\ufff8\004\015\001\002\000\004" +
    "\002\000\001\002\000\006\003\016\005\017\001\002\000" +
    "\010\003\021\006\022\130\ufff4\001\002\000\010\003\021" +
    "\006\022\130\ufff4\001\002\000\006\007\u030d\130\ufff5\001" +
    "\002\000\006\007\ufff1\130\ufff1\001\002\000\004\005\u030c" +
    "\001\002\000\004\130\025\001\002\000\034\002\uffeb\003" +
    "\037\004\uffeb\005\045\011\031\012\034\013\030\014\026" +
    "\015\035\041\044\042\uffdb\113\046\131\uffeb\001\002\000" +
    "\074\002\ufffd\003\ufffd\004\ufffd\005\ufffd\011\ufffd\012\ufffd" +
    "\013\ufffd\014\ufffd\015\ufffd\041\ufffd\042\ufffd\062\ufffd\066" +
    "\ufffd\067\ufffd\070\ufffd\071\ufffd\072\ufffd\073\ufffd\074\ufffd" +
    "\075\ufffd\076\ufffd\100\ufffd\101\ufffd\102\ufffd\110\ufffd\111" +
    "\ufffd\112\ufffd\113\ufffd\131\ufffd\001\002\000\010\003\uffc4" +
    "\005\uffc4\055\uffc4\001\002\000\034\002\uffeb\003\037\004" +
    "\uffeb\005\045\011\031\012\034\013\030\014\026\015\035" +
    "\041\044\042\uffdb\113\046\131\uffeb\001\002\000\010\003" +
    "\uffc2\005\uffc2\055\uffc2\001\002\000\010\003\uffc5\005\uffc5" +
    "\055\uffc5\001\002\000\036\002\uffeb\003\037\004\uffeb\005" +
    "\045\007\u0304\011\031\012\034\013\030\014\026\015\035" +
    "\041\044\042\uffdb\113\046\131\uffeb\001\002\000\034\002" +
    "\uffeb\003\037\004\uffeb\005\045\011\031\012\034\013\030" +
    "\014\026\015\035\041\044\042\uffdb\113\046\131\uffeb\001" +
    "\002\000\010\003\uffc6\005\uffc6\055\uffc6\001\002\000\010" +
    "\003\uffc3\005\uffc3\055\uffc3\001\002\000\004\042\u02f6\001" +
    "\002\000\024\003\330\005\uffc1\011\031\012\034\013\030" +
    "\014\026\015\035\064\u02e1\065\u02e0\001\002\000\004\005" +
    "\u02d2\001\002\000\034\002\uffeb\003\037\004\uffeb\005\045" +
    "\011\031\012\034\013\030\014\026\015\035\041\044\042" +
    "\uffdb\113\046\131\uffeb\001\002\000\010\002\ufffa\004\ufffa" +
    "\131\u02d0\001\002\000\036\002\uffeb\003\037\004\uffeb\005" +
    "\045\007\u02c9\011\031\012\034\013\030\014\026\015\035" +
    "\041\044\042\uffdb\113\046\131\uffeb\001\002\000\022\003" +
    "\330\005\u02ac\011\031\012\034\013\030\014\026\015\035" +
    "\042\uffdc\001\002\000\004\064\u0292\001\002\000\006\003" +
    "\047\064\050\001\002\000\004\130\025\001\002\000\004" +
    "\065\051\001\002\000\004\130\025\001\002\000\040\003" +
    "\073\005\076\042\106\062\072\066\061\072\065\073\102" +
    "\074\104\100\074\101\110\102\070\110\100\111\105\112" +
    "\111\131\uff2a\001\002\000\040\003\u011d\005\076\042\106" +
    "\062\072\066\061\072\065\073\102\074\104\100\074\101" +
    "\110\102\070\110\100\111\105\112\111\131\uff2a\001\002" +
    "\000\040\003\u011d\005\076\042\106\062\072\066\061\072" +
    "\065\073\102\074\104\100\074\101\110\102\070\110\100" +
    "\111\105\112\111\131\uff2a\001\002\000\040\003\u011d\005" +
    "\076\042\106\062\072\066\061\072\065\073\102\074\104" +
    "\100\074\101\110\102\070\110\100\111\105\112\111\131" +
    "\uff2a\001\002\000\040\003\u011d\005\076\042\106\062\072" +
    "\066\061\072\065\073\102\074\104\100\074\101\110\102" +
    "\070\110\100\111\105\112\111\131\uff2a\001\002\000\042" +
    "\003\u011d\005\076\007\u014d\042\106\062\072\066\061\072" +
    "\065\073\102\074\104\100\074\101\110\102\070\110\100" +
    "\111\105\112\111\131\uff2a\001\002\000\040\003\u011d\005" +
    "\076\042\106\062\072\066\061\072\065\073\102\074\104" +
    "\100\074\101\110\102\070\110\100\111\105\112\111\131" +
    "\uff2a\001\002\000\006\003\u0260\064\u0261\001\002\000\040" +
    "\003\u011d\005\076\042\106\062\072\066\061\072\065\073" +
    "\102\074\104\100\074\101\110\102\070\110\100\111\105" +
    "\112\111\131\uff2a\001\002\000\040\003\u011d\005\076\042" +
    "\106\062\072\066\061\072\065\073\102\074\104\100\074" +
    "\101\110\102\070\110\100\111\105\112\111\131\uff2a\001" +
    "\002\000\040\003\u011d\005\076\042\106\062\072\066\061" +
    "\072\065\073\102\074\104\100\074\101\110\102\070\110" +
    "\100\111\105\112\111\131\uff2a\001\002\000\004\064\u0213" +
    "\001\002\000\042\003\u011d\005\076\007\u0142\042\106\062" +
    "\072\066\061\072\065\073\102\074\104\100\074\101\110" +
    "\102\070\110\100\111\105\112\111\131\uff2a\001\002\000" +
    "\040\003\u011d\005\076\042\106\062\072\066\061\072\065" +
    "\073\102\074\104\100\074\101\110\102\070\110\100\111" +
    "\105\112\111\131\uff2a\001\002\000\006\003\u01ff\064\u0200" +
    "\001\002\000\040\003\u011d\005\076\042\106\062\072\066" +
    "\061\072\065\073\102\074\104\100\074\101\110\102\070" +
    "\110\100\111\105\112\111\131\uff2a\001\002\000\006\003" +
    "\u01c1\064\u01c2\001\002\000\032\003\330\011\031\012\034" +
    "\013\030\014\026\015\035\043\u0122\052\u0121\053\u011e\054" +
    "\u011f\056\205\131\326\001\002\000\006\003\u0198\064\u0199" +
    "\001\002\000\040\003\u011d\005\076\042\106\062\072\066" +
    "\061\072\065\073\102\074\104\100\074\101\110\102\070" +
    "\110\100\111\105\112\111\131\uff2a\001\002\000\020\003" +
    "\u0188\043\u018a\052\u0187\053\u018c\054\u0189\056\205\064\274" +
    "\001\002\000\040\003\u011d\005\076\042\106\062\072\066" +
    "\061\072\065\073\102\074\104\100\074\101\110\102\070" +
    "\110\100\111\105\112\111\131\uff2a\001\002\000\006\003" +
    "\u017f\064\u0180\001\002\000\040\003\u011d\005\076\042\106" +
    "\062\072\066\061\072\065\073\102\074\104\100\074\101" +
    "\110\102\070\110\100\111\105\112\111\131\uff2a\001\002" +
    "\000\006\003\u016b\064\u016c\001\002\000\040\003\u011d\005" +
    "\076\042\106\062\072\066\061\072\065\073\102\074\104" +
    "\100\074\101\110\102\070\110\100\111\105\112\111\131" +
    "\uff2a\001\002\000\006\003\u0107\130\025\001\002\000\006" +
    "\003\u0100\064\u0101\001\002\000\016\003\330\011\031\012" +
    "\034\013\030\014\026\015\035\001\002\000\004\131\326" +
    "\001\002\000\006\003\312\064\313\001\002\000\006\003" +
    "\112\064\113\001\002\000\004\065\311\001\002\000\066" +
    "\003\140\005\121\016\134\017\117\020\132\021\136\022" +
    "\153\023\156\024\143\025\123\026\124\027\130\030\125" +
    "\031\116\032\122\044\114\045\135\046\141\047\137\050" +
    "\157\051\126\064\147\065\145\100\074\110\100\111\105" +
    "\001\002\000\146\002\uffd6\003\uffd6\004\uffd6\005\uffd6\007" +
    "\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6" +
    "\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\025" +
    "\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\033\uffd6\034\uffd6" +
    "\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\057" +
    "\uffd6\061\uffd6\062\uffd6\065\uffd6\066\uffd6\070\uffd6\072\uffd6" +
    "\073\uffd6\074\uffd6\075\uffd6\076\uffd6\100\uffd6\101\uffd6\102" +
    "\uffd6\110\uffd6\111\uffd6\112\uffd6\113\uffd6\130\uffd6\131\uffd6" +
    "\001\002\000\146\002\uffd9\003\uffd9\004\uffd9\005\uffd9\007" +
    "\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9" +
    "\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\025" +
    "\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\033\uffd9\034\uffd9" +
    "\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\057" +
    "\uffd9\061\uffd9\062\uffd9\065\uffd9\066\uffd9\070\uffd9\072\uffd9" +
    "\073\uffd9\074\uffd9\075\uffd9\076\uffd9\100\uffd9\101\uffd9\102" +
    "\uffd9\110\uffd9\111\uffd9\112\uffd9\113\uffd9\130\uffd9\131\uffd9" +
    "\001\002\000\114\002\uffb3\003\uffb3\004\uffb3\005\uffb3\007" +
    "\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3" +
    "\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\033\uffb3\041" +
    "\uffb3\042\uffb3\061\uffb3\062\uffb3\065\uffb3\066\uffb3\070\uffb3" +
    "\072\uffb3\073\uffb3\074\uffb3\075\uffb3\076\uffb3\100\uffb3\101" +
    "\uffb3\102\uffb3\110\uffb3\111\uffb3\112\uffb3\113\uffb3\131\uffb3" +
    "\001\002\000\114\002\uffa4\003\uffa4\004\uffa4\005\uffa4\007" +
    "\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4" +
    "\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\033\uffa4\041" +
    "\uffa4\042\uffa4\061\uffa4\062\uffa4\065\uffa4\066\uffa4\070\uffa4" +
    "\072\uffa4\073\uffa4\074\uffa4\075\uffa4\076\uffa4\100\uffa4\101" +
    "\uffa4\102\uffa4\110\uffa4\111\uffa4\112\uffa4\113\uffa4\131\uffa4" +
    "\001\002\000\004\003\310\001\002\000\152\002\uffda\003" +
    "\uffda\004\uffda\005\uffda\007\uffda\010\uffda\011\uffda\012\uffda" +
    "\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021" +
    "\uffda\022\uffda\023\uffda\025\uffda\026\uffda\027\uffda\030\uffda" +
    "\031\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040" +
    "\uffda\041\uffda\042\uffda\056\205\057\uffda\061\uffda\062\uffda" +
    "\064\274\065\uffda\066\uffda\070\uffda\072\uffda\073\uffda\074" +
    "\uffda\075\uffda\076\uffda\100\uffda\101\uffda\102\uffda\110\uffda" +
    "\111\uffda\112\uffda\113\uffda\130\uffda\131\uffda\001\002\000" +
    "\006\003\267\064\270\001\002\000\114\002\uffb2\003\uffb2" +
    "\004\uffb2\005\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\013" +
    "\uffb2\014\uffb2\015\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2" +
    "\031\uffb2\033\uffb2\041\uffb2\042\uffb2\061\uffb2\062\uffb2\065" +
    "\uffb2\066\uffb2\070\uffb2\072\uffb2\073\uffb2\074\uffb2\075\uffb2" +
    "\076\uffb2\100\uffb2\101\uffb2\102\uffb2\110\uffb2\111\uffb2\112" +
    "\uffb2\113\uffb2\131\uffb2\001\002\000\114\002\uffb1\003\uffb1" +
    "\004\uffb1\005\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\013" +
    "\uffb1\014\uffb1\015\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1" +
    "\031\uffb1\033\uffb1\041\uffb1\042\uffb1\061\uffb1\062\uffb1\065" +
    "\uffb1\066\uffb1\070\uffb1\072\uffb1\073\uffb1\074\uffb1\075\uffb1" +
    "\076\uffb1\100\uffb1\101\uffb1\102\uffb1\110\uffb1\111\uffb1\112" +
    "\uffb1\113\uffb1\131\uffb1\001\002\000\114\002\uffb4\003\uffb4" +
    "\004\uffb4\005\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013" +
    "\uffb4\014\uffb4\015\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4" +
    "\031\uffb4\033\uffb4\041\uffb4\042\uffb4\061\uffb4\062\uffb4\065" +
    "\uffb4\066\uffb4\070\uffb4\072\uffb4\073\uffb4\074\uffb4\075\uffb4" +
    "\076\uffb4\100\uffb4\101\uffb4\102\uffb4\110\uffb4\111\uffb4\112" +
    "\uffb4\113\uffb4\131\uffb4\001\002\000\146\002\uffd3\003\uffd3" +
    "\004\uffd3\005\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013" +
    "\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3" +
    "\022\uffd3\023\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031" +
    "\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3" +
    "\041\uffd3\042\uffd3\057\uffd3\061\uffd3\062\uffd3\065\uffd3\066" +
    "\uffd3\070\uffd3\072\uffd3\073\uffd3\074\uffd3\075\uffd3\076\uffd3" +
    "\100\uffd3\101\uffd3\102\uffd3\110\uffd3\111\uffd3\112\uffd3\113" +
    "\uffd3\130\uffd3\131\uffd3\001\002\000\146\002\ufeb8\003\ufeb8" +
    "\004\ufeb8\005\ufeb8\007\ufeb8\010\ufeb8\011\ufeb8\012\ufeb8\013" +
    "\ufeb8\014\ufeb8\015\ufeb8\016\ufeb8\017\ufeb8\020\ufeb8\021\ufeb8" +
    "\022\ufeb8\023\ufeb8\025\ufeb8\026\ufeb8\027\ufeb8\030\ufeb8\031" +
    "\ufeb8\033\ufeb8\034\ufeb8\035\ufeb8\036\ufeb8\037\ufeb8\040\ufeb8" +
    "\041\ufeb8\042\ufeb8\057\ufeb8\061\ufeb8\062\ufeb8\065\ufeb8\066" +
    "\ufeb8\070\ufeb8\072\ufeb8\073\ufeb8\074\ufeb8\075\ufeb8\076\ufeb8" +
    "\100\ufeb8\101\ufeb8\102\ufeb8\110\ufeb8\111\ufeb8\112\ufeb8\113" +
    "\ufeb8\130\ufeb8\131\ufeb8\001\002\000\114\002\uffb5\003\uffb5" +
    "\004\uffb5\005\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013" +
    "\uffb5\014\uffb5\015\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5" +
    "\031\uffb5\033\uffb5\041\uffb5\042\uffb5\061\uffb5\062\uffb5\065" +
    "\uffb5\066\uffb5\070\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5" +
    "\076\uffb5\100\uffb5\101\uffb5\102\uffb5\110\uffb5\111\uffb5\112" +
    "\uffb5\113\uffb5\131\uffb5\001\002\000\146\002\ufeb6\003\ufeb6" +
    "\004\ufeb6\005\ufeb6\007\ufeb6\010\ufeb6\011\ufeb6\012\ufeb6\013" +
    "\ufeb6\014\ufeb6\015\ufeb6\016\ufeb6\017\ufeb6\020\ufeb6\021\ufeb6" +
    "\022\ufeb6\023\ufeb6\025\ufeb6\026\ufeb6\027\ufeb6\030\ufeb6\031" +
    "\ufeb6\033\ufeb6\034\ufeb6\035\ufeb6\036\ufeb6\037\ufeb6\040\ufeb6" +
    "\041\ufeb6\042\ufeb6\057\ufeb6\061\ufeb6\062\ufeb6\065\ufeb6\066" +
    "\ufeb6\070\ufeb6\072\ufeb6\073\ufeb6\074\ufeb6\075\ufeb6\076\ufeb6" +
    "\100\ufeb6\101\ufeb6\102\ufeb6\110\ufeb6\111\ufeb6\112\ufeb6\113" +
    "\ufeb6\130\ufeb6\131\ufeb6\001\002\000\114\002\uffa3\003\uffa3" +
    "\004\uffa3\005\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3\013" +
    "\uffa3\014\uffa3\015\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3" +
    "\031\uffa3\033\uffa3\041\uffa3\042\uffa3\061\uffa3\062\uffa3\065" +
    "\uffa3\066\uffa3\070\uffa3\072\uffa3\073\uffa3\074\uffa3\075\uffa3" +
    "\076\uffa3\100\uffa3\101\uffa3\102\uffa3\110\uffa3\111\uffa3\112" +
    "\uffa3\113\uffa3\131\uffa3\001\002\000\010\003\263\033\262" +
    "\065\264\001\002\000\114\002\uffa5\003\uffa5\004\uffa5\005" +
    "\uffa5\007\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5" +
    "\015\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\033" +
    "\uffa5\041\uffa5\042\uffa5\061\uffa5\062\uffa5\065\uffa5\066\uffa5" +
    "\070\uffa5\072\uffa5\073\uffa5\074\uffa5\075\uffa5\076\uffa5\100" +
    "\uffa5\101\uffa5\102\uffa5\110\uffa5\111\uffa5\112\uffa5\113\uffa5" +
    "\131\uffa5\001\002\000\146\002\uffd5\003\uffd5\004\uffd5\005" +
    "\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5" +
    "\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023" +
    "\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\033\uffd5" +
    "\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042" +
    "\uffd5\057\uffd5\061\uffd5\062\uffd5\065\uffd5\066\uffd5\070\uffd5" +
    "\072\uffd5\073\uffd5\074\uffd5\075\uffd5\076\uffd5\100\uffd5\101" +
    "\uffd5\102\uffd5\110\uffd5\111\uffd5\112\uffd5\113\uffd5\130\uffd5" +
    "\131\uffd5\001\002\000\114\002\uffa2\003\uffa2\004\uffa2\005" +
    "\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2" +
    "\015\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2\033" +
    "\uffa2\041\uffa2\042\uffa2\061\uffa2\062\uffa2\065\uffa2\066\uffa2" +
    "\070\uffa2\072\uffa2\073\uffa2\074\uffa2\075\uffa2\076\uffa2\100" +
    "\uffa2\101\uffa2\102\uffa2\110\uffa2\111\uffa2\112\uffa2\113\uffa2" +
    "\131\uffa2\001\002\000\146\002\uffd2\003\uffd2\004\uffd2\005" +
    "\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2" +
    "\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023" +
    "\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\033\uffd2" +
    "\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042" +
    "\uffd2\057\uffd2\061\uffd2\062\uffd2\065\uffd2\066\uffd2\070\uffd2" +
    "\072\uffd2\073\uffd2\074\uffd2\075\uffd2\076\uffd2\100\uffd2\101" +
    "\uffd2\102\uffd2\110\uffd2\111\uffd2\112\uffd2\113\uffd2\130\uffd2" +
    "\131\uffd2\001\002\000\066\003\175\005\121\016\134\017" +
    "\117\020\132\021\136\022\153\023\156\025\123\026\124" +
    "\027\130\030\125\031\116\033\260\044\114\045\135\046" +
    "\141\047\137\050\157\051\126\056\205\064\176\065\257" +
    "\100\074\110\100\111\105\001\002\000\146\002\uffd4\003" +
    "\uffd4\004\uffd4\005\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4" +
    "\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021" +
    "\uffd4\022\uffd4\023\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4" +
    "\031\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040" +
    "\uffd4\041\uffd4\042\uffd4\057\uffd4\061\uffd4\062\uffd4\065\uffd4" +
    "\066\uffd4\070\uffd4\072\uffd4\073\uffd4\074\uffd4\075\uffd4\076" +
    "\uffd4\100\uffd4\101\uffd4\102\uffd4\110\uffd4\111\uffd4\112\uffd4" +
    "\113\uffd4\130\uffd4\131\uffd4\001\002\000\114\002\uffba\003" +
    "\uffba\004\uffba\005\uffba\007\uffba\010\uffba\011\uffba\012\uffba" +
    "\013\uffba\014\uffba\015\uffba\025\uffba\026\uffba\027\uffba\030" +
    "\uffba\031\uffba\033\uffba\041\uffba\042\uffba\061\uffba\062\uffba" +
    "\065\uffba\066\uffba\070\uffba\072\uffba\073\uffba\074\uffba\075" +
    "\uffba\076\uffba\100\uffba\101\uffba\102\uffba\110\uffba\111\uffba" +
    "\112\uffba\113\uffba\131\uffba\001\002\000\050\003\255\005" +
    "\121\016\134\017\117\020\132\021\136\022\153\023\156" +
    "\024\143\044\114\045\135\046\141\047\137\050\157\051" +
    "\126\064\147\100\074\110\100\111\105\001\002\000\146" +
    "\002\uff98\003\uff98\004\uff98\005\uff98\007\uff98\010\uff98\011" +
    "\uff98\012\uff98\013\uff98\014\uff98\015\uff98\016\uff98\017\uff98" +
    "\020\uff98\021\uff98\022\uff98\023\uff98\025\uff98\026\uff98\027" +
    "\uff98\030\uff98\031\uff98\033\uff98\034\uff98\035\uff98\036\uff98" +
    "\037\uff98\040\uff98\041\uff98\042\uff98\057\uff98\061\uff98\062" +
    "\uff98\065\uff98\066\uff98\070\uff98\072\uff98\073\uff98\074\uff98" +
    "\075\uff98\076\uff98\100\uff98\101\uff98\102\uff98\110\uff98\111" +
    "\uff98\112\uff98\113\uff98\130\uff98\131\uff98\001\002\000\046" +
    "\003\uff14\005\uff14\042\uff14\062\uff14\066\uff14\070\uff14\072" +
    "\uff14\073\uff14\074\uff14\075\uff14\076\uff14\100\uff14\101\uff14" +
    "\102\uff14\110\uff14\111\uff14\112\uff14\131\uff14\001\002\000" +
    "\022\003\uff10\025\241\026\240\027\244\030\242\031\243" +
    "\033\uff10\065\uff10\001\002\000\050\003\234\005\121\016" +
    "\134\017\117\020\132\021\136\022\153\023\156\024\143" +
    "\044\114\045\135\046\141\047\137\050\157\051\126\064" +
    "\147\100\074\110\100\111\105\001\002\000\142\002\uffb9" +
    "\003\uffb9\004\uffb9\005\uffb9\007\uffb9\010\uffb9\011\uffb9\012" +
    "\uffb9\013\uffb9\014\uffb9\015\uffb9\016\163\017\173\020\167" +
    "\021\170\022\164\023\174\025\uffb9\026\uffb9\027\uffb9\030" +
    "\uffb9\031\uffb9\033\166\034\161\035\165\036\172\037\171" +
    "\040\162\041\uffb9\042\uffb9\061\uffb9\062\uffb9\065\uffb9\066" +
    "\uffb9\070\uffb9\072\uffb9\073\uffb9\074\uffb9\075\uffb9\076\uffb9" +
    "\100\uffb9\101\uffb9\102\uffb9\110\uffb9\111\uffb9\112\uffb9\113" +
    "\uffb9\131\uffb9\001\002\000\146\002\uffd8\003\uffd8\004\uffd8" +
    "\005\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014" +
    "\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8" +
    "\023\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\033" +
    "\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8" +
    "\042\uffd8\057\uffd8\061\uffd8\062\uffd8\065\uffd8\066\uffd8\070" +
    "\uffd8\072\uffd8\073\uffd8\074\uffd8\075\uffd8\076\uffd8\100\uffd8" +
    "\101\uffd8\102\uffd8\110\uffd8\111\uffd8\112\uffd8\113\uffd8\130" +
    "\uffd8\131\uffd8\001\002\000\146\002\ufeb7\003\ufeb7\004\ufeb7" +
    "\005\ufeb7\007\ufeb7\010\ufeb7\011\ufeb7\012\ufeb7\013\ufeb7\014" +
    "\ufeb7\015\ufeb7\016\ufeb7\017\ufeb7\020\ufeb7\021\ufeb7\022\ufeb7" +
    "\023\ufeb7\025\ufeb7\026\ufeb7\027\ufeb7\030\ufeb7\031\ufeb7\033" +
    "\ufeb7\034\ufeb7\035\ufeb7\036\ufeb7\037\ufeb7\040\ufeb7\041\ufeb7" +
    "\042\ufeb7\057\ufeb7\061\ufeb7\062\ufeb7\065\ufeb7\066\ufeb7\070" +
    "\ufeb7\072\ufeb7\073\ufeb7\074\ufeb7\075\ufeb7\076\ufeb7\100\ufeb7" +
    "\101\ufeb7\102\ufeb7\110\ufeb7\111\ufeb7\112\ufeb7\113\ufeb7\130" +
    "\ufeb7\131\ufeb7\001\002\000\114\002\uffa1\003\uffa1\004\uffa1" +
    "\005\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1\014" +
    "\uffa1\015\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1" +
    "\033\uffa1\041\uffa1\042\uffa1\061\uffa1\062\uffa1\065\uffa1\066" +
    "\uffa1\070\uffa1\072\uffa1\073\uffa1\074\uffa1\075\uffa1\076\uffa1" +
    "\100\uffa1\101\uffa1\102\uffa1\110\uffa1\111\uffa1\112\uffa1\113" +
    "\uffa1\131\uffa1\001\002\000\146\002\uffd7\003\uffd7\004\uffd7" +
    "\005\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014" +
    "\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7" +
    "\023\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\033" +
    "\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7" +
    "\042\uffd7\057\uffd7\061\uffd7\062\uffd7\065\uffd7\066\uffd7\070" +
    "\uffd7\072\uffd7\073\uffd7\074\uffd7\075\uffd7\076\uffd7\100\uffd7" +
    "\101\uffd7\102\uffd7\110\uffd7\111\uffd7\112\uffd7\113\uffd7\130" +
    "\uffd7\131\uffd7\001\002\000\004\003\160\001\002\000\114" +
    "\002\uffa0\003\uffa0\004\uffa0\005\uffa0\007\uffa0\010\uffa0\011" +
    "\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0\025\uffa0\026\uffa0" +
    "\027\uffa0\030\uffa0\031\uffa0\033\uffa0\041\uffa0\042\uffa0\061" +
    "\uffa0\062\uffa0\065\uffa0\066\uffa0\070\uffa0\072\uffa0\073\uffa0" +
    "\074\uffa0\075\uffa0\076\uffa0\100\uffa0\101\uffa0\102\uffa0\110" +
    "\uffa0\111\uffa0\112\uffa0\113\uffa0\131\uffa0\001\002\000\146" +
    "\002\uffd1\003\uffd1\004\uffd1\005\uffd1\007\uffd1\010\uffd1\011" +
    "\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1" +
    "\020\uffd1\021\uffd1\022\uffd1\023\uffd1\025\uffd1\026\uffd1\027" +
    "\uffd1\030\uffd1\031\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1" +
    "\037\uffd1\040\uffd1\041\uffd1\042\uffd1\057\uffd1\061\uffd1\062" +
    "\uffd1\065\uffd1\066\uffd1\070\uffd1\072\uffd1\073\uffd1\074\uffd1" +
    "\075\uffd1\076\uffd1\100\uffd1\101\uffd1\102\uffd1\110\uffd1\111" +
    "\uffd1\112\uffd1\113\uffd1\130\uffd1\131\uffd1\001\002\000\114" +
    "\002\uffa7\003\uffa7\004\uffa7\005\uffa7\007\uffa7\010\uffa7\011" +
    "\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\025\uffa7\026\uffa7" +
    "\027\uffa7\030\uffa7\031\uffa7\033\uffa7\041\uffa7\042\uffa7\061" +
    "\uffa7\062\uffa7\065\uffa7\066\uffa7\070\uffa7\072\uffa7\073\uffa7" +
    "\074\uffa7\075\uffa7\076\uffa7\100\uffa7\101\uffa7\102\uffa7\110" +
    "\uffa7\111\uffa7\112\uffa7\113\uffa7\131\uffa7\001\002\000\032" +
    "\003\175\005\121\044\114\045\135\046\141\047\137\050" +
    "\157\051\126\064\176\100\074\110\100\111\105\001\002" +
    "\000\032\003\175\005\121\044\114\045\135\046\141\047" +
    "\137\050\157\051\126\064\176\100\074\110\100\111\105" +
    "\001\002\000\032\003\175\005\121\044\114\045\135\046" +
    "\141\047\137\050\157\051\126\064\176\100\074\110\100" +
    "\111\105\001\002\000\032\003\175\005\121\044\114\045" +
    "\135\046\141\047\137\050\157\051\126\064\176\100\074" +
    "\110\100\111\105\001\002\000\032\003\175\005\121\044" +
    "\114\045\135\046\141\047\137\050\157\051\126\064\176" +
    "\100\074\110\100\111\105\001\002\000\032\003\175\005" +
    "\121\044\114\045\135\046\141\047\137\050\157\051\126" +
    "\064\176\100\074\110\100\111\105\001\002\000\032\003" +
    "\175\005\121\044\114\045\135\046\141\047\137\050\157" +
    "\051\126\064\176\100\074\110\100\111\105\001\002\000" +
    "\032\003\175\005\121\044\114\045\135\046\141\047\137" +
    "\050\157\051\126\064\176\100\074\110\100\111\105\001" +
    "\002\000\032\003\175\005\121\044\114\045\135\046\141" +
    "\047\137\050\157\051\126\064\176\100\074\110\100\111" +
    "\105\001\002\000\032\003\175\005\121\044\114\045\135" +
    "\046\141\047\137\050\157\051\126\064\176\100\074\110" +
    "\100\111\105\001\002\000\032\003\175\005\121\044\114" +
    "\045\135\046\141\047\137\050\157\051\126\064\176\100" +
    "\074\110\100\111\105\001\002\000\032\003\175\005\121" +
    "\044\114\045\135\046\141\047\137\050\157\051\126\064" +
    "\176\100\074\110\100\111\105\001\002\000\034\003\175" +
    "\005\121\044\114\045\135\046\141\047\137\050\157\051" +
    "\126\056\205\064\176\100\074\110\100\111\105\001\002" +
    "\000\032\003\200\005\121\044\114\045\135\046\141\047" +
    "\137\050\157\051\126\064\176\100\074\110\100\111\105" +
    "\001\002\000\126\002\uffab\003\uffab\004\uffab\005\uffab\007" +
    "\uffab\010\uffab\011\uffab\012\uffab\013\uffab\014\uffab\015\uffab" +
    "\025\uffab\026\uffab\027\uffab\030\uffab\031\uffab\033\166\034" +
    "\161\035\165\036\172\037\171\040\162\041\uffab\042\uffab" +
    "\061\uffab\062\uffab\065\uffab\066\uffab\070\uffab\072\uffab\073" +
    "\uffab\074\uffab\075\uffab\076\uffab\100\uffab\101\uffab\102\uffab" +
    "\110\uffab\111\uffab\112\uffab\113\uffab\131\uffab\001\002\000" +
    "\036\003\175\005\121\044\114\045\135\046\141\047\137" +
    "\050\157\051\126\056\205\064\176\065\204\100\074\110" +
    "\100\111\105\001\002\000\020\033\166\034\161\035\165" +
    "\036\172\037\171\040\162\065\202\001\002\000\146\002" +
    "\uff99\003\uff99\004\uff99\005\uff99\007\uff99\010\uff99\011\uff99" +
    "\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99\017\uff99\020" +
    "\uff99\021\uff99\022\uff99\023\uff99\025\uff99\026\uff99\027\uff99" +
    "\030\uff99\031\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037" +
    "\uff99\040\uff99\041\uff99\042\uff99\057\uff99\061\uff99\062\uff99" +
    "\065\uff99\066\uff99\070\uff99\072\uff99\073\uff99\074\uff99\075" +
    "\uff99\076\uff99\100\uff99\101\uff99\102\uff99\110\uff99\111\uff99" +
    "\112\uff99\113\uff99\130\uff99\131\uff99\001\002\000\150\002" +
    "\uffc7\003\uffc7\004\uffc7\005\uffc7\007\uffc7\010\uffc7\011\uffc7" +
    "\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020" +
    "\uffc7\021\uffc7\022\uffc7\023\uffc7\025\uffc7\026\uffc7\027\uffc7" +
    "\030\uffc7\031\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037" +
    "\uffc7\040\uffc7\041\uffc7\042\uffc7\056\213\057\uffc7\061\uffc7" +
    "\062\uffc7\065\uffc7\066\uffc7\070\uffc7\072\uffc7\073\uffc7\074" +
    "\uffc7\075\uffc7\076\uffc7\100\uffc7\101\uffc7\102\uffc7\110\uffc7" +
    "\111\uffc7\112\uffc7\113\uffc7\130\uffc7\131\uffc7\001\002\000" +
    "\146\002\uff96\003\uff96\004\uff96\005\uff96\007\uff96\010\uff96" +
    "\011\uff96\012\uff96\013\uff96\014\uff96\015\uff96\016\uff96\017" +
    "\uff96\020\uff96\021\uff96\022\uff96\023\uff96\025\uff96\026\uff96" +
    "\027\uff96\030\uff96\031\uff96\033\uff96\034\uff96\035\uff96\036" +
    "\uff96\037\uff96\040\uff96\041\uff96\042\uff96\057\uff96\061\uff96" +
    "\062\uff96\065\uff96\066\uff96\070\uff96\072\uff96\073\uff96\074" +
    "\uff96\075\uff96\076\uff96\100\uff96\101\uff96\102\uff96\110\uff96" +
    "\111\uff96\112\uff96\113\uff96\130\uff96\131\uff96\001\002\000" +
    "\032\003\207\005\121\044\114\045\135\046\141\047\137" +
    "\050\157\051\126\064\176\100\074\110\100\111\105\001" +
    "\002\000\146\002\uff97\003\uff97\004\uff97\005\uff97\007\uff97" +
    "\010\uff97\011\uff97\012\uff97\013\uff97\014\uff97\015\uff97\016" +
    "\uff97\017\uff97\020\uff97\021\uff97\022\uff97\023\uff97\025\uff97" +
    "\026\uff97\027\uff97\030\uff97\031\uff97\033\166\034\161\035" +
    "\165\036\172\037\171\040\162\041\uff97\042\uff97\057\uff97" +
    "\061\uff97\062\uff97\065\uff97\066\uff97\070\uff97\072\uff97\073" +
    "\uff97\074\uff97\075\uff97\076\uff97\100\uff97\101\uff97\102\uff97" +
    "\110\uff97\111\uff97\112\uff97\113\uff97\130\uff97\131\uff97\001" +
    "\002\000\036\003\175\005\121\044\114\045\135\046\141" +
    "\047\137\050\157\051\126\056\205\057\212\064\176\100" +
    "\074\110\100\111\105\001\002\000\020\033\166\034\161" +
    "\035\165\036\172\037\171\040\162\057\211\001\002\000" +
    "\152\002\uff78\003\uff78\004\uff78\005\uff78\007\uff78\010\uff78" +
    "\011\uff78\012\uff78\013\uff78\014\uff78\015\uff78\016\uff78\017" +
    "\uff78\020\uff78\021\uff78\022\uff78\023\uff78\025\uff78\026\uff78" +
    "\027\uff78\030\uff78\031\uff78\033\uff78\034\uff78\035\uff78\036" +
    "\uff78\037\uff78\040\uff78\041\uff78\042\uff78\043\uff78\056\uff78" +
    "\057\uff78\061\uff78\062\uff78\065\uff78\066\uff78\070\uff78\072" +
    "\uff78\073\uff78\074\uff78\075\uff78\076\uff78\100\uff78\101\uff78" +
    "\102\uff78\110\uff78\111\uff78\112\uff78\113\uff78\130\uff78\131" +
    "\uff78\001\002\000\152\002\uff77\003\uff77\004\uff77\005\uff77" +
    "\007\uff77\010\uff77\011\uff77\012\uff77\013\uff77\014\uff77\015" +
    "\uff77\016\uff77\017\uff77\020\uff77\021\uff77\022\uff77\023\uff77" +
    "\025\uff77\026\uff77\027\uff77\030\uff77\031\uff77\033\uff77\034" +
    "\uff77\035\uff77\036\uff77\037\uff77\040\uff77\041\uff77\042\uff77" +
    "\043\uff77\056\uff77\057\uff77\061\uff77\062\uff77\065\uff77\066" +
    "\uff77\070\uff77\072\uff77\073\uff77\074\uff77\075\uff77\076\uff77" +
    "\100\uff77\101\uff77\102\uff77\110\uff77\111\uff77\112\uff77\113" +
    "\uff77\130\uff77\131\uff77\001\002\000\032\003\214\005\121" +
    "\044\114\045\135\046\141\047\137\050\157\051\126\064" +
    "\176\100\074\110\100\111\105\001\002\000\036\003\175" +
    "\005\121\044\114\045\135\046\141\047\137\050\157\051" +
    "\126\056\205\057\217\064\176\100\074\110\100\111\105" +
    "\001\002\000\020\033\166\034\161\035\165\036\172\037" +
    "\171\040\162\057\216\001\002\000\152\002\uff79\003\uff79" +
    "\004\uff79\005\uff79\007\uff79\010\uff79\011\uff79\012\uff79\013" +
    "\uff79\014\uff79\015\uff79\016\uff79\017\uff79\020\uff79\021\uff79" +
    "\022\uff79\023\uff79\025\uff79\026\uff79\027\uff79\030\uff79\031" +
    "\uff79\033\uff79\034\uff79\035\uff79\036\uff79\037\uff79\040\uff79" +
    "\041\uff79\042\uff79\043\uff79\056\uff79\057\uff79\061\uff79\062" +
    "\uff79\065\uff79\066\uff79\070\uff79\072\uff79\073\uff79\074\uff79" +
    "\075\uff79\076\uff79\100\uff79\101\uff79\102\uff79\110\uff79\111" +
    "\uff79\112\uff79\113\uff79\130\uff79\131\uff79\001\002\000\152" +
    "\002\uff76\003\uff76\004\uff76\005\uff76\007\uff76\010\uff76\011" +
    "\uff76\012\uff76\013\uff76\014\uff76\015\uff76\016\uff76\017\uff76" +
    "\020\uff76\021\uff76\022\uff76\023\uff76\025\uff76\026\uff76\027" +
    "\uff76\030\uff76\031\uff76\033\uff76\034\uff76\035\uff76\036\uff76" +
    "\037\uff76\040\uff76\041\uff76\042\uff76\043\uff76\056\uff76\057" +
    "\uff76\061\uff76\062\uff76\065\uff76\066\uff76\070\uff76\072\uff76" +
    "\073\uff76\074\uff76\075\uff76\076\uff76\100\uff76\101\uff76\102" +
    "\uff76\110\uff76\111\uff76\112\uff76\113\uff76\130\uff76\131\uff76" +
    "\001\002\000\126\002\uffaf\003\uffaf\004\uffaf\005\uffaf\007" +
    "\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf" +
    "\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\033\166\034" +
    "\161\035\165\036\172\037\171\040\162\041\uffaf\042\uffaf" +
    "\061\uffaf\062\uffaf\065\uffaf\066\uffaf\070\uffaf\072\uffaf\073" +
    "\uffaf\074\uffaf\075\uffaf\076\uffaf\100\uffaf\101\uffaf\102\uffaf" +
    "\110\uffaf\111\uffaf\112\uffaf\113\uffaf\131\uffaf\001\002\000" +
    "\146\002\uff9c\003\uff9c\004\uff9c\005\uff9c\007\uff9c\010\uff9c" +
    "\011\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c\017" +
    "\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c\025\uff9c\026\uff9c" +
    "\027\uff9c\030\uff9c\031\uff9c\033\uff9c\034\uff9c\035\uff9c\036" +
    "\uff9c\037\uff9c\040\162\041\uff9c\042\uff9c\057\uff9c\061\uff9c" +
    "\062\uff9c\065\uff9c\066\uff9c\070\uff9c\072\uff9c\073\uff9c\074" +
    "\uff9c\075\uff9c\076\uff9c\100\uff9c\101\uff9c\102\uff9c\110\uff9c" +
    "\111\uff9c\112\uff9c\113\uff9c\130\uff9c\131\uff9c\001\002\000" +
    "\146\002\uff9b\003\uff9b\004\uff9b\005\uff9b\007\uff9b\010\uff9b" +
    "\011\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\017" +
    "\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b\025\uff9b\026\uff9b" +
    "\027\uff9b\030\uff9b\031\uff9b\033\uff9b\034\uff9b\035\uff9b\036" +
    "\uff9b\037\uff9b\040\162\041\uff9b\042\uff9b\057\uff9b\061\uff9b" +
    "\062\uff9b\065\uff9b\066\uff9b\070\uff9b\072\uff9b\073\uff9b\074" +
    "\uff9b\075\uff9b\076\uff9b\100\uff9b\101\uff9b\102\uff9b\110\uff9b" +
    "\111\uff9b\112\uff9b\113\uff9b\130\uff9b\131\uff9b\001\002\000" +
    "\126\002\uffad\003\uffad\004\uffad\005\uffad\007\uffad\010\uffad" +
    "\011\uffad\012\uffad\013\uffad\014\uffad\015\uffad\025\uffad\026" +
    "\uffad\027\uffad\030\uffad\031\uffad\033\166\034\161\035\165" +
    "\036\172\037\171\040\162\041\uffad\042\uffad\061\uffad\062" +
    "\uffad\065\uffad\066\uffad\070\uffad\072\uffad\073\uffad\074\uffad" +
    "\075\uffad\076\uffad\100\uffad\101\uffad\102\uffad\110\uffad\111" +
    "\uffad\112\uffad\113\uffad\131\uffad\001\002\000\126\002\uffae" +
    "\003\uffae\004\uffae\005\uffae\007\uffae\010\uffae\011\uffae\012" +
    "\uffae\013\uffae\014\uffae\015\uffae\025\uffae\026\uffae\027\uffae" +
    "\030\uffae\031\uffae\033\166\034\161\035\165\036\172\037" +
    "\171\040\162\041\uffae\042\uffae\061\uffae\062\uffae\065\uffae" +
    "\066\uffae\070\uffae\072\uffae\073\uffae\074\uffae\075\uffae\076" +
    "\uffae\100\uffae\101\uffae\102\uffae\110\uffae\111\uffae\112\uffae" +
    "\113\uffae\131\uffae\001\002\000\146\002\uff9f\003\uff9f\004" +
    "\uff9f\005\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f" +
    "\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022" +
    "\uff9f\023\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f" +
    "\033\uff9f\034\uff9f\035\165\036\172\037\171\040\162\041" +
    "\uff9f\042\uff9f\057\uff9f\061\uff9f\062\uff9f\065\uff9f\066\uff9f" +
    "\070\uff9f\072\uff9f\073\uff9f\074\uff9f\075\uff9f\076\uff9f\100" +
    "\uff9f\101\uff9f\102\uff9f\110\uff9f\111\uff9f\112\uff9f\113\uff9f" +
    "\130\uff9f\131\uff9f\001\002\000\146\002\uff9d\003\uff9d\004" +
    "\uff9d\005\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d" +
    "\014\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022" +
    "\uff9d\023\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d" +
    "\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\162\041" +
    "\uff9d\042\uff9d\057\uff9d\061\uff9d\062\uff9d\065\uff9d\066\uff9d" +
    "\070\uff9d\072\uff9d\073\uff9d\074\uff9d\075\uff9d\076\uff9d\100" +
    "\uff9d\101\uff9d\102\uff9d\110\uff9d\111\uff9d\112\uff9d\113\uff9d" +
    "\130\uff9d\131\uff9d\001\002\000\126\002\uffac\003\uffac\004" +
    "\uffac\005\uffac\007\uffac\010\uffac\011\uffac\012\uffac\013\uffac" +
    "\014\uffac\015\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031" +
    "\uffac\033\166\034\161\035\165\036\172\037\171\040\162" +
    "\041\uffac\042\uffac\061\uffac\062\uffac\065\uffac\066\uffac\070" +
    "\uffac\072\uffac\073\uffac\074\uffac\075\uffac\076\uffac\100\uffac" +
    "\101\uffac\102\uffac\110\uffac\111\uffac\112\uffac\113\uffac\131" +
    "\uffac\001\002\000\126\002\uffb0\003\uffb0\004\uffb0\005\uffb0" +
    "\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015" +
    "\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\033\166" +
    "\034\161\035\165\036\172\037\171\040\162\041\uffb0\042" +
    "\uffb0\061\uffb0\062\uffb0\065\uffb0\066\uffb0\070\uffb0\072\uffb0" +
    "\073\uffb0\074\uffb0\075\uffb0\076\uffb0\100\uffb0\101\uffb0\102" +
    "\uffb0\110\uffb0\111\uffb0\112\uffb0\113\uffb0\131\uffb0\001\002" +
    "\000\146\002\uff9a\003\uff9a\004\uff9a\005\uff9a\007\uff9a\010" +
    "\uff9a\011\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a" +
    "\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\025\uff9a\026" +
    "\uff9a\027\uff9a\030\uff9a\031\uff9a\033\uff9a\034\uff9a\035\uff9a" +
    "\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a\057\uff9a\061" +
    "\uff9a\062\uff9a\065\uff9a\066\uff9a\070\uff9a\072\uff9a\073\uff9a" +
    "\074\uff9a\075\uff9a\076\uff9a\100\uff9a\101\uff9a\102\uff9a\110" +
    "\uff9a\111\uff9a\112\uff9a\113\uff9a\130\uff9a\131\uff9a\001\002" +
    "\000\146\002\uff9e\003\uff9e\004\uff9e\005\uff9e\007\uff9e\010" +
    "\uff9e\011\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e" +
    "\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\025\uff9e\026" +
    "\uff9e\027\uff9e\030\uff9e\031\uff9e\033\uff9e\034\uff9e\035\165" +
    "\036\172\037\171\040\162\041\uff9e\042\uff9e\057\uff9e\061" +
    "\uff9e\062\uff9e\065\uff9e\066\uff9e\070\uff9e\072\uff9e\073\uff9e" +
    "\074\uff9e\075\uff9e\076\uff9e\100\uff9e\101\uff9e\102\uff9e\110" +
    "\uff9e\111\uff9e\112\uff9e\113\uff9e\130\uff9e\131\uff9e\001\002" +
    "\000\004\065\237\001\002\000\052\003\175\005\121\016" +
    "\134\017\117\020\132\021\136\022\153\023\156\044\114" +
    "\045\135\046\141\047\137\050\157\051\126\056\205\064" +
    "\176\065\204\100\074\110\100\111\105\001\002\000\034" +
    "\016\163\017\173\020\167\021\170\022\164\023\174\033" +
    "\166\034\161\035\165\036\172\037\171\040\162\065\202" +
    "\001\002\000\114\002\uffa6\003\uffa6\004\uffa6\005\uffa6\007" +
    "\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6" +
    "\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\033\uffa6\041" +
    "\uffa6\042\uffa6\061\uffa6\062\uffa6\065\uffa6\066\uffa6\070\uffa6" +
    "\072\uffa6\073\uffa6\074\uffa6\075\uffa6\076\uffa6\100\uffa6\101" +
    "\uffa6\102\uffa6\110\uffa6\111\uffa6\112\uffa6\113\uffa6\131\uffa6" +
    "\001\002\000\114\002\uffa8\003\uffa8\004\uffa8\005\uffa8\007" +
    "\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8" +
    "\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\033\uffa8\041" +
    "\uffa8\042\uffa8\061\uffa8\062\uffa8\065\uffa8\066\uffa8\070\uffa8" +
    "\072\uffa8\073\uffa8\074\uffa8\075\uffa8\076\uffa8\100\uffa8\101" +
    "\uffa8\102\uffa8\110\uffa8\111\uffa8\112\uffa8\113\uffa8\131\uffa8" +
    "\001\002\000\064\003\245\005\121\016\134\017\117\020" +
    "\132\021\136\022\153\023\156\024\143\025\123\026\124" +
    "\027\130\030\125\031\116\032\122\044\114\045\135\046" +
    "\141\047\137\050\157\051\126\064\147\100\074\110\100" +
    "\111\105\001\002\000\064\003\245\005\121\016\134\017" +
    "\117\020\132\021\136\022\153\023\156\024\143\025\123" +
    "\026\124\027\130\030\125\031\116\032\122\044\114\045" +
    "\135\046\141\047\137\050\157\051\126\064\147\100\074" +
    "\110\100\111\105\001\002\000\064\003\245\005\121\016" +
    "\134\017\117\020\132\021\136\022\153\023\156\024\143" +
    "\025\123\026\124\027\130\030\125\031\116\032\122\044" +
    "\114\045\135\046\141\047\137\050\157\051\126\064\147" +
    "\100\074\110\100\111\105\001\002\000\064\003\245\005" +
    "\121\016\134\017\117\020\132\021\136\022\153\023\156" +
    "\024\143\025\123\026\124\027\130\030\125\031\116\032" +
    "\122\044\114\045\135\046\141\047\137\050\157\051\126" +
    "\064\147\100\074\110\100\111\105\001\002\000\064\003" +
    "\245\005\121\016\134\017\117\020\132\021\136\022\153" +
    "\023\156\024\143\025\123\026\124\027\130\030\125\031" +
    "\116\032\122\044\114\045\135\046\141\047\137\050\157" +
    "\051\126\064\147\100\074\110\100\111\105\001\002\000" +
    "\062\003\175\005\121\016\134\017\117\020\132\021\136" +
    "\022\153\023\156\025\123\026\124\027\130\030\125\031" +
    "\116\044\114\045\135\046\141\047\137\050\157\051\126" +
    "\056\205\064\176\100\074\110\100\111\105\001\002\000" +
    "\114\002\uffc0\003\uffc0\004\uffc0\005\uffc0\007\uffc0\010\uffc0" +
    "\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\025\241\026" +
    "\240\027\uffc0\030\uffc0\031\uffc0\033\uffc0\041\uffc0\042\uffc0" +
    "\061\uffc0\062\uffc0\065\uffc0\066\uffc0\070\uffc0\072\uffc0\073" +
    "\uffc0\074\uffc0\075\uffc0\076\uffc0\100\uffc0\101\uffc0\102\uffc0" +
    "\110\uffc0\111\uffc0\112\uffc0\113\uffc0\131\uffc0\001\002\000" +
    "\114\002\uffb8\003\uffb8\004\uffb8\005\uffb8\007\uffb8\010\uffb8" +
    "\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\025\uffb8\026" +
    "\uffb8\027\uffb8\030\uffb8\031\uffb8\033\uffb8\041\uffb8\042\uffb8" +
    "\061\uffb8\062\uffb8\065\uffb8\066\uffb8\070\uffb8\072\uffb8\073" +
    "\uffb8\074\uffb8\075\uffb8\076\uffb8\100\uffb8\101\uffb8\102\uffb8" +
    "\110\uffb8\111\uffb8\112\uffb8\113\uffb8\131\uffb8\001\002\000" +
    "\114\002\uffbe\003\uffbe\004\uffbe\005\uffbe\007\uffbe\010\uffbe" +
    "\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\025\241\026" +
    "\240\027\uffbe\030\uffbe\031\uffbe\033\uffbe\041\uffbe\042\uffbe" +
    "\061\uffbe\062\uffbe\065\uffbe\066\uffbe\070\uffbe\072\uffbe\073" +
    "\uffbe\074\uffbe\075\uffbe\076\uffbe\100\uffbe\101\uffbe\102\uffbe" +
    "\110\uffbe\111\uffbe\112\uffbe\113\uffbe\131\uffbe\001\002\000" +
    "\114\002\uffbf\003\uffbf\004\uffbf\005\uffbf\007\uffbf\010\uffbf" +
    "\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\025\241\026" +
    "\240\027\uffbf\030\uffbf\031\uffbf\033\uffbf\041\uffbf\042\uffbf" +
    "\061\uffbf\062\uffbf\065\uffbf\066\uffbf\070\uffbf\072\uffbf\073" +
    "\uffbf\074\uffbf\075\uffbf\076\uffbf\100\uffbf\101\uffbf\102\uffbf" +
    "\110\uffbf\111\uffbf\112\uffbf\113\uffbf\131\uffbf\001\002\000" +
    "\114\002\uffbd\003\uffbd\004\uffbd\005\uffbd\007\uffbd\010\uffbd" +
    "\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\025\uffbd\026" +
    "\uffbd\027\uffbd\030\uffbd\031\uffbd\033\uffbd\041\uffbd\042\uffbd" +
    "\061\uffbd\062\uffbd\065\uffbd\066\uffbd\070\uffbd\072\uffbd\073" +
    "\uffbd\074\uffbd\075\uffbd\076\uffbd\100\uffbd\101\uffbd\102\uffbd" +
    "\110\uffbd\111\uffbd\112\uffbd\113\uffbd\131\uffbd\001\002\000" +
    "\114\002\uffbc\003\uffbc\004\uffbc\005\uffbc\007\uffbc\010\uffbc" +
    "\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\025\uffbc\026" +
    "\uffbc\027\uffbc\030\uffbc\031\uffbc\033\uffbc\041\uffbc\042\uffbc" +
    "\061\uffbc\062\uffbc\065\uffbc\066\uffbc\070\uffbc\072\uffbc\073" +
    "\uffbc\074\uffbc\075\uffbc\076\uffbc\100\uffbc\101\uffbc\102\uffbc" +
    "\110\uffbc\111\uffbc\112\uffbc\113\uffbc\131\uffbc\001\002\000" +
    "\114\002\uffa9\003\uffa9\004\uffa9\005\uffa9\007\uffa9\010\uffa9" +
    "\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\025\uffa9\026" +
    "\uffa9\027\uffa9\030\uffa9\031\uffa9\033\uffa9\041\uffa9\042\uffa9" +
    "\061\uffa9\062\uffa9\065\uffa9\066\uffa9\070\uffa9\072\uffa9\073" +
    "\uffa9\074\uffa9\075\uffa9\076\uffa9\100\uffa9\101\uffa9\102\uffa9" +
    "\110\uffa9\111\uffa9\112\uffa9\113\uffa9\131\uffa9\001\002\000" +
    "\050\003\175\005\121\016\134\017\117\020\132\021\136" +
    "\022\153\023\156\044\114\045\135\046\141\047\137\050" +
    "\157\051\126\056\205\064\176\100\074\110\100\111\105" +
    "\001\002\000\142\002\uffaa\003\uffaa\004\uffaa\005\uffaa\007" +
    "\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa" +
    "\016\163\017\173\020\167\021\170\022\164\023\174\025" +
    "\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\033\166\034\161" +
    "\035\165\036\172\037\171\040\162\041\uffaa\042\uffaa\061" +
    "\uffaa\062\uffaa\065\uffaa\066\uffaa\070\uffaa\072\uffaa\073\uffaa" +
    "\074\uffaa\075\uffaa\076\uffaa\100\uffaa\101\uffaa\102\uffaa\110" +
    "\uffaa\111\uffaa\112\uffaa\113\uffaa\131\uffaa\001\002\000\046" +
    "\003\uff13\005\uff13\042\uff13\062\uff13\066\uff13\070\uff13\072" +
    "\uff13\073\uff13\074\uff13\075\uff13\076\uff13\100\uff13\101\uff13" +
    "\102\uff13\110\uff13\111\uff13\112\uff13\131\uff13\001\002\000" +
    "\064\003\245\005\121\016\134\017\117\020\132\021\136" +
    "\022\153\023\156\024\143\025\123\026\124\027\130\030" +
    "\125\031\116\032\122\044\114\045\135\046\141\047\137" +
    "\050\157\051\126\064\147\100\074\110\100\111\105\001" +
    "\002\000\022\003\uff0f\025\241\026\240\027\244\030\242" +
    "\031\243\033\uff0f\065\uff0f\001\002\000\064\003\245\005" +
    "\121\016\134\017\117\020\132\021\136\022\153\023\156" +
    "\024\143\025\123\026\124\027\130\030\125\031\116\032" +
    "\122\044\114\045\135\046\141\047\137\050\157\051\126" +
    "\064\147\100\074\110\100\111\105\001\002\000\064\003" +
    "\245\005\121\016\134\017\117\020\132\021\136\022\153" +
    "\023\156\024\143\025\123\026\124\027\130\030\125\031" +
    "\116\032\122\044\114\045\135\046\141\047\137\050\157" +
    "\051\126\064\147\100\074\110\100\111\105\001\002\000" +
    "\046\003\uff15\005\uff15\042\uff15\062\uff15\066\uff15\070\uff15" +
    "\072\uff15\073\uff15\074\uff15\075\uff15\076\uff15\100\uff15\101" +
    "\uff15\102\uff15\110\uff15\111\uff15\112\uff15\131\uff15\001\002" +
    "\000\022\003\uff0e\025\241\026\240\027\244\030\242\031" +
    "\243\033\uff0e\065\uff0e\001\002\000\022\003\uff11\025\241" +
    "\026\240\027\244\030\242\031\243\033\uff11\065\uff11\001" +
    "\002\000\114\002\uffb6\003\uffb6\004\uffb6\005\uffb6\007\uffb6" +
    "\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\025" +
    "\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\033\uffb6\041\uffb6" +
    "\042\uffb6\061\uffb6\062\uffb6\065\uffb6\066\uffb6\070\uffb6\072" +
    "\uffb6\073\uffb6\074\uffb6\075\uffb6\076\uffb6\100\uffb6\101\uffb6" +
    "\102\uffb6\110\uffb6\111\uffb6\112\uffb6\113\uffb6\131\uffb6\001" +
    "\002\000\064\003\245\005\121\016\134\017\117\020\132" +
    "\021\136\022\153\023\156\024\143\025\123\026\124\027" +
    "\130\030\125\031\116\032\122\044\114\045\135\046\141" +
    "\047\137\050\157\051\126\064\147\100\074\110\100\111" +
    "\105\001\002\000\016\025\241\026\240\027\244\030\242" +
    "\031\243\065\272\001\002\000\114\002\uffbb\003\uffbb\004" +
    "\uffbb\005\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb" +
    "\014\uffbb\015\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031" +
    "\uffbb\033\uffbb\041\uffbb\042\uffbb\061\uffbb\062\uffbb\065\uffbb" +
    "\066\uffbb\070\uffbb\072\uffbb\073\uffbb\074\uffbb\075\uffbb\076" +
    "\uffbb\100\uffbb\101\uffbb\102\uffbb\110\uffbb\111\uffbb\112\uffbb" +
    "\113\uffbb\131\uffbb\001\002\000\150\002\uffc8\003\uffc8\004" +
    "\uffc8\005\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8" +
    "\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022" +
    "\uffc8\023\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8" +
    "\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041" +
    "\uffc8\042\uffc8\056\213\057\uffc8\061\uffc8\062\uffc8\065\uffc8" +
    "\066\uffc8\070\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8\076" +
    "\uffc8\100\uffc8\101\uffc8\102\uffc8\110\uffc8\111\uffc8\112\uffc8" +
    "\113\uffc8\130\uffc8\131\uffc8\001\002\000\034\003\277\005" +
    "\121\044\114\045\135\046\141\047\137\050\157\051\126" +
    "\064\176\065\uffc9\100\074\110\100\111\105\001\002\000" +
    "\004\065\307\001\002\000\006\007\305\065\uffca\001\002" +
    "\000\040\003\175\005\121\007\302\044\114\045\135\046" +
    "\141\047\137\050\157\051\126\056\205\064\176\065\303" +
    "\100\074\110\100\111\105\001\002\000\024\003\301\007" +
    "\uffcd\033\166\034\161\035\165\036\172\037\171\040\162" +
    "\065\uffcd\001\002\000\006\007\uffcb\065\uffcb\001\002\000" +
    "\032\003\175\005\121\044\114\045\135\046\141\047\137" +
    "\050\157\051\126\064\176\100\074\110\100\111\105\001" +
    "\002\000\146\002\uffcf\003\uffcf\004\uffcf\005\uffcf\007\uffcf" +
    "\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016" +
    "\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\025\uffcf" +
    "\026\uffcf\027\uffcf\030\uffcf\031\uffcf\033\uffcf\034\uffcf\035" +
    "\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\057\uffcf" +
    "\061\uffcf\062\uffcf\065\uffcf\066\uffcf\070\uffcf\072\uffcf\073" +
    "\uffcf\074\uffcf\075\uffcf\076\uffcf\100\uffcf\101\uffcf\102\uffcf" +
    "\110\uffcf\111\uffcf\112\uffcf\113\uffcf\130\uffcf\131\uffcf\001" +
    "\002\000\022\007\uffcc\033\166\034\161\035\165\036\172" +
    "\037\171\040\162\065\uffcc\001\002\000\032\003\175\005" +
    "\121\044\114\045\135\046\141\047\137\050\157\051\126" +
    "\064\176\100\074\110\100\111\105\001\002\000\022\007" +
    "\uffce\033\166\034\161\035\165\036\172\037\171\040\162" +
    "\065\uffce\001\002\000\146\002\uffd0\003\uffd0\004\uffd0\005" +
    "\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0" +
    "\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023" +
    "\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\033\uffd0" +
    "\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042" +
    "\uffd0\057\uffd0\061\uffd0\062\uffd0\065\uffd0\066\uffd0\070\uffd0" +
    "\072\uffd0\073\uffd0\074\uffd0\075\uffd0\076\uffd0\100\uffd0\101" +
    "\uffd0\102\uffd0\110\uffd0\111\uffd0\112\uffd0\113\uffd0\130\uffd0" +
    "\131\uffd0\001\002\000\114\002\uffb7\003\uffb7\004\uffb7\005" +
    "\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7" +
    "\015\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\033" +
    "\uffb7\041\uffb7\042\uffb7\061\uffb7\062\uffb7\065\uffb7\066\uffb7" +
    "\070\uffb7\072\uffb7\073\uffb7\074\uffb7\075\uffb7\076\uffb7\100" +
    "\uffb7\101\uffb7\102\uffb7\110\uffb7\111\uffb7\112\uffb7\113\uffb7" +
    "\131\uffb7\001\002\000\046\003\uff12\005\uff12\042\uff12\062" +
    "\uff12\066\uff12\070\uff12\072\uff12\073\uff12\074\uff12\075\uff12" +
    "\076\uff12\100\uff12\101\uff12\102\uff12\110\uff12\111\uff12\112" +
    "\uff12\131\uff12\001\002\000\004\065\325\001\002\000\032" +
    "\003\314\005\121\044\114\045\135\046\141\047\137\050" +
    "\157\051\126\064\176\100\074\110\100\111\105\001\002" +
    "\000\036\003\175\005\121\044\114\045\135\046\141\047" +
    "\137\050\157\051\126\056\205\064\176\065\324\100\074" +
    "\110\100\111\105\001\002\000\022\003\317\007\316\033" +
    "\166\034\161\035\165\036\172\037\171\040\162\001\002" +
    "\000\032\003\175\005\121\044\114\045\135\046\141\047" +
    "\137\050\157\051\126\064\176\100\074\110\100\111\105" +
    "\001\002\000\032\003\175\005\121\044\114\045\135\046" +
    "\141\047\137\050\157\051\126\064\176\100\074\110\100" +
    "\111\105\001\002\000\020\033\166\034\161\035\165\036" +
    "\172\037\171\040\162\065\321\001\002\000\046\003\uff22" +
    "\005\uff22\042\uff22\062\uff22\066\uff22\070\uff22\072\uff22\073" +
    "\uff22\074\uff22\075\uff22\076\uff22\100\uff22\101\uff22\102\uff22" +
    "\110\uff22\111\uff22\112\uff22\131\uff22\001\002\000\020\033" +
    "\166\034\161\035\165\036\172\037\171\040\162\065\323" +
    "\001\002\000\046\003\uff23\005\uff23\042\uff23\062\uff23\066" +
    "\uff23\070\uff23\072\uff23\073\uff23\074\uff23\075\uff23\076\uff23" +
    "\100\uff23\101\uff23\102\uff23\110\uff23\111\uff23\112\uff23\131" +
    "\uff23\001\002\000\046\003\uff21\005\uff21\042\uff21\062\uff21" +
    "\066\uff21\070\uff21\072\uff21\073\uff21\074\uff21\075\uff21\076" +
    "\uff21\100\uff21\101\uff21\102\uff21\110\uff21\111\uff21\112\uff21" +
    "\131\uff21\001\002\000\046\003\uff20\005\uff20\042\uff20\062" +
    "\uff20\066\uff20\070\uff20\072\uff20\073\uff20\074\uff20\075\uff20" +
    "\076\uff20\100\uff20\101\uff20\102\uff20\110\uff20\111\uff20\112" +
    "\uff20\131\uff20\001\002\000\100\002\ufffc\003\ufffc\004\ufffc" +
    "\005\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\041" +
    "\ufffc\042\ufffc\062\ufffc\063\ufffc\066\ufffc\067\ufffc\070\ufffc" +
    "\071\ufffc\072\ufffc\073\ufffc\074\ufffc\075\ufffc\076\ufffc\100" +
    "\ufffc\101\ufffc\102\ufffc\110\ufffc\111\ufffc\112\ufffc\113\ufffc" +
    "\127\ufffc\131\ufffc\001\002\000\034\002\ufefa\003\ufefa\004" +
    "\ufefa\005\ufefa\011\ufefa\012\ufefa\013\ufefa\014\ufefa\015\ufefa" +
    "\041\ufefa\042\ufefa\113\ufefa\131\ufefa\001\002\000\010\003" +
    "\uffc1\005\uffc1\055\uffc1\001\002\000\006\005\332\055\333" +
    "\001\002\000\052\003\uffe0\005\uffe0\007\uffe0\042\uffe0\043" +
    "\376\062\uffe0\066\uffe0\070\uffe0\072\uffe0\073\uffe0\074\uffe0" +
    "\075\uffe0\076\uffe0\100\uffe0\101\uffe0\102\uffe0\110\uffe0\111" +
    "\uffe0\112\uffe0\131\uffe0\001\002\000\004\005\334\001\002" +
    "\000\052\003\uff7e\005\uff7e\007\uff7e\042\uff7e\056\205\062" +
    "\uff7e\066\uff7e\070\uff7e\072\uff7e\073\uff7e\074\uff7e\075\uff7e" +
    "\076\uff7e\100\uff7e\101\uff7e\102\uff7e\110\uff7e\111\uff7e\112" +
    "\uff7e\131\uff7e\001\002\000\054\003\uff7d\005\uff7d\007\uff7d" +
    "\042\uff7d\043\336\056\213\062\uff7d\066\uff7d\070\uff7d\072" +
    "\uff7d\073\uff7d\074\uff7d\075\uff7d\076\uff7d\100\uff7d\101\uff7d" +
    "\102\uff7d\110\uff7d\111\uff7d\112\uff7d\131\uff7d\001\002\000" +
    "\004\060\337\001\002\000\066\003\343\005\121\016\134" +
    "\017\117\020\132\021\136\022\153\023\156\024\143\025" +
    "\123\026\124\027\130\030\125\031\116\032\122\044\114" +
    "\045\135\046\141\047\137\050\157\051\126\060\342\064" +
    "\147\100\074\110\100\111\105\001\002\000\010\003\355" +
    "\007\354\061\uff74\001\002\000\004\061\375\001\002\000" +
    "\066\003\343\005\121\016\134\017\117\020\132\021\136" +
    "\022\153\023\156\024\143\025\123\026\124\027\130\030" +
    "\125\031\116\032\122\044\114\045\135\046\141\047\137" +
    "\050\157\051\126\060\342\064\147\100\074\110\100\111" +
    "\105\001\002\000\070\003\175\005\121\007\363\016\134" +
    "\017\117\020\132\021\136\022\153\023\156\025\123\026" +
    "\124\027\130\030\125\031\116\044\114\045\135\046\141" +
    "\047\137\050\157\051\126\056\205\060\362\061\361\064" +
    "\176\100\074\110\100\111\105\001\002\000\064\003\uff68" +
    "\005\uff68\007\uff68\025\241\026\240\027\244\030\242\031" +
    "\243\042\uff68\061\uff68\062\uff68\066\uff68\070\uff68\072\uff68" +
    "\073\uff68\074\uff68\075\uff68\076\uff68\100\uff68\101\uff68\102" +
    "\uff68\110\uff68\111\uff68\112\uff68\131\uff68\001\002\000\010" +
    "\003\uff6b\007\uff6b\061\uff6b\001\002\000\006\007\347\061" +
    "\uff75\001\002\000\004\060\350\001\002\000\066\003\343" +
    "\005\121\016\134\017\117\020\132\021\136\022\153\023" +
    "\156\024\143\025\123\026\124\027\130\030\125\031\116" +
    "\032\122\044\114\045\135\046\141\047\137\050\157\051" +
    "\126\060\342\064\147\100\074\110\100\111\105\001\002" +
    "\000\010\003\355\007\354\061\356\001\002\000\006\007" +
    "\347\061\353\001\002\000\006\007\uff72\061\uff72\001\002" +
    "\000\064\003\245\005\121\016\134\017\117\020\132\021" +
    "\136\022\153\023\156\024\143\025\123\026\124\027\130" +
    "\030\125\031\116\032\122\044\114\045\135\046\141\047" +
    "\137\050\157\051\126\064\147\100\074\110\100\111\105" +
    "\001\002\000\064\003\245\005\121\016\134\017\117\020" +
    "\132\021\136\022\153\023\156\024\143\025\123\026\124" +
    "\027\130\030\125\031\116\032\122\044\114\045\135\046" +
    "\141\047\137\050\157\051\126\064\147\100\074\110\100" +
    "\111\105\001\002\000\006\007\uff70\061\uff70\001\002\000" +
    "\010\003\uff69\007\uff69\061\uff69\001\002\000\010\003\uff6c" +
    "\007\uff6c\061\uff6c\001\002\000\006\007\uff6d\061\uff6d\001" +
    "\002\000\066\003\343\005\121\016\134\017\117\020\132" +
    "\021\136\022\153\023\156\024\143\025\123\026\124\027" +
    "\130\030\125\031\116\032\122\044\114\045\135\046\141" +
    "\047\137\050\157\051\126\060\342\064\147\100\074\110" +
    "\100\111\105\001\002\000\064\003\245\005\121\016\134" +
    "\017\117\020\132\021\136\022\153\023\156\024\143\025" +
    "\123\026\124\027\130\030\125\031\116\032\122\044\114" +
    "\045\135\046\141\047\137\050\157\051\126\064\147\100" +
    "\074\110\100\111\105\001\002\000\010\003\uff6a\007\uff6a" +
    "\061\uff6a\001\002\000\010\003\355\007\354\061\370\001" +
    "\002\000\006\007\347\061\367\001\002\000\006\007\uff6e" +
    "\061\uff6e\001\002\000\006\007\uff6f\061\uff6f\001\002\000" +
    "\010\003\355\007\354\061\374\001\002\000\006\007\347" +
    "\061\373\001\002\000\006\007\uff73\061\uff73\001\002\000" +
    "\006\007\uff71\061\uff71\001\002\000\050\003\uff7f\005\uff7f" +
    "\007\uff7f\042\uff7f\062\uff7f\066\uff7f\070\uff7f\072\uff7f\073" +
    "\uff7f\074\uff7f\075\uff7f\076\uff7f\100\uff7f\101\uff7f\102\uff7f" +
    "\110\uff7f\111\uff7f\112\uff7f\131\uff7f\001\002\000\064\003" +
    "\245\005\121\016\134\017\117\020\132\021\136\022\153" +
    "\023\156\024\143\025\123\026\124\027\130\030\125\031" +
    "\116\032\122\044\114\045\135\046\141\047\137\050\157" +
    "\051\126\064\147\100\074\110\100\111\105\001\002\000" +
    "\062\003\uffe1\005\uffe1\007\uffe1\025\241\026\240\027\244" +
    "\030\242\031\243\042\uffe1\062\uffe1\066\uffe1\070\uffe1\072" +
    "\uffe1\073\uffe1\074\uffe1\075\uffe1\076\uffe1\100\uffe1\101\uffe1" +
    "\102\uffe1\110\uffe1\111\uffe1\112\uffe1\131\uffe1\001\002\000" +
    "\004\065\u0106\001\002\000\032\003\u0102\005\121\044\114" +
    "\045\135\046\141\047\137\050\157\051\126\064\176\100" +
    "\074\110\100\111\105\001\002\000\036\003\175\005\121" +
    "\044\114\045\135\046\141\047\137\050\157\051\126\056" +
    "\205\064\176\065\u0105\100\074\110\100\111\105\001\002" +
    "\000\020\033\166\034\161\035\165\036\172\037\171\040" +
    "\162\065\u0104\001\002\000\146\002\uff18\003\uff18\004\uff18" +
    "\005\uff18\007\uff18\010\uff18\011\uff18\012\uff18\013\uff18\014" +
    "\uff18\015\uff18\016\uff18\017\uff18\020\uff18\021\uff18\022\uff18" +
    "\023\uff18\025\uff18\026\uff18\027\uff18\030\uff18\031\uff18\033" +
    "\uff18\034\uff18\035\uff18\036\uff18\037\uff18\040\uff18\041\uff18" +
    "\042\uff18\057\uff18\061\uff18\062\uff18\065\uff18\066\uff18\070" +
    "\uff18\072\uff18\073\uff18\074\uff18\075\uff18\076\uff18\100\uff18" +
    "\101\uff18\102\uff18\110\uff18\111\uff18\112\uff18\113\uff18\130" +
    "\uff18\131\uff18\001\002\000\146\002\uff17\003\uff17\004\uff17" +
    "\005\uff17\007\uff17\010\uff17\011\uff17\012\uff17\013\uff17\014" +
    "\uff17\015\uff17\016\uff17\017\uff17\020\uff17\021\uff17\022\uff17" +
    "\023\uff17\025\uff17\026\uff17\027\uff17\030\uff17\031\uff17\033" +
    "\uff17\034\uff17\035\uff17\036\uff17\037\uff17\040\uff17\041\uff17" +
    "\042\uff17\057\uff17\061\uff17\062\uff17\065\uff17\066\uff17\070" +
    "\uff17\072\uff17\073\uff17\074\uff17\075\uff17\076\uff17\100\uff17" +
    "\101\uff17\102\uff17\110\uff17\111\uff17\112\uff17\113\uff17\130" +
    "\uff17\131\uff17\001\002\000\146\002\uff16\003\uff16\004\uff16" +
    "\005\uff16\007\uff16\010\uff16\011\uff16\012\uff16\013\uff16\014" +
    "\uff16\015\uff16\016\uff16\017\uff16\020\uff16\021\uff16\022\uff16" +
    "\023\uff16\025\uff16\026\uff16\027\uff16\030\uff16\031\uff16\033" +
    "\uff16\034\uff16\035\uff16\036\uff16\037\uff16\040\uff16\041\uff16" +
    "\042\uff16\057\uff16\061\uff16\062\uff16\065\uff16\066\uff16\070" +
    "\uff16\072\uff16\073\uff16\074\uff16\075\uff16\076\uff16\100\uff16" +
    "\101\uff16\102\uff16\110\uff16\111\uff16\112\uff16\113\uff16\130" +
    "\uff16\131\uff16\001\002\000\006\065\u0164\131\326\001\002" +
    "\000\044\003\u0117\005\076\042\106\062\072\066\061\072" +
    "\065\073\102\074\104\075\uff3b\076\u0115\100\074\101\110" +
    "\102\070\110\100\111\105\112\111\131\uff3b\001\002\000" +
    "\046\003\u011d\005\076\042\106\062\072\066\061\070\uff3b" +
    "\072\065\073\102\074\104\075\uff3b\076\u0115\100\074\101" +
    "\110\102\070\110\100\111\105\112\111\131\uff3b\001\002" +
    "\000\046\003\u011d\005\076\042\106\062\072\066\061\070" +
    "\uff3b\072\065\073\102\074\104\075\uff3b\076\u0115\100\074" +
    "\101\110\102\070\110\100\111\105\112\111\131\uff3b\001" +
    "\002\000\006\075\u0135\131\ufeb9\001\002\000\046\003\u011d" +
    "\005\076\042\106\062\072\066\061\070\uff3b\072\065\073" +
    "\102\074\104\075\uff3b\076\u0115\100\074\101\110\102\070" +
    "\110\100\111\105\112\111\131\uff3b\001\002\000\046\003" +
    "\u011d\005\076\042\106\062\072\066\061\070\uff3b\072\065" +
    "\073\102\074\104\075\uff3b\076\u0115\100\074\101\110\102" +
    "\070\110\100\111\105\112\111\131\uff3b\001\002\000\050" +
    "\003\u011d\005\076\007\u014d\042\106\062\072\066\061\070" +
    "\uff3b\072\065\073\102\074\104\075\uff3b\076\u0115\100\074" +
    "\101\110\102\070\110\100\111\105\112\111\131\uff3b\001" +
    "\002\000\046\003\u011d\005\076\042\106\062\072\066\061" +
    "\070\uff3b\072\065\073\102\074\104\075\uff3b\076\u0115\100" +
    "\074\101\110\102\070\110\100\111\105\112\111\131\uff3b" +
    "\001\002\000\046\003\u011d\005\076\042\106\062\072\066" +
    "\061\070\uff3b\072\065\073\102\074\104\075\uff3b\076\u0115" +
    "\100\074\101\110\102\070\110\100\111\105\112\111\131" +
    "\uff3b\001\002\000\046\003\u011d\005\076\042\106\062\072" +
    "\066\061\070\uff3b\072\065\073\102\074\104\075\uff3b\076" +
    "\u0115\100\074\101\110\102\070\110\100\111\105\112\111" +
    "\131\uff3b\001\002\000\046\003\u011d\005\076\042\106\062" +
    "\072\066\061\070\uff3b\072\065\073\102\074\104\075\uff3b" +
    "\076\u0115\100\074\101\110\102\070\110\100\111\105\112" +
    "\111\131\uff3b\001\002\000\050\003\u011d\005\076\007\u0142" +
    "\042\106\062\072\066\061\070\uff3b\072\065\073\102\074" +
    "\104\075\uff3b\076\u0115\100\074\101\110\102\070\110\100" +
    "\111\105\112\111\131\uff3b\001\002\000\046\003\u011d\005" +
    "\076\042\106\062\072\066\061\070\uff3b\072\065\073\102" +
    "\074\104\075\uff3b\076\u0115\100\074\101\110\102\070\110" +
    "\100\111\105\112\111\131\uff3b\001\002\000\064\003\u013d" +
    "\005\121\016\134\017\117\020\132\021\136\022\153\023" +
    "\156\024\143\025\123\026\124\027\130\030\125\031\116" +
    "\032\122\044\114\045\135\046\141\047\137\050\157\051" +
    "\126\064\147\100\074\110\100\111\105\001\002\000\046" +
    "\003\u011d\005\076\042\106\062\072\066\061\070\uff3b\072" +
    "\065\073\102\074\104\075\uff3b\076\u0115\100\074\101\110" +
    "\102\070\110\100\111\105\112\111\131\uff3b\001\002\000" +
    "\034\003\330\011\031\012\034\013\030\014\026\015\035" +
    "\043\u0122\052\u0121\053\u011e\054\u011f\056\205\075\u0135\131" +
    "\ufeb9\001\002\000\046\003\u011d\005\076\042\106\062\072" +
    "\066\061\070\uff3b\072\065\073\102\074\104\075\uff3b\076" +
    "\u0115\100\074\101\110\102\070\110\100\111\105\112\111" +
    "\131\uff3b\001\002\000\046\003\u011d\005\076\042\106\062" +
    "\072\066\061\070\uff3b\072\065\073\102\074\104\075\uff3b" +
    "\076\u0115\100\074\101\110\102\070\110\100\111\105\112" +
    "\111\131\uff3b\001\002\000\046\003\u011d\005\076\042\106" +
    "\062\072\066\061\070\uff3b\072\065\073\102\074\104\075" +
    "\uff3b\076\u0115\100\074\101\110\102\070\110\100\111\105" +
    "\112\111\131\uff3b\001\002\000\046\003\u011d\005\076\042" +
    "\106\062\072\066\061\070\uff3b\072\065\073\102\074\104" +
    "\075\uff3b\076\u0115\100\074\101\110\102\070\110\100\111" +
    "\105\112\111\131\uff3b\001\002\000\010\070\uff3e\075\uff3e" +
    "\131\uff3e\001\002\000\030\003\330\011\031\012\034\013" +
    "\030\014\026\015\035\043\u0122\052\u0121\053\u011e\054\u011f" +
    "\056\205\001\002\000\046\003\uff8d\005\uff8d\042\uff8d\062" +
    "\uff8d\066\uff8d\070\uff8d\072\uff8d\073\uff8d\074\uff8d\075\uff8d" +
    "\076\uff8d\100\uff8d\101\uff8d\102\uff8d\110\uff8d\111\uff8d\112" +
    "\uff8d\131\uff8d\001\002\000\046\003\uff8c\005\uff8c\042\uff8c" +
    "\062\uff8c\066\uff8c\070\uff8c\072\uff8c\073\uff8c\074\uff8c\075" +
    "\uff8c\076\uff8c\100\uff8c\101\uff8c\102\uff8c\110\uff8c\111\uff8c" +
    "\112\uff8c\131\uff8c\001\002\000\006\043\u0130\056\213\001" +
    "\002\000\064\003\245\005\121\016\134\017\117\020\132" +
    "\021\136\022\153\023\156\024\143\025\123\026\124\027" +
    "\130\030\125\031\116\032\122\044\114\045\135\046\141" +
    "\047\137\050\157\051\126\064\147\100\074\110\100\111" +
    "\105\001\002\000\064\003\245\005\121\016\134\017\117" +
    "\020\132\021\136\022\153\023\156\024\143\025\123\026" +
    "\124\027\130\030\125\031\116\032\122\044\114\045\135" +
    "\046\141\047\137\050\157\051\126\064\147\100\074\110" +
    "\100\111\105\001\002\000\006\005\u0124\055\u0125\001\002" +
    "\000\052\003\uffdd\005\uffdd\007\uffdd\042\uffdd\043\u012c\062" +
    "\uffdd\066\uffdd\070\uffdd\072\uffdd\073\uffdd\074\uffdd\075\uffdd" +
    "\076\uffdd\100\uffdd\101\uffdd\102\uffdd\110\uffdd\111\uffdd\112" +
    "\uffdd\131\uffdd\001\002\000\004\005\u0126\001\002\000\052" +
    "\003\uff7b\005\uff7b\007\uff7b\042\uff7b\056\205\062\uff7b\066" +
    "\uff7b\070\uff7b\072\uff7b\073\uff7b\074\uff7b\075\uff7b\076\uff7b" +
    "\100\uff7b\101\uff7b\102\uff7b\110\uff7b\111\uff7b\112\uff7b\131" +
    "\uff7b\001\002\000\054\003\uff7a\005\uff7a\007\uff7a\042\uff7a" +
    "\043\u0128\056\213\062\uff7a\066\uff7a\070\uff7a\072\uff7a\073" +
    "\uff7a\074\uff7a\075\uff7a\076\uff7a\100\uff7a\101\uff7a\102\uff7a" +
    "\110\uff7a\111\uff7a\112\uff7a\131\uff7a\001\002\000\004\060" +
    "\u0129\001\002\000\066\003\343\005\121\016\134\017\117" +
    "\020\132\021\136\022\153\023\156\024\143\025\123\026" +
    "\124\027\130\030\125\031\116\032\122\044\114\045\135" +
    "\046\141\047\137\050\157\051\126\060\342\064\147\100" +
    "\074\110\100\111\105\001\002\000\004\061\u012b\001\002" +
    "\000\050\003\uff7c\005\uff7c\007\uff7c\042\uff7c\062\uff7c\066" +
    "\uff7c\070\uff7c\072\uff7c\073\uff7c\074\uff7c\075\uff7c\076\uff7c" +
    "\100\uff7c\101\uff7c\102\uff7c\110\uff7c\111\uff7c\112\uff7c\131" +
    "\uff7c\001\002\000\064\003\245\005\121\016\134\017\117" +
    "\020\132\021\136\022\153\023\156\024\143\025\123\026" +
    "\124\027\130\030\125\031\116\032\122\044\114\045\135" +
    "\046\141\047\137\050\157\051\126\064\147\100\074\110" +
    "\100\111\105\001\002\000\062\003\uffde\005\uffde\007\uffde" +
    "\025\241\026\240\027\244\030\242\031\243\042\uffde\062" +
    "\uffde\066\uffde\070\uffde\072\uffde\073\uffde\074\uffde\075\uffde" +
    "\076\uffde\100\uffde\101\uffde\102\uffde\110\uffde\111\uffde\112" +
    "\uffde\131\uffde\001\002\000\060\003\uff8f\005\uff8f\025\241" +
    "\026\240\027\244\030\242\031\243\042\uff8f\062\uff8f\066" +
    "\uff8f\070\uff8f\072\uff8f\073\uff8f\074\uff8f\075\uff8f\076\uff8f" +
    "\100\uff8f\101\uff8f\102\uff8f\110\uff8f\111\uff8f\112\uff8f\131" +
    "\uff8f\001\002\000\060\003\uff8e\005\uff8e\025\241\026\240" +
    "\027\244\030\242\031\243\042\uff8e\062\uff8e\066\uff8e\070" +
    "\uff8e\072\uff8e\073\uff8e\074\uff8e\075\uff8e\076\uff8e\100\uff8e" +
    "\101\uff8e\102\uff8e\110\uff8e\111\uff8e\112\uff8e\131\uff8e\001" +
    "\002\000\064\003\245\005\121\016\134\017\117\020\132" +
    "\021\136\022\153\023\156\024\143\025\123\026\124\027" +
    "\130\030\125\031\116\032\122\044\114\045\135\046\141" +
    "\047\137\050\157\051\126\064\147\100\074\110\100\111" +
    "\105\001\002\000\046\003\uff64\005\uff64\042\uff64\062\uff64" +
    "\066\uff64\070\uff64\072\uff64\073\uff64\074\uff64\075\uff64\076" +
    "\uff64\100\uff64\101\uff64\102\uff64\110\uff64\111\uff64\112\uff64" +
    "\131\uff64\001\002\000\010\070\uff42\075\uff42\131\uff42\001" +
    "\002\000\010\070\uff46\075\uff46\131\uff46\001\002\000\010" +
    "\070\uff47\075\uff47\131\uff47\001\002\000\004\131\ufeba\001" +
    "\002\000\004\131\326\001\002\000\004\073\u0138\001\002" +
    "\000\004\064\u0139\001\002\000\064\003\245\005\121\016" +
    "\134\017\117\020\132\021\136\022\153\023\156\024\143" +
    "\025\123\026\124\027\130\030\125\031\116\032\122\044" +
    "\114\045\135\046\141\047\137\050\157\051\126\064\147" +
    "\100\074\110\100\111\105\001\002\000\016\025\241\026" +
    "\240\027\244\030\242\031\243\065\u013b\001\002\000\046" +
    "\003\ufebf\005\ufebf\042\ufebf\062\ufebf\066\ufebf\070\ufebf\072" +
    "\ufebf\073\ufebf\074\ufebf\075\ufebf\076\ufebf\100\ufebf\101\ufebf" +
    "\102\ufebf\110\ufebf\111\ufebf\112\ufebf\131\ufebf\001\002\000" +
    "\010\070\uff44\075\uff44\131\uff44\001\002\000\070\003\175" +
    "\005\121\016\134\017\117\020\132\021\136\022\153\023" +
    "\156\025\123\026\124\027\130\030\125\031\116\044\114" +
    "\045\135\046\141\047\137\050\157\051\126\056\205\064" +
    "\176\070\uff3c\075\uff3c\100\074\110\100\111\105\131\uff3c" +
    "\001\002\000\060\003\u011d\005\076\025\241\026\240\027" +
    "\244\030\242\031\243\042\106\062\072\066\061\070\uff3b" +
    "\072\065\073\102\074\104\075\uff3b\076\u0115\100\074\101" +
    "\110\102\070\110\100\111\105\112\111\131\uff3b\001\002" +
    "\000\010\070\uff3d\075\uff3d\131\uff3d\001\002\000\010\070" +
    "\uff41\075\uff41\131\uff41\001\002\000\010\070\uff4d\075\uff4d" +
    "\131\uff4d\001\002\000\006\003\u0143\005\u0144\001\002\000" +
    "\064\003\245\005\121\016\134\017\117\020\132\021\136" +
    "\022\153\023\156\024\143\025\123\026\124\027\130\030" +
    "\125\031\116\032\122\044\114\045\135\046\141\047\137" +
    "\050\157\051\126\064\147\100\074\110\100\111\105\001" +
    "\002\000\052\003\uffe3\005\uffe3\007\uffe3\042\uffe3\043\u0145" +
    "\062\uffe3\066\uffe3\070\uffe3\072\uffe3\073\uffe3\074\uffe3\075" +
    "\uffe3\076\uffe3\100\uffe3\101\uffe3\102\uffe3\110\uffe3\111\uffe3" +
    "\112\uffe3\131\uffe3\001\002\000\064\003\245\005\121\016" +
    "\134\017\117\020\132\021\136\022\153\023\156\024\143" +
    "\025\123\026\124\027\130\030\125\031\116\032\122\044" +
    "\114\045\135\046\141\047\137\050\157\051\126\064\147" +
    "\100\074\110\100\111\105\001\002\000\062\003\uffe2\005" +
    "\uffe2\007\uffe2\025\241\026\240\027\244\030\242\031\243" +
    "\042\uffe2\062\uffe2\066\uffe2\070\uffe2\072\uffe2\073\uffe2\074" +
    "\uffe2\075\uffe2\076\uffe2\100\uffe2\101\uffe2\102\uffe2\110\uffe2" +
    "\111\uffe2\112\uffe2\131\uffe2\001\002\000\062\003\uffdf\005" +
    "\uffdf\007\uffdf\025\241\026\240\027\244\030\242\031\243" +
    "\042\uffdf\062\uffdf\066\uffdf\070\uffdf\072\uffdf\073\uffdf\074" +
    "\uffdf\075\uffdf\076\uffdf\100\uffdf\101\uffdf\102\uffdf\110\uffdf" +
    "\111\uffdf\112\uffdf\131\uffdf\001\002\000\010\070\uff49\075" +
    "\uff49\131\uff49\001\002\000\010\070\uff4c\075\uff4c\131\uff4c" +
    "\001\002\000\010\070\uff4a\075\uff4a\131\uff4a\001\002\000" +
    "\010\070\uff43\075\uff43\131\uff43\001\002\000\010\070\uff4b" +
    "\075\uff4b\131\uff4b\001\002\000\004\005\u014e\001\002\000" +
    "\052\003\uff81\005\uff81\007\uff81\042\uff81\056\205\062\uff81" +
    "\066\uff81\070\uff81\072\uff81\073\uff81\074\uff81\075\uff81\076" +
    "\uff81\100\uff81\101\uff81\102\uff81\110\uff81\111\uff81\112\uff81" +
    "\131\uff81\001\002\000\054\003\uff82\005\uff82\007\uff82\042" +
    "\uff82\043\u0150\056\213\062\uff82\066\uff82\070\uff82\072\uff82" +
    "\073\uff82\074\uff82\075\uff82\076\uff82\100\uff82\101\uff82\102" +
    "\uff82\110\uff82\111\uff82\112\uff82\131\uff82\001\002\000\004" +
    "\060\u0151\001\002\000\066\003\343\005\121\016\134\017" +
    "\117\020\132\021\136\022\153\023\156\024\143\025\123" +
    "\026\124\027\130\030\125\031\116\032\122\044\114\045" +
    "\135\046\141\047\137\050\157\051\126\060\342\064\147" +
    "\100\074\110\100\111\105\001\002\000\004\061\u0153\001" +
    "\002\000\050\003\uff80\005\uff80\007\uff80\042\uff80\062\uff80" +
    "\066\uff80\070\uff80\072\uff80\073\uff80\074\uff80\075\uff80\076" +
    "\uff80\100\uff80\101\uff80\102\uff80\110\uff80\111\uff80\112\uff80" +
    "\131\uff80\001\002\000\010\070\uff3f\075\uff3f\131\uff3f\001" +
    "\002\000\010\070\uff45\075\uff45\131\uff45\001\002\000\004" +
    "\131\326\001\002\000\006\003\u0158\073\u0159\001\002\000" +
    "\004\064\u015f\001\002\000\004\064\u015a\001\002\000\064" +
    "\003\u015b\005\121\016\134\017\117\020\132\021\136\022" +
    "\153\023\156\024\143\025\123\026\124\027\130\030\125" +
    "\031\116\032\122\044\114\045\135\046\141\047\137\050" +
    "\157\051\126\064\147\100\074\110\100\111\105\001\002" +
    "\000\064\003\175\005\121\016\134\017\117\020\132\021" +
    "\136\022\153\023\156\025\123\026\124\027\130\030\125" +
    "\031\116\044\114\045\135\046\141\047\137\050\157\051" +
    "\126\056\205\064\176\065\u015e\100\074\110\100\111\105" +
    "\001\002\000\016\025\241\026\240\027\244\030\242\031" +
    "\243\065\u015d\001\002\000\046\003\ufec0\005\ufec0\042\ufec0" +
    "\062\ufec0\066\ufec0\070\ufec0\072\ufec0\073\ufec0\074\ufec0\075" +
    "\ufec0\076\ufec0\100\ufec0\101\ufec0\102\ufec0\110\ufec0\111\ufec0" +
    "\112\ufec0\131\ufec0\001\002\000\046\003\ufebc\005\ufebc\042" +
    "\ufebc\062\ufebc\066\ufebc\070\ufebc\072\ufebc\073\ufebc\074\ufebc" +
    "\075\ufebc\076\ufebc\100\ufebc\101\ufebc\102\ufebc\110\ufebc\111" +
    "\ufebc\112\ufebc\131\ufebc\001\002\000\064\003\245\005\121" +
    "\016\134\017\117\020\132\021\136\022\153\023\156\024" +
    "\143\025\123\026\124\027\130\030\125\031\116\032\122" +
    "\044\114\045\135\046\141\047\137\050\157\051\126\064" +
    "\147\100\074\110\100\111\105\001\002\000\016\025\241" +
    "\026\240\027\244\030\242\031\243\065\u0161\001\002\000" +
    "\046\003\ufebd\005\ufebd\042\ufebd\062\ufebd\066\ufebd\070\ufebd" +
    "\072\ufebd\073\ufebd\074\ufebd\075\ufebd\076\ufebd\100\ufebd\101" +
    "\ufebd\102\ufebd\110\ufebd\111\ufebd\112\ufebd\131\ufebd\001\002" +
    "\000\010\070\uff40\075\uff40\131\uff40\001\002\000\010\070" +
    "\uff48\075\uff48\131\uff48\001\002\000\046\003\ufebb\005\ufebb" +
    "\042\ufebb\062\ufebb\066\ufebb\070\ufebb\072\ufebb\073\ufebb\074" +
    "\ufebb\075\ufebb\076\ufebb\100\ufebb\101\ufebb\102\ufebb\110\ufebb" +
    "\111\ufebb\112\ufebb\131\ufebb\001\002\000\004\073\u0166\001" +
    "\002\000\004\064\u0167\001\002\000\064\003\245\005\121" +
    "\016\134\017\117\020\132\021\136\022\153\023\156\024" +
    "\143\025\123\026\124\027\130\030\125\031\116\032\122" +
    "\044\114\045\135\046\141\047\137\050\157\051\126\064" +
    "\147\100\074\110\100\111\105\001\002\000\016\025\241" +
    "\026\240\027\244\030\242\031\243\065\u0169\001\002\000" +
    "\046\003\ufebe\005\ufebe\042\ufebe\062\ufebe\066\ufebe\070\ufebe" +
    "\072\ufebe\073\ufebe\074\ufebe\075\ufebe\076\ufebe\100\ufebe\101" +
    "\ufebe\102\ufebe\110\ufebe\111\ufebe\112\ufebe\131\ufebe\001\002" +
    "\000\004\131\uff2f\001\002\000\006\065\u0179\131\326\001" +
    "\002\000\064\003\u016d\005\121\016\134\017\117\020\132" +
    "\021\136\022\153\023\156\024\143\025\123\026\124\027" +
    "\130\030\125\031\116\032\122\044\114\045\135\046\141" +
    "\047\137\050\157\051\126\064\147\100\074\110\100\111" +
    "\105\001\002\000\064\003\175\005\121\016\134\017\117" +
    "\020\132\021\136\022\153\023\156\025\123\026\124\027" +
    "\130\030\125\031\116\044\114\045\135\046\141\047\137" +
    "\050\157\051\126\056\205\064\176\065\u0175\100\074\110" +
    "\100\111\105\001\002\000\016\025\241\026\240\027\244" +
    "\030\242\031\243\065\u016f\001\002\000\004\130\025\001" +
    "\002\000\042\003\u0172\005\076\042\106\062\072\066\061" +
    "\072\065\073\102\074\104\076\u0115\100\074\101\110\102" +
    "\070\110\100\111\105\112\111\131\uff3b\001\002\000\004" +
    "\131\326\001\002\000\032\003\330\011\031\012\034\013" +
    "\030\014\026\015\035\043\u0122\052\u0121\053\u011e\054\u011f" +
    "\056\205\131\326\001\002\000\046\003\ufec3\005\ufec3\042" +
    "\ufec3\062\ufec3\066\ufec3\070\ufec3\072\ufec3\073\ufec3\074\ufec3" +
    "\075\ufec3\076\ufec3\100\ufec3\101\ufec3\102\ufec3\110\ufec3\111" +
    "\ufec3\112\ufec3\131\ufec3\001\002\000\046\003\ufec5\005\ufec5" +
    "\042\ufec5\062\ufec5\066\ufec5\070\ufec5\072\ufec5\073\ufec5\074" +
    "\ufec5\075\ufec5\076\ufec5\100\ufec5\101\ufec5\102\ufec5\110\ufec5" +
    "\111\ufec5\112\ufec5\131\ufec5\001\002\000\004\130\025\001" +
    "\002\000\042\003\u011d\005\076\042\106\062\072\066\061" +
    "\072\065\073\102\074\104\076\u0115\100\074\101\110\102" +
    "\070\110\100\111\105\112\111\131\uff3b\001\002\000\004" +
    "\131\326\001\002\000\046\003\ufec4\005\ufec4\042\ufec4\062" +
    "\ufec4\066\ufec4\070\ufec4\072\ufec4\073\ufec4\074\ufec4\075\ufec4" +
    "\076\ufec4\100\ufec4\101\ufec4\102\ufec4\110\ufec4\111\ufec4\112" +
    "\ufec4\131\ufec4\001\002\000\004\130\025\001\002\000\046" +
    "\003\ufec1\005\ufec1\042\ufec1\062\ufec1\066\ufec1\070\ufec1\072" +
    "\ufec1\073\ufec1\074\ufec1\075\ufec1\076\ufec1\100\ufec1\101\ufec1" +
    "\102\ufec1\110\ufec1\111\ufec1\112\ufec1\131\ufec1\001\002\000" +
    "\042\003\u011d\005\076\042\106\062\072\066\061\072\065" +
    "\073\102\074\104\076\u0115\100\074\101\110\102\070\110" +
    "\100\111\105\112\111\131\uff3b\001\002\000\004\131\326" +
    "\001\002\000\046\003\ufec2\005\ufec2\042\ufec2\062\ufec2\066" +
    "\ufec2\070\ufec2\072\ufec2\073\ufec2\074\ufec2\075\ufec2\076\ufec2" +
    "\100\ufec2\101\ufec2\102\ufec2\110\ufec2\111\ufec2\112\ufec2\131" +
    "\ufec2\001\002\000\004\131\uff2b\001\002\000\004\065\u0185" +
    "\001\002\000\006\003\u0181\005\u0182\001\002\000\004\065" +
    "\u0184\001\002\000\004\065\u0183\001\002\000\146\002\uff1b" +
    "\003\uff1b\004\uff1b\005\uff1b\007\uff1b\010\uff1b\011\uff1b\012" +
    "\uff1b\013\uff1b\014\uff1b\015\uff1b\016\uff1b\017\uff1b\020\uff1b" +
    "\021\uff1b\022\uff1b\023\uff1b\025\uff1b\026\uff1b\027\uff1b\030" +
    "\uff1b\031\uff1b\033\uff1b\034\uff1b\035\uff1b\036\uff1b\037\uff1b" +
    "\040\uff1b\041\uff1b\042\uff1b\057\uff1b\061\uff1b\062\uff1b\065" +
    "\uff1b\066\uff1b\070\uff1b\072\uff1b\073\uff1b\074\uff1b\075\uff1b" +
    "\076\uff1b\100\uff1b\101\uff1b\102\uff1b\110\uff1b\111\uff1b\112" +
    "\uff1b\113\uff1b\130\uff1b\131\uff1b\001\002\000\146\002\uff1a" +
    "\003\uff1a\004\uff1a\005\uff1a\007\uff1a\010\uff1a\011\uff1a\012" +
    "\uff1a\013\uff1a\014\uff1a\015\uff1a\016\uff1a\017\uff1a\020\uff1a" +
    "\021\uff1a\022\uff1a\023\uff1a\025\uff1a\026\uff1a\027\uff1a\030" +
    "\uff1a\031\uff1a\033\uff1a\034\uff1a\035\uff1a\036\uff1a\037\uff1a" +
    "\040\uff1a\041\uff1a\042\uff1a\057\uff1a\061\uff1a\062\uff1a\065" +
    "\uff1a\066\uff1a\070\uff1a\072\uff1a\073\uff1a\074\uff1a\075\uff1a" +
    "\076\uff1a\100\uff1a\101\uff1a\102\uff1a\110\uff1a\111\uff1a\112" +
    "\uff1a\113\uff1a\130\uff1a\131\uff1a\001\002\000\146\002\uff19" +
    "\003\uff19\004\uff19\005\uff19\007\uff19\010\uff19\011\uff19\012" +
    "\uff19\013\uff19\014\uff19\015\uff19\016\uff19\017\uff19\020\uff19" +
    "\021\uff19\022\uff19\023\uff19\025\uff19\026\uff19\027\uff19\030" +
    "\uff19\031\uff19\033\uff19\034\uff19\035\uff19\036\uff19\037\uff19" +
    "\040\uff19\041\uff19\042\uff19\057\uff19\061\uff19\062\uff19\065" +
    "\uff19\066\uff19\070\uff19\072\uff19\073\uff19\074\uff19\075\uff19" +
    "\076\uff19\100\uff19\101\uff19\102\uff19\110\uff19\111\uff19\112" +
    "\uff19\113\uff19\130\uff19\131\uff19\001\002\000\004\131\uff33" +
    "\001\002\000\064\003\245\005\121\016\134\017\117\020" +
    "\132\021\136\022\153\023\156\024\143\025\123\026\124" +
    "\027\130\030\125\031\116\032\122\044\114\045\135\046" +
    "\141\047\137\050\157\051\126\064\147\100\074\110\100" +
    "\111\105\001\002\000\066\003\uff91\005\uff91\016\uff91\017" +
    "\uff91\020\uff91\021\uff91\022\uff91\023\uff91\024\uff91\025\uff91" +
    "\026\uff91\027\uff91\030\uff91\031\uff91\032\uff91\043\u0193\044" +
    "\uff91\045\uff91\046\uff91\047\uff91\050\uff91\051\uff91\064\uff91" +
    "\100\uff91\110\uff91\111\uff91\001\002\000\046\003\uff92\005" +
    "\uff92\042\uff92\062\uff92\066\uff92\070\uff92\072\uff92\073\uff92" +
    "\074\uff92\075\uff92\076\uff92\100\uff92\101\uff92\102\uff92\110" +
    "\uff92\111\uff92\112\uff92\131\uff92\001\002\000\064\003\245" +
    "\005\121\016\134\017\117\020\132\021\136\022\153\023" +
    "\156\024\143\025\123\026\124\027\130\030\125\031\116" +
    "\032\122\044\114\045\135\046\141\047\137\050\157\051" +
    "\126\064\147\100\074\110\100\111\105\001\002\000\010" +
    "\003\u018d\043\u018e\056\213\001\002\000\046\003\uff93\005" +
    "\uff93\042\uff93\062\uff93\066\uff93\070\uff93\072\uff93\073\uff93" +
    "\074\uff93\075\uff93\076\uff93\100\uff93\101\uff93\102\uff93\110" +
    "\uff93\111\uff93\112\uff93\131\uff93\001\002\000\064\003\245" +
    "\005\121\016\134\017\117\020\132\021\136\022\153\023" +
    "\156\024\143\025\123\026\124\027\130\030\125\031\116" +
    "\032\122\044\114\045\135\046\141\047\137\050\157\051" +
    "\126\064\147\100\074\110\100\111\105\001\002\000\064" +
    "\003\245\005\121\016\134\017\117\020\132\021\136\022" +
    "\153\023\156\024\143\025\123\026\124\027\130\030\125" +
    "\031\116\032\122\044\114\045\135\046\141\047\137\050" +
    "\157\051\126\064\147\100\074\110\100\111\105\001\002" +
    "\000\046\003\uff67\005\uff67\042\uff67\062\uff67\066\uff67\070" +
    "\uff67\072\uff67\073\uff67\074\uff67\075\uff67\076\uff67\100\uff67" +
    "\101\uff67\102\uff67\110\uff67\111\uff67\112\uff67\131\uff67\001" +
    "\002\000\046\003\uff66\005\uff66\042\uff66\062\uff66\066\uff66" +
    "\070\uff66\072\uff66\073\uff66\074\uff66\075\uff66\076\uff66\100" +
    "\uff66\101\uff66\102\uff66\110\uff66\111\uff66\112\uff66\131\uff66" +
    "\001\002\000\060\003\uff95\005\uff95\025\241\026\240\027" +
    "\244\030\242\031\243\042\uff95\062\uff95\066\uff95\070\uff95" +
    "\072\uff95\073\uff95\074\uff95\075\uff95\076\uff95\100\uff95\101" +
    "\uff95\102\uff95\110\uff95\111\uff95\112\uff95\131\uff95\001\002" +
    "\000\064\003\245\005\121\016\134\017\117\020\132\021" +
    "\136\022\153\023\156\024\143\025\123\026\124\027\130" +
    "\030\125\031\116\032\122\044\114\045\135\046\141\047" +
    "\137\050\157\051\126\064\147\100\074\110\100\111\105" +
    "\001\002\000\064\003\245\005\121\016\134\017\117\020" +
    "\132\021\136\022\153\023\156\024\143\025\123\026\124" +
    "\027\130\030\125\031\116\032\122\044\114\045\135\046" +
    "\141\047\137\050\157\051\126\064\147\100\074\110\100" +
    "\111\105\001\002\000\046\003\uff65\005\uff65\042\uff65\062" +
    "\uff65\066\uff65\070\uff65\072\uff65\073\uff65\074\uff65\075\uff65" +
    "\076\uff65\100\uff65\101\uff65\102\uff65\110\uff65\111\uff65\112" +
    "\uff65\131\uff65\001\002\000\060\003\uff90\005\uff90\025\241" +
    "\026\240\027\244\030\242\031\243\042\uff90\062\uff90\066" +
    "\uff90\070\uff90\072\uff90\073\uff90\074\uff90\075\uff90\076\uff90" +
    "\100\uff90\101\uff90\102\uff90\110\uff90\111\uff90\112\uff90\131" +
    "\uff90\001\002\000\060\003\uff94\005\uff94\025\241\026\240" +
    "\027\244\030\242\031\243\042\uff94\062\uff94\066\uff94\070" +
    "\uff94\072\uff94\073\uff94\074\uff94\075\uff94\076\uff94\100\uff94" +
    "\101\uff94\102\uff94\110\uff94\111\uff94\112\uff94\131\uff94\001" +
    "\002\000\004\131\uff34\001\002\000\004\065\u01bf\001\002" +
    "\000\034\003\u01a0\062\u01a7\114\u01a4\115\u019e\116\u019b\117" +
    "\u01a3\120\u019d\121\u01a1\122\u01a2\123\u01a5\124\u019c\125\u019a" +
    "\126\u019f\001\002\000\006\003\uff03\007\uff03\001\002\000" +
    "\006\003\uff0b\007\uff0b\001\002\000\006\003\uff04\007\uff04" +
    "\001\002\000\006\003\uff09\007\uff09\001\002\000\006\003" +
    "\uff0c\007\uff0c\001\002\000\006\003\uff02\007\uff02\001\002" +
    "\000\010\003\uff01\007\uff01\065\u01be\001\002\000\006\003" +
    "\uff08\007\uff08\001\002\000\006\003\uff06\007\uff06\001\002" +
    "\000\006\003\uff0a\007\uff0a\001\002\000\006\003\uff0d\007" +
    "\uff0d\001\002\000\006\003\uff05\007\uff05\001\002\000\006" +
    "\003\u01a9\007\u01a8\001\002\000\006\003\uff07\007\uff07\001" +
    "\002\000\032\003\175\005\121\044\114\045\135\046\141" +
    "\047\137\050\157\051\126\064\176\100\074\110\100\111" +
    "\105\001\002\000\032\003\175\005\121\044\114\045\135" +
    "\046\141\047\137\050\157\051\126\064\176\100\074\110" +
    "\100\111\105\001\002\000\020\007\u01ab\033\166\034\161" +
    "\035\165\036\172\037\171\040\162\001\002\000\032\003" +
    "\175\005\121\044\114\045\135\046\141\047\137\050\157" +
    "\051\126\064\176\100\074\110\100\111\105\001\002\000" +
    "\020\007\u01ad\033\166\034\161\035\165\036\172\037\171" +
    "\040\162\001\002\000\032\003\175\005\121\044\114\045" +
    "\135\046\141\047\137\050\157\051\126\064\176\100\074" +
    "\110\100\111\105\001\002\000\020\033\166\034\161\035" +
    "\165\036\172\037\171\040\162\065\u01af\001\002\000\146" +
    "\002\uff27\003\uff27\004\uff27\005\uff27\007\uff27\010\uff27\011" +
    "\uff27\012\uff27\013\uff27\014\uff27\015\uff27\016\uff27\017\uff27" +
    "\020\uff27\021\uff27\022\uff27\023\uff27\025\uff27\026\uff27\027" +
    "\uff27\030\uff27\031\uff27\033\uff27\034\uff27\035\uff27\036\uff27" +
    "\037\uff27\040\uff27\041\uff27\042\uff27\057\uff27\061\uff27\062" +
    "\uff27\065\uff27\066\uff27\070\uff27\072\uff27\073\uff27\074\uff27" +
    "\075\uff27\076\uff27\100\uff27\101\uff27\102\uff27\110\uff27\111" +
    "\uff27\112\uff27\113\uff27\130\uff27\131\uff27\001\002\000\022" +
    "\003\u01b2\007\u01b1\033\166\034\161\035\165\036\172\037" +
    "\171\040\162\001\002\000\032\003\175\005\121\044\114" +
    "\045\135\046\141\047\137\050\157\051\126\064\176\100" +
    "\074\110\100\111\105\001\002\000\032\003\175\005\121" +
    "\044\114\045\135\046\141\047\137\050\157\051\126\064" +
    "\176\100\074\110\100\111\105\001\002\000\020\007\u01b4" +
    "\033\166\034\161\035\165\036\172\037\171\040\162\001" +
    "\002\000\032\003\175\005\121\044\114\045\135\046\141" +
    "\047\137\050\157\051\126\064\176\100\074\110\100\111" +
    "\105\001\002\000\020\033\166\034\161\035\165\036\172" +
    "\037\171\040\162\065\u01b6\001\002\000\146\002\uff26\003" +
    "\uff26\004\uff26\005\uff26\007\uff26\010\uff26\011\uff26\012\uff26" +
    "\013\uff26\014\uff26\015\uff26\016\uff26\017\uff26\020\uff26\021" +
    "\uff26\022\uff26\023\uff26\025\uff26\026\uff26\027\uff26\030\uff26" +
    "\031\uff26\033\uff26\034\uff26\035\uff26\036\uff26\037\uff26\040" +
    "\uff26\041\uff26\042\uff26\057\uff26\061\uff26\062\uff26\065\uff26" +
    "\066\uff26\070\uff26\072\uff26\073\uff26\074\uff26\075\uff26\076" +
    "\uff26\100\uff26\101\uff26\102\uff26\110\uff26\111\uff26\112\uff26" +
    "\113\uff26\130\uff26\131\uff26\001\002\000\022\003\u01b9\007" +
    "\u01b8\033\166\034\161\035\165\036\172\037\171\040\162" +
    "\001\002\000\032\003\175\005\121\044\114\045\135\046" +
    "\141\047\137\050\157\051\126\064\176\100\074\110\100" +
    "\111\105\001\002\000\032\003\175\005\121\044\114\045" +
    "\135\046\141\047\137\050\157\051\126\064\176\100\074" +
    "\110\100\111\105\001\002\000\020\033\166\034\161\035" +
    "\165\036\172\037\171\040\162\065\u01bb\001\002\000\146" +
    "\002\uff25\003\uff25\004\uff25\005\uff25\007\uff25\010\uff25\011" +
    "\uff25\012\uff25\013\uff25\014\uff25\015\uff25\016\uff25\017\uff25" +
    "\020\uff25\021\uff25\022\uff25\023\uff25\025\uff25\026\uff25\027" +
    "\uff25\030\uff25\031\uff25\033\uff25\034\uff25\035\uff25\036\uff25" +
    "\037\uff25\040\uff25\041\uff25\042\uff25\057\uff25\061\uff25\062" +
    "\uff25\065\uff25\066\uff25\070\uff25\072\uff25\073\uff25\074\uff25" +
    "\075\uff25\076\uff25\100\uff25\101\uff25\102\uff25\110\uff25\111" +
    "\uff25\112\uff25\113\uff25\130\uff25\131\uff25\001\002\000\020" +
    "\033\166\034\161\035\165\036\172\037\171\040\162\065" +
    "\u01bd\001\002\000\146\002\uff29\003\uff29\004\uff29\005\uff29" +
    "\007\uff29\010\uff29\011\uff29\012\uff29\013\uff29\014\uff29\015" +
    "\uff29\016\uff29\017\uff29\020\uff29\021\uff29\022\uff29\023\uff29" +
    "\025\uff29\026\uff29\027\uff29\030\uff29\031\uff29\033\uff29\034" +
    "\uff29\035\uff29\036\uff29\037\uff29\040\uff29\041\uff29\042\uff29" +
    "\057\uff29\061\uff29\062\uff29\065\uff29\066\uff29\070\uff29\072" +
    "\uff29\073\uff29\074\uff29\075\uff29\076\uff29\100\uff29\101\uff29" +
    "\102\uff29\110\uff29\111\uff29\112\uff29\113\uff29\130\uff29\131" +
    "\uff29\001\002\000\146\002\uff28\003\uff28\004\uff28\005\uff28" +
    "\007\uff28\010\uff28\011\uff28\012\uff28\013\uff28\014\uff28\015" +
    "\uff28\016\uff28\017\uff28\020\uff28\021\uff28\022\uff28\023\uff28" +
    "\025\uff28\026\uff28\027\uff28\030\uff28\031\uff28\033\uff28\034" +
    "\uff28\035\uff28\036\uff28\037\uff28\040\uff28\041\uff28\042\uff28" +
    "\057\uff28\061\uff28\062\uff28\065\uff28\066\uff28\070\uff28\072" +
    "\uff28\073\uff28\074\uff28\075\uff28\076\uff28\100\uff28\101\uff28" +
    "\102\uff28\110\uff28\111\uff28\112\uff28\113\uff28\130\uff28\131" +
    "\uff28\001\002\000\146\002\uff24\003\uff24\004\uff24\005\uff24" +
    "\007\uff24\010\uff24\011\uff24\012\uff24\013\uff24\014\uff24\015" +
    "\uff24\016\uff24\017\uff24\020\uff24\021\uff24\022\uff24\023\uff24" +
    "\025\uff24\026\uff24\027\uff24\030\uff24\031\uff24\033\uff24\034" +
    "\uff24\035\uff24\036\uff24\037\uff24\040\uff24\041\uff24\042\uff24" +
    "\057\uff24\061\uff24\062\uff24\065\uff24\066\uff24\070\uff24\072" +
    "\uff24\073\uff24\074\uff24\075\uff24\076\uff24\100\uff24\101\uff24" +
    "\102\uff24\110\uff24\111\uff24\112\uff24\113\uff24\130\uff24\131" +
    "\uff24\001\002\000\034\002\ufef8\003\ufef8\004\ufef8\005\ufef8" +
    "\011\ufef8\012\ufef8\013\ufef8\014\ufef8\015\ufef8\041\ufef8\042" +
    "\ufef8\113\ufef8\131\ufef8\001\002\000\010\065\u01f3\130\025" +
    "\131\326\001\002\000\064\003\u01c3\005\121\016\134\017" +
    "\117\020\132\021\136\022\153\023\156\024\143\025\123" +
    "\026\124\027\130\030\125\031\116\032\122\044\114\045" +
    "\135\046\141\047\137\050\157\051\126\064\147\100\074" +
    "\110\100\111\105\001\002\000\064\003\175\005\121\016" +
    "\134\017\117\020\132\021\136\022\153\023\156\025\123" +
    "\026\124\027\130\030\125\031\116\044\114\045\135\046" +
    "\141\047\137\050\157\051\126\056\205\064\176\065\u01ee" +
    "\100\074\110\100\111\105\001\002\000\016\025\241\026" +
    "\240\027\244\030\242\031\243\065\u01c5\001\002\000\004" +
    "\130\025\001\002\000\042\003\u01c8\005\076\042\106\062" +
    "\072\066\061\072\065\073\102\074\104\076\u0115\100\074" +
    "\101\110\102\070\110\100\111\105\112\111\131\uff3b\001" +
    "\002\000\004\131\326\001\002\000\032\003\330\011\031" +
    "\012\034\013\030\014\026\015\035\043\u0122\052\u0121\053" +
    "\u011e\054\u011f\056\205\131\326\001\002\000\052\003\ufeef" +
    "\005\ufeef\042\ufeef\062\ufeef\063\u01cc\066\ufeef\070\ufeef\072" +
    "\ufeef\073\ufeef\074\ufeef\075\ufeef\076\ufeef\100\ufeef\101\ufeef" +
    "\102\ufeef\110\ufeef\111\ufeef\112\ufeef\127\u01cb\131\ufeef\001" +
    "\002\000\046\003\ufef5\005\ufef5\042\ufef5\062\ufef5\066\ufef5" +
    "\070\ufef5\072\ufef5\073\ufef5\074\ufef5\075\ufef5\076\ufef5\100" +
    "\ufef5\101\ufef5\102\ufef5\110\ufef5\111\ufef5\112\ufef5\131\ufef5" +
    "\001\002\000\006\003\u01d0\064\u01d1\001\002\000\004\130" +
    "\025\001\002\000\042\003\u011d\005\076\042\106\062\072" +
    "\066\061\072\065\073\102\074\104\076\u0115\100\074\101" +
    "\110\102\070\110\100\111\105\112\111\131\uff3b\001\002" +
    "\000\004\131\326\001\002\000\046\003\ufef0\005\ufef0\042" +
    "\ufef0\062\ufef0\066\ufef0\070\ufef0\072\ufef0\073\ufef0\074\ufef0" +
    "\075\ufef0\076\ufef0\100\ufef0\101\ufef0\102\ufef0\110\ufef0\111" +
    "\ufef0\112\ufef0\131\ufef0\001\002\000\010\065\u01e1\130\025" +
    "\131\326\001\002\000\064\003\u01d2\005\121\016\134\017" +
    "\117\020\132\021\136\022\153\023\156\024\143\025\123" +
    "\026\124\027\130\030\125\031\116\032\122\044\114\045" +
    "\135\046\141\047\137\050\157\051\126\064\147\100\074" +
    "\110\100\111\105\001\002\000\064\003\175\005\121\016" +
    "\134\017\117\020\132\021\136\022\153\023\156\025\123" +
    "\026\124\027\130\030\125\031\116\044\114\045\135\046" +
    "\141\047\137\050\157\051\126\056\205\064\176\065\u01dc" +
    "\100\074\110\100\111\105\001\002\000\016\025\241\026" +
    "\240\027\244\030\242\031\243\065\u01d4\001\002\000\004" +
    "\130\025\001\002\000\042\003\u01d7\005\076\042\106\062" +
    "\072\066\061\072\065\073\102\074\104\076\u0115\100\074" +
    "\101\110\102\070\110\100\111\105\112\111\131\uff3b\001" +
    "\002\000\004\131\326\001\002\000\032\003\330\011\031" +
    "\012\034\013\030\014\026\015\035\043\u0122\052\u0121\053" +
    "\u011e\054\u011f\056\205\131\326\001\002\000\052\003\ufeef" +
    "\005\ufeef\042\ufeef\062\ufeef\063\u01cc\066\ufeef\070\ufeef\072" +
    "\ufeef\073\ufeef\074\ufeef\075\ufeef\076\ufeef\100\ufeef\101\ufeef" +
    "\102\ufeef\110\ufeef\111\ufeef\112\ufeef\127\u01cb\131\ufeef\001" +
    "\002\000\046\003\ufeed\005\ufeed\042\ufeed\062\ufeed\066\ufeed" +
    "\070\ufeed\072\ufeed\073\ufeed\074\ufeed\075\ufeed\076\ufeed\100" +
    "\ufeed\101\ufeed\102\ufeed\110\ufeed\111\ufeed\112\ufeed\131\ufeed" +
    "\001\002\000\052\003\ufeef\005\ufeef\042\ufeef\062\ufeef\063" +
    "\u01cc\066\ufeef\070\ufeef\072\ufeef\073\ufeef\074\ufeef\075\ufeef" +
    "\076\ufeef\100\ufeef\101\ufeef\102\ufeef\110\ufeef\111\ufeef\112" +
    "\ufeef\127\u01cb\131\ufeef\001\002\000\046\003\ufef1\005\ufef1" +
    "\042\ufef1\062\ufef1\066\ufef1\070\ufef1\072\ufef1\073\ufef1\074" +
    "\ufef1\075\ufef1\076\ufef1\100\ufef1\101\ufef1\102\ufef1\110\ufef1" +
    "\111\ufef1\112\ufef1\131\ufef1\001\002\000\004\130\025\001" +
    "\002\000\042\003\u011d\005\076\042\106\062\072\066\061" +
    "\072\065\073\102\074\104\076\u0115\100\074\101\110\102" +
    "\070\110\100\111\105\112\111\131\uff3b\001\002\000\004" +
    "\131\326\001\002\000\052\003\ufeef\005\ufeef\042\ufeef\062" +
    "\ufeef\063\u01cc\066\ufeef\070\ufeef\072\ufeef\073\ufeef\074\ufeef" +
    "\075\ufeef\076\ufeef\100\ufeef\101\ufeef\102\ufeef\110\ufeef\111" +
    "\ufeef\112\ufeef\127\u01cb\131\ufeef\001\002\000\046\003\ufeee" +
    "\005\ufeee\042\ufeee\062\ufeee\066\ufeee\070\ufeee\072\ufeee\073" +
    "\ufeee\074\ufeee\075\ufeee\076\ufeee\100\ufeee\101\ufeee\102\ufeee" +
    "\110\ufeee\111\ufeee\112\ufeee\131\ufeee\001\002\000\004\130" +
    "\025\001\002\000\042\003\u011d\005\076\042\106\062\072" +
    "\066\061\072\065\073\102\074\104\076\u0115\100\074\101" +
    "\110\102\070\110\100\111\105\112\111\131\uff3b\001\002" +
    "\000\052\003\ufeef\005\ufeef\042\ufeef\062\ufeef\063\u01cc\066" +
    "\ufeef\070\ufeef\072\ufeef\073\ufeef\074\ufeef\075\ufeef\076\ufeef" +
    "\100\ufeef\101\ufeef\102\ufeef\110\ufeef\111\ufeef\112\ufeef\127" +
    "\u01cb\131\ufeef\001\002\000\046\003\ufeea\005\ufeea\042\ufeea" +
    "\062\ufeea\066\ufeea\070\ufeea\072\ufeea\073\ufeea\074\ufeea\075" +
    "\ufeea\076\ufeea\100\ufeea\101\ufeea\102\ufeea\110\ufeea\111\ufeea" +
    "\112\ufeea\131\ufeea\001\002\000\004\131\326\001\002\000" +
    "\052\003\ufeef\005\ufeef\042\ufeef\062\ufeef\063\u01cc\066\ufeef" +
    "\070\ufeef\072\ufeef\073\ufeef\074\ufeef\075\ufeef\076\ufeef\100" +
    "\ufeef\101\ufeef\102\ufeef\110\ufeef\111\ufeef\112\ufeef\127\u01cb" +
    "\131\ufeef\001\002\000\046\003\ufeec\005\ufeec\042\ufeec\062" +
    "\ufeec\066\ufeec\070\ufeec\072\ufeec\073\ufeec\074\ufeec\075\ufeec" +
    "\076\ufeec\100\ufeec\101\ufeec\102\ufeec\110\ufeec\111\ufeec\112" +
    "\ufeec\131\ufeec\001\002\000\042\003\u011d\005\076\042\106" +
    "\062\072\066\061\072\065\073\102\074\104\076\u0115\100" +
    "\074\101\110\102\070\110\100\111\105\112\111\131\uff3b" +
    "\001\002\000\004\131\326\001\002\000\052\003\ufeef\005" +
    "\ufeef\042\ufeef\062\ufeef\063\u01cc\066\ufeef\070\ufeef\072\ufeef" +
    "\073\ufeef\074\ufeef\075\ufeef\076\ufeef\100\ufeef\101\ufeef\102" +
    "\ufeef\110\ufeef\111\ufeef\112\ufeef\127\u01cb\131\ufeef\001\002" +
    "\000\046\003\ufeeb\005\ufeeb\042\ufeeb\062\ufeeb\066\ufeeb\070" +
    "\ufeeb\072\ufeeb\073\ufeeb\074\ufeeb\075\ufeeb\076\ufeeb\100\ufeeb" +
    "\101\ufeeb\102\ufeeb\110\ufeeb\111\ufeeb\112\ufeeb\131\ufeeb\001" +
    "\002\000\052\003\ufeef\005\ufeef\042\ufeef\062\ufeef\063\u01cc" +
    "\066\ufeef\070\ufeef\072\ufeef\073\ufeef\074\ufeef\075\ufeef\076" +
    "\ufeef\100\ufeef\101\ufeef\102\ufeef\110\ufeef\111\ufeef\112\ufeef" +
    "\127\u01cb\131\ufeef\001\002\000\046\003\ufef7\005\ufef7\042" +
    "\ufef7\062\ufef7\066\ufef7\070\ufef7\072\ufef7\073\ufef7\074\ufef7" +
    "\075\ufef7\076\ufef7\100\ufef7\101\ufef7\102\ufef7\110\ufef7\111" +
    "\ufef7\112\ufef7\131\ufef7\001\002\000\004\130\025\001\002" +
    "\000\042\003\u011d\005\076\042\106\062\072\066\061\072" +
    "\065\073\102\074\104\076\u0115\100\074\101\110\102\070" +
    "\110\100\111\105\112\111\131\uff3b\001\002\000\004\131" +
    "\326\001\002\000\052\003\ufeef\005\ufeef\042\ufeef\062\ufeef" +
    "\063\u01cc\066\ufeef\070\ufeef\072\ufeef\073\ufeef\074\ufeef\075" +
    "\ufeef\076\ufeef\100\ufeef\101\ufeef\102\ufeef\110\ufeef\111\ufeef" +
    "\112\ufeef\127\u01cb\131\ufeef\001\002\000\046\003\ufef6\005" +
    "\ufef6\042\ufef6\062\ufef6\066\ufef6\070\ufef6\072\ufef6\073\ufef6" +
    "\074\ufef6\075\ufef6\076\ufef6\100\ufef6\101\ufef6\102\ufef6\110" +
    "\ufef6\111\ufef6\112\ufef6\131\ufef6\001\002\000\004\130\025" +
    "\001\002\000\042\003\u011d\005\076\042\106\062\072\066" +
    "\061\072\065\073\102\074\104\076\u0115\100\074\101\110" +
    "\102\070\110\100\111\105\112\111\131\uff3b\001\002\000" +
    "\052\003\ufeef\005\ufeef\042\ufeef\062\ufeef\063\u01cc\066\ufeef" +
    "\070\ufeef\072\ufeef\073\ufeef\074\ufeef\075\ufeef\076\ufeef\100" +
    "\ufeef\101\ufeef\102\ufeef\110\ufeef\111\ufeef\112\ufeef\127\u01cb" +
    "\131\ufeef\001\002\000\046\003\ufef2\005\ufef2\042\ufef2\062" +
    "\ufef2\066\ufef2\070\ufef2\072\ufef2\073\ufef2\074\ufef2\075\ufef2" +
    "\076\ufef2\100\ufef2\101\ufef2\102\ufef2\110\ufef2\111\ufef2\112" +
    "\ufef2\131\ufef2\001\002\000\004\131\326\001\002\000\052" +
    "\003\ufeef\005\ufeef\042\ufeef\062\ufeef\063\u01cc\066\ufeef\070" +
    "\ufeef\072\ufeef\073\ufeef\074\ufeef\075\ufeef\076\ufeef\100\ufeef" +
    "\101\ufeef\102\ufeef\110\ufeef\111\ufeef\112\ufeef\127\u01cb\131" +
    "\ufeef\001\002\000\046\003\ufef4\005\ufef4\042\ufef4\062\ufef4" +
    "\066\ufef4\070\ufef4\072\ufef4\073\ufef4\074\ufef4\075\ufef4\076" +
    "\ufef4\100\ufef4\101\ufef4\102\ufef4\110\ufef4\111\ufef4\112\ufef4" +
    "\131\ufef4\001\002\000\042\003\u011d\005\076\042\106\062" +
    "\072\066\061\072\065\073\102\074\104\076\u0115\100\074" +
    "\101\110\102\070\110\100\111\105\112\111\131\uff3b\001" +
    "\002\000\004\131\326\001\002\000\052\003\ufeef\005\ufeef" +
    "\042\ufeef\062\ufeef\063\u01cc\066\ufeef\070\ufeef\072\ufeef\073" +
    "\ufeef\074\ufeef\075\ufeef\076\ufeef\100\ufeef\101\ufeef\102\ufeef" +
    "\110\ufeef\111\ufeef\112\ufeef\127\u01cb\131\ufeef\001\002\000" +
    "\046\003\ufef3\005\ufef3\042\ufef3\062\ufef3\066\ufef3\070\ufef3" +
    "\072\ufef3\073\ufef3\074\ufef3\075\ufef3\076\ufef3\100\ufef3\101" +
    "\ufef3\102\ufef3\110\ufef3\111\ufef3\112\ufef3\131\ufef3\001\002" +
    "\000\004\131\uff31\001\002\000\004\065\u0210\001\002\000" +
    "\006\003\u0201\005\u0202\001\002\000\004\065\u020f\001\002" +
    "\000\006\003\u0204\007\u0203\001\002\000\016\003\u0207\103" +
    "\u0206\104\u020a\105\u0205\106\u020b\107\u0208\001\002\000\016" +
    "\003\u0207\103\u0206\104\u020a\105\u0205\106\u020b\107\u0208\001" +
    "\002\000\004\065\ufefe\001\002\000\004\065\uff00\001\002" +
    "\000\004\065\ufefb\001\002\000\004\065\ufefc\001\002\000" +
    "\004\065\u020c\001\002\000\004\065\ufeff\001\002\000\004" +
    "\065\ufefd\001\002\000\046\003\uff1d\005\uff1d\042\uff1d\062" +
    "\uff1d\066\uff1d\070\uff1d\072\uff1d\073\uff1d\074\uff1d\075\uff1d" +
    "\076\uff1d\100\uff1d\101\uff1d\102\uff1d\110\uff1d\111\uff1d\112" +
    "\uff1d\131\uff1d\001\002\000\004\065\u020e\001\002\000\046" +
    "\003\uff1f\005\uff1f\042\uff1f\062\uff1f\066\uff1f\070\uff1f\072" +
    "\uff1f\073\uff1f\074\uff1f\075\uff1f\076\uff1f\100\uff1f\101\uff1f" +
    "\102\uff1f\110\uff1f\111\uff1f\112\uff1f\131\uff1f\001\002\000" +
    "\046\003\uff1e\005\uff1e\042\uff1e\062\uff1e\066\uff1e\070\uff1e" +
    "\072\uff1e\073\uff1e\074\uff1e\075\uff1e\076\uff1e\100\uff1e\101" +
    "\uff1e\102\uff1e\110\uff1e\111\uff1e\112\uff1e\131\uff1e\001\002" +
    "\000\046\003\uff1c\005\uff1c\042\uff1c\062\uff1c\066\uff1c\070" +
    "\uff1c\072\uff1c\073\uff1c\074\uff1c\075\uff1c\076\uff1c\100\uff1c" +
    "\101\uff1c\102\uff1c\110\uff1c\111\uff1c\112\uff1c\131\uff1c\001" +
    "\002\000\004\131\uff2e\001\002\000\004\131\uff3a\001\002" +
    "\000\010\003\u0215\005\u0216\042\u0214\001\002\000\016\003" +
    "\330\011\031\012\034\013\030\014\026\015\035\001\002" +
    "\000\070\003\245\005\u0242\016\134\017\117\020\132\021" +
    "\136\022\153\023\156\024\143\025\123\026\124\027\130" +
    "\030\125\031\116\032\122\043\u0243\044\114\045\135\046" +
    "\141\047\137\050\157\051\126\064\147\065\u0244\100\074" +
    "\110\100\111\105\001\002\000\006\003\u023d\043\u023e\001" +
    "\002\000\004\010\u0218\001\002\000\064\003\u0219\005\121" +
    "\016\134\017\117\020\132\021\136\022\153\023\156\024" +
    "\143\025\123\026\124\027\130\030\125\031\116\032\122" +
    "\044\114\045\135\046\141\047\137\050\157\051\126\064" +
    "\147\100\074\110\100\111\105\001\002\000\062\003\u0237" +
    "\005\u0236\016\134\017\117\020\132\021\136\022\153\023" +
    "\156\025\123\026\124\027\130\030\125\031\116\044\114" +
    "\045\135\046\141\047\137\050\157\051\126\056\205\064" +
    "\176\100\074\110\100\111\105\001\002\000\016\010\ufece" +
    "\025\241\026\240\027\244\030\242\031\243\001\002\000" +
    "\004\010\u021c\001\002\000\006\003\u021d\005\u021e\001\002" +
    "\000\014\043\u022e\052\u022c\053\u022f\054\u022d\065\u0230\001" +
    "\002\000\012\043\u0228\052\u0226\053\u0229\054\u0227\001\002" +
    "\000\004\065\u0220\001\002\000\004\130\025\001\002\000" +
    "\042\003\u0223\005\076\042\106\062\072\066\061\072\065" +
    "\073\102\074\104\076\u0115\100\074\101\110\102\070\110" +
    "\100\111\105\112\111\131\uff3b\001\002\000\004\131\326" +
    "\001\002\000\032\003\330\011\031\012\034\013\030\014" +
    "\026\015\035\043\u0122\052\u0121\053\u011e\054\u011f\056\205" +
    "\131\326\001\002\000\046\003\ufed8\005\ufed8\042\ufed8\062" +
    "\ufed8\066\ufed8\070\ufed8\072\ufed8\073\ufed8\074\ufed8\075\ufed8" +
    "\076\ufed8\100\ufed8\101\ufed8\102\ufed8\110\ufed8\111\ufed8\112" +
    "\ufed8\131\ufed8\001\002\000\046\003\ufedd\005\ufedd\042\ufedd" +
    "\062\ufedd\066\ufedd\070\ufedd\072\ufedd\073\ufedd\074\ufedd\075" +
    "\ufedd\076\ufedd\100\ufedd\101\ufedd\102\ufedd\110\ufedd\111\ufedd" +
    "\112\ufedd\131\ufedd\001\002\000\032\003\175\005\121\044" +
    "\114\045\135\046\141\047\137\050\157\051\126\064\176" +
    "\100\074\110\100\111\105\001\002\000\004\065\ufeca\001" +
    "\002\000\032\003\175\005\121\044\114\045\135\046\141" +
    "\047\137\050\157\051\126\064\176\100\074\110\100\111" +
    "\105\001\002\000\004\065\ufecb\001\002\000\020\033\166" +
    "\034\161\035\165\036\172\037\171\040\162\065\ufecd\001" +
    "\002\000\020\033\166\034\161\035\165\036\172\037\171" +
    "\040\162\065\ufecc\001\002\000\032\003\175\005\121\044" +
    "\114\045\135\046\141\047\137\050\157\051\126\064\176" +
    "\100\074\110\100\111\105\001\002\000\004\065\ufec6\001" +
    "\002\000\032\003\175\005\121\044\114\045\135\046\141" +
    "\047\137\050\157\051\126\064\176\100\074\110\100\111" +
    "\105\001\002\000\004\065\ufec7\001\002\000\004\130\025" +
    "\001\002\000\042\003\u011d\005\076\042\106\062\072\066" +
    "\061\072\065\073\102\074\104\076\u0115\100\074\101\110" +
    "\102\070\110\100\111\105\112\111\131\uff3b\001\002\000" +
    "\004\131\326\001\002\000\046\003\ufeda\005\ufeda\042\ufeda" +
    "\062\ufeda\066\ufeda\070\ufeda\072\ufeda\073\ufeda\074\ufeda\075" +
    "\ufeda\076\ufeda\100\ufeda\101\ufeda\102\ufeda\110\ufeda\111\ufeda" +
    "\112\ufeda\131\ufeda\001\002\000\020\033\166\034\161\035" +
    "\165\036\172\037\171\040\162\065\ufec9\001\002\000\020" +
    "\033\166\034\161\035\165\036\172\037\171\040\162\065" +
    "\ufec8\001\002\000\062\010\uffda\016\uffda\017\uffda\020\uffda" +
    "\021\uffda\022\uffda\023\uffda\025\uffda\026\uffda\027\uffda\030" +
    "\uffda\031\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda" +
    "\040\uffda\043\u0228\052\u0226\053\u0229\054\u0227\056\205\064" +
    "\274\001\002\000\044\003\175\005\121\043\u022e\044\114" +
    "\045\135\046\141\047\137\050\157\051\126\052\u022c\053" +
    "\u022f\054\u022d\056\205\064\176\100\074\110\100\111\105" +
    "\001\002\000\004\065\u0239\001\002\000\004\130\025\001" +
    "\002\000\042\003\u011d\005\076\042\106\062\072\066\061" +
    "\072\065\073\102\074\104\076\u0115\100\074\101\110\102" +
    "\070\110\100\111\105\112\111\131\uff3b\001\002\000\004" +
    "\131\326\001\002\000\046\003\ufedb\005\ufedb\042\ufedb\062" +
    "\ufedb\066\ufedb\070\ufedb\072\ufedb\073\ufedb\074\ufedb\075\ufedb" +
    "\076\ufedb\100\ufedb\101\ufedb\102\ufedb\110\ufedb\111\ufedb\112" +
    "\ufedb\131\ufedb\001\002\000\032\003\175\005\121\044\114" +
    "\045\135\046\141\047\137\050\157\051\126\064\176\100" +
    "\074\110\100\111\105\001\002\000\032\003\u023f\005\121" +
    "\044\114\045\135\046\141\047\137\050\157\051\126\064" +
    "\176\100\074\110\100\111\105\001\002\000\036\003\175" +
    "\005\121\010\ufecf\044\114\045\135\046\141\047\137\050" +
    "\157\051\126\056\205\064\176\100\074\110\100\111\105" +
    "\001\002\000\020\010\ufed6\033\166\034\161\035\165\036" +
    "\172\037\171\040\162\001\002\000\020\010\ufed0\033\166" +
    "\034\161\035\165\036\172\037\171\040\162\001\002\000" +
    "\054\010\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda" +
    "\023\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\033" +
    "\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda\043\u0251" +
    "\056\205\064\274\001\002\000\032\003\175\005\121\044" +
    "\114\045\135\046\141\047\137\050\157\051\126\064\176" +
    "\100\074\110\100\111\105\001\002\000\004\130\025\001" +
    "\002\000\004\010\u0246\001\002\000\006\003\u0247\005\u021e" +
    "\001\002\000\012\043\u022e\052\u022c\053\u022f\054\u022d\001" +
    "\002\000\004\065\u0249\001\002\000\004\130\025\001\002" +
    "\000\042\003\u011d\005\076\042\106\062\072\066\061\072" +
    "\065\073\102\074\104\076\u0115\100\074\101\110\102\070" +
    "\110\100\111\105\112\111\131\uff3b\001\002\000\004\131" +
    "\326\001\002\000\046\003\ufedc\005\ufedc\042\ufedc\062\ufedc" +
    "\066\ufedc\070\ufedc\072\ufedc\073\ufedc\074\ufedc\075\ufedc\076" +
    "\ufedc\100\ufedc\101\ufedc\102\ufedc\110\ufedc\111\ufedc\112\ufedc" +
    "\131\ufedc\001\002\000\042\003\u011d\005\076\042\106\062" +
    "\072\066\061\072\065\073\102\074\104\076\u0115\100\074" +
    "\101\110\102\070\110\100\111\105\112\111\131\uff3b\001" +
    "\002\000\004\131\326\001\002\000\046\003\ufed9\005\ufed9" +
    "\042\ufed9\062\ufed9\066\ufed9\070\ufed9\072\ufed9\073\ufed9\074" +
    "\ufed9\075\ufed9\076\ufed9\100\ufed9\101\ufed9\102\ufed9\110\ufed9" +
    "\111\ufed9\112\ufed9\131\ufed9\001\002\000\020\010\ufed1\033" +
    "\166\034\161\035\165\036\172\037\171\040\162\001\002" +
    "\000\032\003\175\005\121\044\114\045\135\046\141\047" +
    "\137\050\157\051\126\064\176\100\074\110\100\111\105" +
    "\001\002\000\020\010\ufed5\033\166\034\161\035\165\036" +
    "\172\037\171\040\162\001\002\000\006\003\u0254\005\u0255" +
    "\001\002\000\004\043\u025b\001\002\000\006\003\u0256\043" +
    "\u0257\001\002\000\032\003\175\005\121\044\114\045\135" +
    "\046\141\047\137\050\157\051\126\064\176\100\074\110" +
    "\100\111\105\001\002\000\032\003\u0258\005\121\044\114" +
    "\045\135\046\141\047\137\050\157\051\126\064\176\100" +
    "\074\110\100\111\105\001\002\000\036\003\175\005\121" +
    "\010\ufed2\044\114\045\135\046\141\047\137\050\157\051" +
    "\126\056\205\064\176\100\074\110\100\111\105\001\002" +
    "\000\020\010\ufed7\033\166\034\161\035\165\036\172\037" +
    "\171\040\162\001\002\000\020\010\ufed3\033\166\034\161" +
    "\035\165\036\172\037\171\040\162\001\002\000\032\003" +
    "\175\005\121\044\114\045\135\046\141\047\137\050\157" +
    "\051\126\064\176\100\074\110\100\111\105\001\002\000" +
    "\020\010\ufed4\033\166\034\161\035\165\036\172\037\171" +
    "\040\162\001\002\000\004\131\uff39\001\002\000\004\131" +
    "\uff36\001\002\000\004\131\uff37\001\002\000\004\130\025" +
    "\001\002\000\006\003\u0262\005\u0263\001\002\000\004\065" +
    "\u0282\001\002\000\004\065\u0264\001\002\000\004\130\025" +
    "\001\002\000\012\003\u0267\067\u0269\071\u0266\131\ufee3\001" +
    "\002\000\004\130\025\001\002\000\004\131\326\001\002" +
    "\000\004\131\326\001\002\000\032\003\u026a\005\121\044" +
    "\114\045\135\046\141\047\137\050\157\051\126\064\176" +
    "\100\074\110\100\111\105\001\002\000\040\003\175\005" +
    "\121\044\114\045\135\046\141\047\137\050\157\051\126" +
    "\056\205\064\176\100\074\110\100\111\105\130\025\131" +
    "\326\001\002\000\020\033\166\034\161\035\165\036\172" +
    "\037\171\040\162\130\025\001\002\000\044\003\u026e\005" +
    "\076\042\106\062\072\066\061\070\uff3b\072\065\073\102" +
    "\074\104\076\u0115\100\074\101\110\102\070\110\100\111" +
    "\105\112\111\131\uff3b\001\002\000\006\070\u026f\131\ufede" +
    "\001\002\000\034\003\330\011\031\012\034\013\030\014" +
    "\026\015\035\043\u0122\052\u0121\053\u011e\054\u011f\056\205" +
    "\070\u026f\131\ufede\001\002\000\004\131\ufedf\001\002\000" +
    "\004\131\326\001\002\000\010\067\u0269\071\u0266\131\ufee3" +
    "\001\002\000\004\131\ufee1\001\002\000\004\131\326\001" +
    "\002\000\010\067\u0269\071\u0266\131\ufee3\001\002\000\004" +
    "\131\ufee5\001\002\000\044\003\u011d\005\076\042\106\062" +
    "\072\066\061\070\uff3b\072\065\073\102\074\104\076\u0115" +
    "\100\074\101\110\102\070\110\100\111\105\112\111\131" +
    "\uff3b\001\002\000\010\067\u0269\071\u0266\131\ufee3\001\002" +
    "\000\004\131\ufee0\001\002\000\006\070\u026f\131\ufede\001" +
    "\002\000\004\131\326\001\002\000\010\067\u0269\071\u0266" +
    "\131\ufee3\001\002\000\004\131\ufee2\001\002\000\046\003" +
    "\ufee9\005\ufee9\042\ufee9\062\ufee9\066\ufee9\070\ufee9\072\ufee9" +
    "\073\ufee9\074\ufee9\075\ufee9\076\ufee9\100\ufee9\101\ufee9\102" +
    "\ufee9\110\ufee9\111\ufee9\112\ufee9\131\ufee9\001\002\000\046" +
    "\003\ufee6\005\ufee6\042\ufee6\062\ufee6\066\ufee6\070\ufee6\072" +
    "\ufee6\073\ufee6\074\ufee6\075\ufee6\076\ufee6\100\ufee6\101\ufee6" +
    "\102\ufee6\110\ufee6\111\ufee6\112\ufee6\131\ufee6\001\002\000" +
    "\042\003\u011d\005\076\042\106\062\072\066\061\072\065" +
    "\073\102\074\104\076\u0115\100\074\101\110\102\070\110" +
    "\100\111\105\112\111\131\uff3b\001\002\000\004\131\326" +
    "\001\002\000\004\131\ufee4\001\002\000\004\130\025\001" +
    "\002\000\010\067\u0269\071\u0266\131\ufee3\001\002\000\004" +
    "\131\326\001\002\000\046\003\ufee8\005\ufee8\042\ufee8\062" +
    "\ufee8\066\ufee8\070\ufee8\072\ufee8\073\ufee8\074\ufee8\075\ufee8" +
    "\076\ufee8\100\ufee8\101\ufee8\102\ufee8\110\ufee8\111\ufee8\112" +
    "\ufee8\131\ufee8\001\002\000\010\067\u0269\071\u0266\131\ufee3" +
    "\001\002\000\004\131\326\001\002\000\046\003\ufee7\005" +
    "\ufee7\042\ufee7\062\ufee7\066\ufee7\070\ufee7\072\ufee7\073\ufee7" +
    "\074\ufee7\075\ufee7\076\ufee7\100\ufee7\101\ufee7\102\ufee7\110" +
    "\ufee7\111\ufee7\112\ufee7\131\ufee7\001\002\000\004\131\uff30" +
    "\001\002\000\004\131\uff38\001\002\000\004\131\uff2c\001" +
    "\002\000\004\131\uff32\001\002\000\004\131\uff2d\001\002" +
    "\000\004\131\uff35\001\002\000\040\003\u011d\005\076\042" +
    "\106\062\072\066\061\072\065\073\102\074\104\100\074" +
    "\101\110\102\070\110\100\111\105\112\111\131\uff2a\001" +
    "\002\000\004\131\326\001\002\000\034\002\ufef9\003\ufef9" +
    "\004\ufef9\005\ufef9\011\ufef9\012\ufef9\013\ufef9\014\ufef9\015" +
    "\ufef9\041\ufef9\042\ufef9\113\ufef9\131\ufef9\001\002\000\022" +
    "\003\u0295\007\uff4e\011\031\012\034\013\030\014\026\015" +
    "\035\065\uff4e\001\002\000\006\007\u02a1\065\u02a2\001\002" +
    "\000\006\007\uff54\065\uff54\001\002\000\012\003\uffc1\005" +
    "\uffc1\007\u029a\065\u029b\001\002\000\006\007\uff55\065\uff55" +
    "\001\002\000\006\003\u0298\005\u0299\001\002\000\006\007" +
    "\uff51\065\uff51\001\002\000\006\007\uff52\065\uff52\001\002" +
    "\000\016\003\330\011\031\012\034\013\030\014\026\015" +
    "\035\001\002\000\004\130\025\001\002\000\040\003\u011d" +
    "\005\076\042\106\062\072\066\061\072\065\073\102\074" +
    "\104\100\074\101\110\102\070\110\100\111\105\112\111" +
    "\131\uff2a\001\002\000\004\131\326\001\002\000\034\002" +
    "\uff59\003\uff59\004\uff59\005\uff59\011\uff59\012\uff59\013\uff59" +
    "\014\uff59\015\uff59\041\uff59\042\uff59\113\uff59\131\uff59\001" +
    "\002\000\004\005\u02a0\001\002\000\006\007\uff4f\065\uff4f" +
    "\001\002\000\016\003\u02a9\011\031\012\034\013\030\014" +
    "\026\015\035\001\002\000\004\130\025\001\002\000\040" +
    "\003\u02a4\005\076\042\106\062\072\066\061\072\065\073" +
    "\102\074\104\100\074\101\110\102\070\110\100\111\105" +
    "\112\111\131\uff2a\001\002\000\032\003\330\011\031\012" +
    "\034\013\030\014\026\015\035\043\u0122\052\u0121\053\u011e" +
    "\054\u011f\056\205\131\326\001\002\000\004\131\326\001" +
    "\002\000\034\002\uff5b\003\uff5b\004\uff5b\005\uff5b\011\uff5b" +
    "\012\uff5b\013\uff5b\014\uff5b\015\uff5b\041\uff5b\042\uff5b\113" +
    "\uff5b\131\uff5b\001\002\000\034\002\uff58\003\uff58\004\uff58" +
    "\005\uff58\011\uff58\012\uff58\013\uff58\014\uff58\015\uff58\041" +
    "\uff58\042\uff58\113\uff58\131\uff58\001\002\000\004\005\u02aa" +
    "\001\002\000\010\005\uffc1\007\uff50\065\uff50\001\002\000" +
    "\006\007\uff53\065\uff53\001\002\000\004\005\u02ba\001\002" +
    "\000\004\064\u02ad\001\002\000\022\003\u02af\007\uff4e\011" +
    "\031\012\034\013\030\014\026\015\035\065\uff4e\001\002" +
    "\000\006\007\u02a1\065\u02b4\001\002\000\012\003\uffc1\005" +
    "\uffc1\007\u029a\065\u02b0\001\002\000\004\130\025\001\002" +
    "\000\040\003\u011d\005\076\042\106\062\072\066\061\072" +
    "\065\073\102\074\104\100\074\101\110\102\070\110\100" +
    "\111\105\112\111\131\uff2a\001\002\000\004\131\326\001" +
    "\002\000\034\002\uff57\003\uff57\004\uff57\005\uff57\011\uff57" +
    "\012\uff57\013\uff57\014\uff57\015\uff57\041\uff57\042\uff57\113" +
    "\uff57\131\uff57\001\002\000\004\130\025\001\002\000\040" +
    "\003\u02b6\005\076\042\106\062\072\066\061\072\065\073" +
    "\102\074\104\100\074\101\110\102\070\110\100\111\105" +
    "\112\111\131\uff2a\001\002\000\032\003\330\011\031\012" +
    "\034\013\030\014\026\015\035\043\u0122\052\u0121\053\u011e" +
    "\054\u011f\056\205\131\326\001\002\000\004\131\326\001" +
    "\002\000\034\002\uff5a\003\uff5a\004\uff5a\005\uff5a\011\uff5a" +
    "\012\uff5a\013\uff5a\014\uff5a\015\uff5a\041\uff5a\042\uff5a\113" +
    "\uff5a\131\uff5a\001\002\000\034\002\uff56\003\uff56\004\uff56" +
    "\005\uff56\011\uff56\012\uff56\013\uff56\014\uff56\015\uff56\041" +
    "\uff56\042\uff56\113\uff56\131\uff56\001\002\000\004\064\u02bb" +
    "\001\002\000\022\003\u02bd\007\uff4e\011\031\012\034\013" +
    "\030\014\026\015\035\065\uff4e\001\002\000\006\007\u02a1" +
    "\065\u02c2\001\002\000\012\003\uffc1\005\uffc1\007\u029a\065" +
    "\u02be\001\002\000\004\130\025\001\002\000\042\003\u011d" +
    "\005\076\042\106\062\072\066\061\072\065\073\102\074" +
    "\104\076\u0115\100\074\101\110\102\070\110\100\111\105" +
    "\112\111\131\uff3b\001\002\000\004\131\326\001\002\000" +
    "\034\002\uff5f\003\uff5f\004\uff5f\005\uff5f\011\uff5f\012\uff5f" +
    "\013\uff5f\014\uff5f\015\uff5f\041\uff5f\042\uff5f\113\uff5f\131" +
    "\uff5f\001\002\000\004\130\025\001\002\000\042\003\u02c5" +
    "\005\076\042\106\062\072\066\061\072\065\073\102\074" +
    "\104\076\u0115\100\074\101\110\102\070\110\100\111\105" +
    "\112\111\131\uff3b\001\002\000\004\131\326\001\002\000" +
    "\032\003\330\011\031\012\034\013\030\014\026\015\035" +
    "\043\u0122\052\u0121\053\u011e\054\u011f\056\205\131\326\001" +
    "\002\000\034\002\uff5c\003\uff5c\004\uff5c\005\uff5c\011\uff5c" +
    "\012\uff5c\013\uff5c\014\uff5c\015\uff5c\041\uff5c\042\uff5c\113" +
    "\uff5c\131\uff5c\001\002\000\034\002\uff62\003\uff62\004\uff62" +
    "\005\uff62\011\uff62\012\uff62\013\uff62\014\uff62\015\uff62\041" +
    "\uff62\042\uff62\113\uff62\131\uff62\001\002\000\010\002\ufff0" +
    "\004\ufff0\131\ufff0\001\002\000\006\003\u02ca\005\u02cb\001" +
    "\002\000\064\003\245\005\121\016\134\017\117\020\132" +
    "\021\136\022\153\023\156\024\143\025\123\026\124\027" +
    "\130\030\125\031\116\032\122\044\114\045\135\046\141" +
    "\047\137\050\157\051\126\064\147\100\074\110\100\111" +
    "\105\001\002\000\040\002\uffea\003\uffea\004\uffea\005\uffea" +
    "\007\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\041" +
    "\uffea\042\uffea\043\u02cc\113\uffea\131\uffea\001\002\000\064" +
    "\003\245\005\121\016\134\017\117\020\132\021\136\022" +
    "\153\023\156\024\143\025\123\026\124\027\130\030\125" +
    "\031\116\032\122\044\114\045\135\046\141\047\137\050" +
    "\157\051\126\064\147\100\074\110\100\111\105\001\002" +
    "\000\050\002\uffe9\003\uffe9\004\uffe9\005\uffe9\007\uffe9\011" +
    "\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\025\241\026\240" +
    "\027\244\030\242\031\243\041\uffe9\042\uffe9\113\uffe9\131" +
    "\uffe9\001\002\000\050\002\uffe6\003\uffe6\004\uffe6\005\uffe6" +
    "\007\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\025" +
    "\241\026\240\027\244\030\242\031\243\041\uffe6\042\uffe6" +
    "\113\uffe6\131\uffe6\001\002\000\006\002\ufff7\004\ufff7\001" +
    "\002\000\006\002\ufffb\004\ufffb\001\002\000\010\002\uffee" +
    "\004\uffee\131\uffee\001\002\000\004\064\u02d3\001\002\000" +
    "\022\003\u02d5\007\uff4e\011\031\012\034\013\030\014\026" +
    "\015\035\065\uff4e\001\002\000\006\007\u02a1\065\u02da\001" +
    "\002\000\012\003\uffc1\005\uffc1\007\u029a\065\u02d6\001\002" +
    "\000\004\130\025\001\002\000\042\003\u011d\005\076\042" +
    "\106\062\072\066\061\072\065\073\102\074\104\076\u0115" +
    "\100\074\101\110\102\070\110\100\111\105\112\111\131" +
    "\uff3b\001\002\000\004\131\326\001\002\000\034\002\uff60" +
    "\003\uff60\004\uff60\005\uff60\011\uff60\012\uff60\013\uff60\014" +
    "\uff60\015\uff60\041\uff60\042\uff60\113\uff60\131\uff60\001\002" +
    "\000\004\130\025\001\002\000\042\003\u02dd\005\076\042" +
    "\106\062\072\066\061\072\065\073\102\074\104\076\u0115" +
    "\100\074\101\110\102\070\110\100\111\105\112\111\131" +
    "\uff3b\001\002\000\004\131\326\001\002\000\032\003\330" +
    "\011\031\012\034\013\030\014\026\015\035\043\u0122\052" +
    "\u0121\053\u011e\054\u011f\056\205\131\326\001\002\000\034" +
    "\002\uff5d\003\uff5d\004\uff5d\005\uff5d\011\uff5d\012\uff5d\013" +
    "\uff5d\014\uff5d\015\uff5d\041\uff5d\042\uff5d\113\uff5d\131\uff5d" +
    "\001\002\000\034\002\uff63\003\uff63\004\uff63\005\uff63\011" +
    "\uff63\012\uff63\013\uff63\014\uff63\015\uff63\041\uff63\042\uff63" +
    "\113\uff63\131\uff63\001\002\000\004\130\025\001\002\000" +
    "\022\003\u02ee\007\uff4e\011\031\012\034\013\030\014\026" +
    "\015\035\065\uff4e\001\002\000\006\005\u02e3\055\u02e4\001" +
    "\002\000\040\002\uffe4\003\uffe4\004\uffe4\005\uffe4\007\uffe4" +
    "\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\041\uffe4\042" +
    "\uffe4\043\u02eb\113\uffe4\131\uffe4\001\002\000\004\005\u02e5" +
    "\001\002\000\040\002\uff84\003\uff84\004\uff84\005\uff84\007" +
    "\uff84\011\uff84\012\uff84\013\uff84\014\uff84\015\uff84\041\uff84" +
    "\042\uff84\056\205\113\uff84\131\uff84\001\002\000\042\002" +
    "\uff83\003\uff83\004\uff83\005\uff83\007\uff83\011\uff83\012\uff83" +
    "\013\uff83\014\uff83\015\uff83\041\uff83\042\uff83\043\u02e7\056" +
    "\213\113\uff83\131\uff83\001\002\000\004\060\u02e8\001\002" +
    "\000\066\003\343\005\121\016\134\017\117\020\132\021" +
    "\136\022\153\023\156\024\143\025\123\026\124\027\130" +
    "\030\125\031\116\032\122\044\114\045\135\046\141\047" +
    "\137\050\157\051\126\060\342\064\147\100\074\110\100" +
    "\111\105\001\002\000\004\061\u02ea\001\002\000\036\002" +
    "\uff85\003\uff85\004\uff85\005\uff85\007\uff85\011\uff85\012\uff85" +
    "\013\uff85\014\uff85\015\uff85\041\uff85\042\uff85\113\uff85\131" +
    "\uff85\001\002\000\064\003\245\005\121\016\134\017\117" +
    "\020\132\021\136\022\153\023\156\024\143\025\123\026" +
    "\124\027\130\030\125\031\116\032\122\044\114\045\135" +
    "\046\141\047\137\050\157\051\126\064\147\100\074\110" +
    "\100\111\105\001\002\000\050\002\uffe5\003\uffe5\004\uffe5" +
    "\005\uffe5\007\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015" +
    "\uffe5\025\241\026\240\027\244\030\242\031\243\041\uffe5" +
    "\042\uffe5\113\uffe5\131\uffe5\001\002\000\006\007\u02a1\065" +
    "\u02ef\001\002\000\010\003\uffc1\005\uffc1\007\u029a\001\002" +
    "\000\004\130\025\001\002\000\042\003\u011d\005\076\042" +
    "\106\062\072\066\061\072\065\073\102\074\104\076\u0115" +
    "\100\074\101\110\102\070\110\100\111\105\112\111\131" +
    "\uff3b\001\002\000\004\131\326\001\002\000\034\002\uff61" +
    "\003\uff61\004\uff61\005\uff61\011\uff61\012\uff61\013\uff61\014" +
    "\uff61\015\uff61\041\uff61\042\uff61\113\uff61\131\uff61\001\002" +
    "\000\042\003\u011d\005\076\042\106\062\072\066\061\072" +
    "\065\073\102\074\104\076\u0115\100\074\101\110\102\070" +
    "\110\100\111\105\112\111\131\uff3b\001\002\000\004\131" +
    "\326\001\002\000\034\002\uff5e\003\uff5e\004\uff5e\005\uff5e" +
    "\011\uff5e\012\uff5e\013\uff5e\014\uff5e\015\uff5e\041\uff5e\042" +
    "\uff5e\113\uff5e\131\uff5e\001\002\000\016\003\330\011\031" +
    "\012\034\013\030\014\026\015\035\001\002\000\006\005" +
    "\u02f8\055\u02f9\001\002\000\040\002\uffe7\003\uffe7\004\uffe7" +
    "\005\uffe7\007\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015" +
    "\uffe7\041\uffe7\042\uffe7\043\u0300\113\uffe7\131\uffe7\001\002" +
    "\000\004\005\u02fa\001\002\000\040\002\uff87\003\uff87\004" +
    "\uff87\005\uff87\007\uff87\011\uff87\012\uff87\013\uff87\014\uff87" +
    "\015\uff87\041\uff87\042\uff87\056\205\113\uff87\131\uff87\001" +
    "\002\000\042\002\uff86\003\uff86\004\uff86\005\uff86\007\uff86" +
    "\011\uff86\012\uff86\013\uff86\014\uff86\015\uff86\041\uff86\042" +
    "\uff86\043\u02fc\056\213\113\uff86\131\uff86\001\002\000\004" +
    "\060\u02fd\001\002\000\066\003\343\005\121\016\134\017" +
    "\117\020\132\021\136\022\153\023\156\024\143\025\123" +
    "\026\124\027\130\030\125\031\116\032\122\044\114\045" +
    "\135\046\141\047\137\050\157\051\126\060\342\064\147" +
    "\100\074\110\100\111\105\001\002\000\004\061\u02ff\001" +
    "\002\000\036\002\uff88\003\uff88\004\uff88\005\uff88\007\uff88" +
    "\011\uff88\012\uff88\013\uff88\014\uff88\015\uff88\041\uff88\042" +
    "\uff88\113\uff88\131\uff88\001\002\000\064\003\245\005\121" +
    "\016\134\017\117\020\132\021\136\022\153\023\156\024" +
    "\143\025\123\026\124\027\130\030\125\031\116\032\122" +
    "\044\114\045\135\046\141\047\137\050\157\051\126\064" +
    "\147\100\074\110\100\111\105\001\002\000\050\002\uffe8" +
    "\003\uffe8\004\uffe8\005\uffe8\007\uffe8\011\uffe8\012\uffe8\013" +
    "\uffe8\014\uffe8\015\uffe8\025\241\026\240\027\244\030\242" +
    "\031\243\041\uffe8\042\uffe8\113\uffe8\131\uffe8\001\002\000" +
    "\010\002\uffed\004\uffed\131\uffed\001\002\000\010\002\uffef" +
    "\004\uffef\131\uffef\001\002\000\004\005\u0305\001\002\000" +
    "\040\002\uff8a\003\uff8a\004\uff8a\005\uff8a\007\uff8a\011\uff8a" +
    "\012\uff8a\013\uff8a\014\uff8a\015\uff8a\041\uff8a\042\uff8a\056" +
    "\205\113\uff8a\131\uff8a\001\002\000\042\002\uff8b\003\uff8b" +
    "\004\uff8b\005\uff8b\007\uff8b\011\uff8b\012\uff8b\013\uff8b\014" +
    "\uff8b\015\uff8b\041\uff8b\042\uff8b\043\u0307\056\213\113\uff8b" +
    "\131\uff8b\001\002\000\004\060\u0308\001\002\000\066\003" +
    "\343\005\121\016\134\017\117\020\132\021\136\022\153" +
    "\023\156\024\143\025\123\026\124\027\130\030\125\031" +
    "\116\032\122\044\114\045\135\046\141\047\137\050\157" +
    "\051\126\060\342\064\147\100\074\110\100\111\105\001" +
    "\002\000\004\061\u030a\001\002\000\036\002\uff89\003\uff89" +
    "\004\uff89\005\uff89\007\uff89\011\uff89\012\uff89\013\uff89\014" +
    "\uff89\015\uff89\041\uff89\042\uff89\113\uff89\131\uff89\001\002" +
    "\000\010\002\uffec\004\uffec\131\uffec\001\002\000\006\007" +
    "\ufff2\130\ufff2\001\002\000\004\005\u030e\001\002\000\006" +
    "\007\ufff3\130\ufff3\001\002\000\004\130\025\001\002\000" +
    "\034\002\uffeb\003\037\004\uffeb\005\045\011\031\012\034" +
    "\013\030\014\026\015\035\041\044\042\uffdb\113\046\131" +
    "\uffeb\001\002\000\010\002\ufffa\004\ufffa\131\u02d0\001\002" +
    "\000\006\002\ufff6\004\ufff6\001\002\000\004\002\ufff9\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0311\000\006\002\004\003\003\001\001\000\006\004" +
    "\013\005\012\001\001\000\002\001\001\000\004\003\006" +
    "\001\001\000\002\001\001\000\004\003\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\u0312\005\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\017\007\u030e\001\001\000\006\006\017\007\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\063\023\001\001\000\022\010\041\011\042\012\035" +
    "\016\037\021\031\035\040\036\032\045\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\010\u030a\011\042" +
    "\012\035\016\037\021\031\035\040\036\032\045\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\010\u0302" +
    "\011\042\012\035\016\037\021\031\035\040\036\032\045" +
    "\026\001\001\000\022\010\u0301\011\042\012\035\016\037" +
    "\021\031\035\040\036\032\045\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\u02e1" +
    "\001\001\000\002\001\001\000\022\010\u02d0\011\042\012" +
    "\035\016\037\021\031\035\040\036\032\045\026\001\001" +
    "\000\004\065\u02ce\001\001\000\022\010\u02c7\011\042\012" +
    "\035\016\037\021\031\035\040\036\032\045\026\001\001" +
    "\000\004\016\u02aa\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\063\u028e\001\001\000\002\001\001\000\004" +
    "\063\051\001\001\000\044\015\063\025\052\027\074\031" +
    "\061\032\076\033\054\034\070\037\057\040\102\041\066" +
    "\042\053\043\055\044\100\046\062\067\106\102\065\103" +
    "\056\001\001\000\044\015\063\025\052\027\074\031\061" +
    "\032\076\033\054\034\070\037\057\040\102\041\066\042" +
    "\053\043\055\044\100\046\062\067\u028d\102\065\103\056" +
    "\001\001\000\044\015\063\025\052\027\074\031\061\032" +
    "\076\033\054\034\070\037\057\040\102\041\066\042\053" +
    "\043\055\044\100\046\062\067\u028c\102\065\103\056\001" +
    "\001\000\044\015\063\025\052\027\074\031\061\032\076" +
    "\033\054\034\070\037\057\040\102\041\066\042\053\043" +
    "\055\044\100\046\062\067\u028b\102\065\103\056\001\001" +
    "\000\044\015\063\025\052\027\074\031\061\032\076\033" +
    "\054\034\070\037\057\040\102\041\066\042\053\043\055" +
    "\044\100\046\062\067\u028a\102\065\103\056\001\001\000" +
    "\044\015\063\025\052\027\074\031\061\032\076\033\054" +
    "\034\070\037\057\040\102\041\066\042\053\043\055\044" +
    "\100\046\062\067\u0289\102\065\103\056\001\001\000\044" +
    "\015\063\025\052\027\074\031\061\032\076\033\054\034" +
    "\070\037\057\040\102\041\066\042\053\043\055\044\100" +
    "\046\062\067\u0288\102\065\103\056\001\001\000\002\001" +
    "\001\000\044\015\063\025\052\027\074\031\061\032\076" +
    "\033\054\034\070\037\057\040\102\041\066\042\053\043" +
    "\055\044\100\046\062\067\u025e\102\065\103\056\001\001" +
    "\000\044\015\063\025\052\027\074\031\061\032\076\033" +
    "\054\034\070\037\057\040\102\041\066\042\053\043\055" +
    "\044\100\046\062\067\u025d\102\065\103\056\001\001\000" +
    "\044\015\063\025\052\027\074\031\061\032\076\033\054" +
    "\034\070\037\057\040\102\041\066\042\053\043\055\044" +
    "\100\046\062\067\u025c\102\065\103\056\001\001\000\002" +
    "\001\001\000\044\015\063\025\052\027\074\031\061\032" +
    "\076\033\054\034\070\037\057\040\102\041\066\042\053" +
    "\043\055\044\100\046\062\067\u0211\102\065\103\056\001" +
    "\001\000\044\015\063\025\052\027\074\031\061\032\076" +
    "\033\054\034\070\037\057\040\102\041\066\042\053\043" +
    "\055\044\100\046\062\067\u0210\102\065\103\056\001\001" +
    "\000\002\001\001\000\044\015\063\025\052\027\074\031" +
    "\061\032\076\033\054\034\070\037\057\040\102\041\066" +
    "\042\053\043\055\044\100\046\062\067\u01fd\102\065\103" +
    "\056\001\001\000\002\001\001\000\010\016\u0122\022\u011f" +
    "\064\u01bf\001\001\000\002\001\001\000\044\015\063\025" +
    "\052\027\074\031\061\032\076\033\054\034\070\037\057" +
    "\040\102\041\066\042\053\043\055\044\100\046\062\067" +
    "\u0196\102\065\103\056\001\001\000\004\022\u018a\001\001" +
    "\000\044\015\063\025\052\027\074\031\061\032\076\033" +
    "\054\034\070\037\057\040\102\041\066\042\053\043\055" +
    "\044\100\046\062\067\u0185\102\065\103\056\001\001\000" +
    "\002\001\001\000\044\015\063\025\052\027\074\031\061" +
    "\032\076\033\054\034\070\037\057\040\102\041\066\042" +
    "\053\043\055\044\100\046\062\067\u017d\102\065\103\056" +
    "\001\001\000\002\001\001\000\044\015\063\025\052\027" +
    "\074\031\061\032\076\033\054\034\070\037\057\040\102" +
    "\041\066\042\053\043\055\044\100\046\062\067\u0169\102" +
    "\065\103\056\001\001\000\004\063\u0107\001\001\000\002" +
    "\001\001\000\004\016\330\001\001\000\004\064\326\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\014\143\017\145\020\147\037\126\042\151\043" +
    "\130\046\114\047\150\060\141\062\132\076\153\077\117" +
    "\100\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\272\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\014\143\020" +
    "\205\022\202\037\126\042\151\043\130\046\114\047\150" +
    "\076\153\077\246\100\235\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\014\143\020\255\037\126\042\151" +
    "\043\130\046\114\047\150\060\253\076\153\100\154\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\014\143\020\234\037\126\042\151\043\130\046" +
    "\114\047\150\060\232\076\153\100\154\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\014\143\020" +
    "\231\037\126\042\151\043\130\046\114\047\150\076\153" +
    "\001\001\000\022\014\143\020\230\037\126\042\151\043" +
    "\130\046\114\047\150\076\153\001\001\000\022\014\143" +
    "\020\227\037\126\042\151\043\130\046\114\047\150\076" +
    "\153\001\001\000\022\014\143\020\226\037\126\042\151" +
    "\043\130\046\114\047\150\076\153\001\001\000\022\014" +
    "\143\020\225\037\126\042\151\043\130\046\114\047\150" +
    "\076\153\001\001\000\022\014\143\020\224\037\126\042" +
    "\151\043\130\046\114\047\150\076\153\001\001\000\022" +
    "\014\143\020\223\037\126\042\151\043\130\046\114\047" +
    "\150\076\153\001\001\000\022\014\143\020\222\037\126" +
    "\042\151\043\130\046\114\047\150\076\153\001\001\000" +
    "\022\014\143\020\221\037\126\042\151\043\130\046\114" +
    "\047\150\076\153\001\001\000\022\014\143\020\220\037" +
    "\126\042\151\043\130\046\114\047\150\076\153\001\001" +
    "\000\022\014\143\020\217\037\126\042\151\043\130\046" +
    "\114\047\150\076\153\001\001\000\022\014\143\020\176" +
    "\037\126\042\151\043\130\046\114\047\150\076\153\001" +
    "\001\000\024\014\143\020\205\022\202\037\126\042\151" +
    "\043\130\046\114\047\150\076\153\001\001\000\022\014" +
    "\143\020\200\037\126\042\151\043\130\046\114\047\150" +
    "\076\153\001\001\000\002\001\001\000\024\014\143\020" +
    "\205\022\202\037\126\042\151\043\130\046\114\047\150" +
    "\076\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\014\143\020\207" +
    "\037\126\042\151\043\130\046\114\047\150\076\153\001" +
    "\001\000\002\001\001\000\024\014\143\020\205\022\202" +
    "\037\126\042\151\043\130\046\114\047\150\076\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\014\143\020\214\037\126\042\151\043\130\046" +
    "\114\047\150\076\153\001\001\000\024\014\143\020\205" +
    "\022\202\037\126\042\151\043\130\046\114\047\150\076" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\014\143\020\205\022\202\037\126\042\151\043\130\046" +
    "\114\047\150\076\153\100\235\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\014\143\017" +
    "\252\020\147\037\126\042\151\043\130\046\114\047\150" +
    "\060\141\076\153\077\117\100\154\001\001\000\032\014" +
    "\143\017\251\020\147\037\126\042\151\043\130\046\114" +
    "\047\150\060\141\076\153\077\117\100\154\001\001\000" +
    "\032\014\143\017\250\020\147\037\126\042\151\043\130" +
    "\046\114\047\150\060\141\076\153\077\117\100\154\001" +
    "\001\000\032\014\143\017\247\020\147\037\126\042\151" +
    "\043\130\046\114\047\150\060\141\076\153\077\117\100" +
    "\154\001\001\000\032\014\143\017\245\020\147\037\126" +
    "\042\151\043\130\046\114\047\150\060\141\076\153\077" +
    "\117\100\154\001\001\000\030\014\143\020\205\022\202" +
    "\037\126\042\151\043\130\046\114\047\150\076\153\077" +
    "\246\100\235\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\014\143\020\205" +
    "\022\202\037\126\042\151\043\130\046\114\047\150\076" +
    "\153\100\235\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\014\143\017\260\020\147\037\126\042\151\043" +
    "\130\046\114\047\150\060\141\076\153\077\117\100\154" +
    "\001\001\000\002\001\001\000\032\014\143\017\265\020" +
    "\147\037\126\042\151\043\130\046\114\047\150\060\141" +
    "\076\153\077\117\100\154\001\001\000\032\014\143\017" +
    "\264\020\147\037\126\042\151\043\130\046\114\047\150" +
    "\060\141\076\153\077\117\100\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\014\143\017\270\020\147\037\126\042\151\043" +
    "\130\046\114\047\150\060\141\076\153\077\117\100\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\014\143\020\277\037\126\042\151\043\130" +
    "\046\114\047\150\050\275\051\274\076\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\014\143\020\205" +
    "\022\202\037\126\042\151\043\130\046\114\047\150\076" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\014\143\020\303\037\126\042\151\043\130\046\114\047" +
    "\150\076\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\014\143\020\305\037\126\042\151\043\130\046" +
    "\114\047\150\076\153\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\014\143\020\314\037\126\042\151\043\130" +
    "\046\114\047\150\076\153\001\001\000\024\014\143\020" +
    "\205\022\202\037\126\042\151\043\130\046\114\047\150" +
    "\076\153\001\001\000\002\001\001\000\022\014\143\020" +
    "\321\037\126\042\151\043\130\046\114\047\150\076\153" +
    "\001\001\000\022\014\143\020\317\037\126\042\151\043" +
    "\130\046\114\047\150\076\153\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\334\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\014\143\017\343\020" +
    "\147\023\340\024\337\037\126\042\151\043\130\046\114" +
    "\047\150\060\141\061\344\075\345\076\153\077\117\100" +
    "\154\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\014\143\017\343\020\147\024\370\037\126\042\151\043" +
    "\130\046\114\047\150\060\141\061\344\075\371\076\153" +
    "\077\117\100\154\001\001\000\030\014\143\020\205\022" +
    "\202\037\126\042\151\043\130\046\114\047\150\076\153" +
    "\077\246\100\235\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\014\143" +
    "\017\343\020\147\024\350\037\126\042\151\043\130\046" +
    "\114\047\150\060\141\061\344\075\351\076\153\077\117" +
    "\100\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\014\143\017\343\020\147\037\126" +
    "\042\151\043\130\046\114\047\150\060\141\061\357\076" +
    "\153\077\117\100\154\001\001\000\034\014\143\017\343" +
    "\020\147\037\126\042\151\043\130\046\114\047\150\060" +
    "\141\061\356\076\153\077\117\100\154\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\014\143\017\343\020\147\024\364\037\126" +
    "\042\151\043\130\046\114\047\150\060\141\061\344\075" +
    "\365\076\153\077\117\100\154\001\001\000\034\014\143" +
    "\017\343\020\147\037\126\042\151\043\130\046\114\047" +
    "\150\060\141\061\363\076\153\077\117\100\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\014\143\017\376\020\147\037\126\042\151" +
    "\043\130\046\114\047\150\060\141\076\153\077\117\100" +
    "\154\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\014\143\020\u0102\037\126\042\151\043\130\046\114\047" +
    "\150\076\153\001\001\000\024\014\143\020\205\022\202" +
    "\037\126\042\151\043\130\046\114\047\150\076\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\064\u0164\001\001\000\044\015" +
    "\u0110\025\u0108\027\u0117\031\u010f\032\u0118\033\u010b\034\u0115" +
    "\037\u010e\040\u0119\041\u0113\042\u0109\043\u010c\044\u011a\046" +
    "\u0111\066\u010a\102\u0112\103\u010d\001\001\000\044\015\u0110" +
    "\025\u0108\027\u0117\031\u010f\032\u0118\033\u010b\034\u0115\037" +
    "\u010e\040\u0119\041\u0113\042\u0109\043\u010c\044\u011a\046\u0111" +
    "\066\u0162\102\u0112\103\u010d\001\001\000\044\015\u0110\025" +
    "\u0108\027\u0117\031\u010f\032\u0118\033\u010b\034\u0115\037\u010e" +
    "\040\u0119\041\u0113\042\u0109\043\u010c\044\u011a\046\u0111\066" +
    "\u0161\102\u0112\103\u010d\001\001\000\004\071\u0155\001\001" +
    "\000\044\015\u0110\025\u0108\027\u0117\031\u010f\032\u0118\033" +
    "\u010b\034\u0115\037\u010e\040\u0119\041\u0113\042\u0109\043\u010c" +
    "\044\u011a\046\u0111\066\u0154\102\u0112\103\u010d\001\001\000" +
    "\044\015\u0110\025\u0108\027\u0117\031\u010f\032\u0118\033\u010b" +
    "\034\u0115\037\u010e\040\u0119\041\u0113\042\u0109\043\u010c\044" +
    "\u011a\046\u0111\066\u0153\102\u0112\103\u010d\001\001\000\044" +
    "\015\u0110\025\u0108\027\u0117\031\u010f\032\u0118\033\u010b\034" +
    "\u0115\037\u010e\040\u0119\041\u0113\042\u0109\043\u010c\044\u011a" +
    "\046\u0111\066\u014b\102\u0112\103\u010d\001\001\000\044\015" +
    "\u0110\025\u0108\027\u0117\031\u010f\032\u0118\033\u010b\034\u0115" +
    "\037\u010e\040\u0119\041\u0113\042\u0109\043\u010c\044\u011a\046" +
    "\u0111\066\u014a\102\u0112\103\u010d\001\001\000\044\015\u0110" +
    "\025\u0108\027\u0117\031\u010f\032\u0118\033\u010b\034\u0115\037" +
    "\u010e\040\u0119\041\u0113\042\u0109\043\u010c\044\u011a\046\u0111" +
    "\066\u0149\102\u0112\103\u010d\001\001\000\044\015\u0110\025" +
    "\u0108\027\u0117\031\u010f\032\u0118\033\u010b\034\u0115\037\u010e" +
    "\040\u0119\041\u0113\042\u0109\043\u010c\044\u011a\046\u0111\066" +
    "\u0148\102\u0112\103\u010d\001\001\000\044\015\u0110\025\u0108" +
    "\027\u0117\031\u010f\032\u0118\033\u010b\034\u0115\037\u010e\040" +
    "\u0119\041\u0113\042\u0109\043\u010c\044\u011a\046\u0111\066\u0147" +
    "\102\u0112\103\u010d\001\001\000\044\015\u0110\025\u0108\027" +
    "\u0117\031\u010f\032\u0118\033\u010b\034\u0115\037\u010e\040\u0119" +
    "\041\u0113\042\u0109\043\u010c\044\u011a\046\u0111\066\u0140\102" +
    "\u0112\103\u010d\001\001\000\044\015\u0110\025\u0108\027\u0117" +
    "\031\u010f\032\u0118\033\u010b\034\u0115\037\u010e\040\u0119\041" +
    "\u0113\042\u0109\043\u010c\044\u011a\046\u0111\066\u013f\102\u0112" +
    "\103\u010d\001\001\000\032\014\143\017\u013d\020\147\037" +
    "\126\042\151\043\130\046\114\047\150\060\141\076\153" +
    "\077\117\100\154\001\001\000\044\015\u0110\025\u0108\027" +
    "\u0117\031\u010f\032\u0118\033\u010b\034\u0115\037\u010e\040\u0119" +
    "\041\u0113\042\u0109\043\u010c\044\u011a\046\u0111\066\u013b\102" +
    "\u0112\103\u010d\001\001\000\010\016\u0122\022\u011f\071\u0135" +
    "\001\001\000\044\015\u0110\025\u0108\027\u0117\031\u010f\032" +
    "\u0118\033\u010b\034\u0115\037\u010e\040\u0119\041\u0113\042\u0109" +
    "\043\u010c\044\u011a\046\u0111\066\u0133\102\u0112\103\u010d\001" +
    "\001\000\044\015\u0110\025\u0108\027\u0117\031\u010f\032\u0118" +
    "\033\u010b\034\u0115\037\u010e\040\u0119\041\u0113\042\u0109\043" +
    "\u010c\044\u011a\046\u0111\066\u0132\102\u0112\103\u010d\001\001" +
    "\000\044\015\u0110\025\u0108\027\u0117\031\u010f\032\u0118\033" +
    "\u010b\034\u0115\037\u010e\040\u0119\041\u0113\042\u0109\043\u010c" +
    "\044\u011a\046\u0111\066\u0131\102\u0112\103\u010d\001\001\000" +
    "\044\015\u0110\025\u0108\027\u0117\031\u010f\032\u0118\033\u010b" +
    "\034\u0115\037\u010e\040\u0119\041\u0113\042\u0109\043\u010c\044" +
    "\u011a\046\u0111\066\u011b\102\u0112\103\u010d\001\001\000\002" +
    "\001\001\000\006\016\u0122\022\u011f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\014\143" +
    "\017\u012e\020\147\037\126\042\151\043\130\046\114\047" +
    "\150\060\141\076\153\077\117\100\154\001\001\000\032" +
    "\014\143\017\u012d\020\147\037\126\042\151\043\130\046" +
    "\114\047\150\060\141\076\153\077\117\100\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\u0126\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\014\143\017\343\020\147\023\u0129\024\337\037" +
    "\126\042\151\043\130\046\114\047\150\060\141\061\344" +
    "\075\345\076\153\077\117\100\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\014\143\017\u012c\020\147" +
    "\037\126\042\151\043\130\046\114\047\150\060\141\076" +
    "\153\077\117\100\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\014\143\017\343\020" +
    "\147\037\126\042\151\043\130\046\114\047\150\060\141" +
    "\061\u0130\076\153\077\117\100\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\064\u0136\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\014\143\017\u0139\020\147" +
    "\037\126\042\151\043\130\046\114\047\150\060\141\076" +
    "\153\077\117\100\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\014\143\020\205\022" +
    "\202\037\126\042\151\043\130\046\114\047\150\076\153" +
    "\077\246\100\235\001\001\000\044\015\u0110\025\u0108\027" +
    "\u0117\031\u010f\032\u0118\033\u010b\034\u0115\037\u010e\040\u0119" +
    "\041\u0113\042\u0109\043\u010c\044\u011a\046\u0111\066\u013e\102" +
    "\u0112\103\u010d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\014\143\017" +
    "\u0146\020\147\037\126\042\151\043\130\046\114\047\150" +
    "\060\141\076\153\077\117\100\154\001\001\000\002\001" +
    "\001\000\032\014\143\017\u0145\020\147\037\126\042\151" +
    "\043\130\046\114\047\150\060\141\076\153\077\117\100" +
    "\154\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\u014e" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\014" +
    "\143\017\343\020\147\023\u0151\024\337\037\126\042\151" +
    "\043\130\046\114\047\150\060\141\061\344\075\345\076" +
    "\153\077\117\100\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\064" +
    "\u0156\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\014\143\017\u015b\020\147\037\126\042" +
    "\151\043\130\046\114\047\150\060\141\076\153\077\117" +
    "\100\154\001\001\000\030\014\143\020\205\022\202\037" +
    "\126\042\151\043\130\046\114\047\150\076\153\077\246" +
    "\100\235\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\014\143\017\u015f\020\147\037\126" +
    "\042\151\043\130\046\114\047\150\060\141\076\153\077" +
    "\117\100\154\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\014\143\017\u0167" +
    "\020\147\037\126\042\151\043\130\046\114\047\150\060" +
    "\141\076\153\077\117\100\154\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\064\u0179\001" +
    "\001\000\032\014\143\017\u016d\020\147\037\126\042\151" +
    "\043\130\046\114\047\150\060\141\076\153\077\117\100" +
    "\154\001\001\000\030\014\143\020\205\022\202\037\126" +
    "\042\151\043\130\046\114\047\150\076\153\077\246\100" +
    "\235\001\001\000\002\001\001\000\004\063\u016f\001\001" +
    "\000\044\015\u0110\025\u0108\027\u0117\031\u010f\032\u0118\033" +
    "\u010b\034\u0115\037\u010e\040\u0119\041\u0113\042\u0109\043\u010c" +
    "\044\u011a\046\u0111\066\u0170\102\u0112\103\u010d\001\001\000" +
    "\004\064\u0173\001\001\000\010\016\u0122\022\u011f\064\u0172" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\063" +
    "\u0175\001\001\000\044\015\u0110\025\u0108\027\u0117\031\u010f" +
    "\032\u0118\033\u010b\034\u0115\037\u010e\040\u0119\041\u0113\042" +
    "\u0109\043\u010c\044\u011a\046\u0111\066\u0176\102\u0112\103\u010d" +
    "\001\001\000\004\064\u0177\001\001\000\002\001\001\000" +
    "\004\063\u017a\001\001\000\002\001\001\000\044\015\u0110" +
    "\025\u0108\027\u0117\031\u010f\032\u0118\033\u010b\034\u0115\037" +
    "\u010e\040\u0119\041\u0113\042\u0109\043\u010c\044\u011a\046\u0111" +
    "\066\u017b\102\u0112\103\u010d\001\001\000\004\064\u017c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\014\143\017\u0195\020\147\037\126\042" +
    "\151\043\130\046\114\047\150\060\141\076\153\077\117" +
    "\100\154\001\001\000\004\104\u0191\001\001\000\002\001" +
    "\001\000\032\014\143\017\u0190\020\147\037\126\042\151" +
    "\043\130\046\114\047\150\060\141\076\153\077\117\100" +
    "\154\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\014\143\017\343\020\147\037\126\042\151\043\130\046" +
    "\114\047\150\060\141\061\u018f\076\153\077\117\100\154" +
    "\001\001\000\034\014\143\017\343\020\147\037\126\042" +
    "\151\043\130\046\114\047\150\060\141\061\u018e\076\153" +
    "\077\117\100\154\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\014\143\017\u0194\020\147" +
    "\037\126\042\151\043\130\046\114\047\150\060\141\076" +
    "\153\077\117\100\154\001\001\000\034\014\143\017\343" +
    "\020\147\037\126\042\151\043\130\046\114\047\150\060" +
    "\141\061\u0193\076\153\077\117\100\154\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\056\u01a5\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\014\143\020\u01af\037\126\042\151\043" +
    "\130\046\114\047\150\076\153\001\001\000\022\014\143" +
    "\020\u01a9\037\126\042\151\043\130\046\114\047\150\076" +
    "\153\001\001\000\002\001\001\000\022\014\143\020\u01ab" +
    "\037\126\042\151\043\130\046\114\047\150\076\153\001" +
    "\001\000\002\001\001\000\022\014\143\020\u01ad\037\126" +
    "\042\151\043\130\046\114\047\150\076\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\014\143\020\u01b6\037\126\042\151\043\130\046\114\047" +
    "\150\076\153\001\001\000\022\014\143\020\u01b2\037\126" +
    "\042\151\043\130\046\114\047\150\076\153\001\001\000" +
    "\002\001\001\000\022\014\143\020\u01b4\037\126\042\151" +
    "\043\130\046\114\047\150\076\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\014\143" +
    "\020\u01bb\037\126\042\151\043\130\046\114\047\150\076" +
    "\153\001\001\000\022\014\143\020\u01b9\037\126\042\151" +
    "\043\130\046\114\047\150\076\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\063\u01f3\064\u01f4\001\001\000\032\014\143\017\u01c3" +
    "\020\147\037\126\042\151\043\130\046\114\047\150\060" +
    "\141\076\153\077\117\100\154\001\001\000\030\014\143" +
    "\020\205\022\202\037\126\042\151\043\130\046\114\047" +
    "\150\076\153\077\246\100\235\001\001\000\002\001\001" +
    "\000\004\063\u01c5\001\001\000\044\015\u0110\025\u0108\027" +
    "\u0117\031\u010f\032\u0118\033\u010b\034\u0115\037\u010e\040\u0119" +
    "\041\u0113\042\u0109\043\u010c\044\u011a\046\u0111\066\u01c6\102" +
    "\u0112\103\u010d\001\001\000\004\064\u01eb\001\001\000\010" +
    "\016\u0122\022\u011f\064\u01c8\001\001\000\004\026\u01c9\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\063\u01cc" +
    "\001\001\000\044\015\u0110\025\u0108\027\u0117\031\u010f\032" +
    "\u0118\033\u010b\034\u0115\037\u010e\040\u0119\041\u0113\042\u0109" +
    "\043\u010c\044\u011a\046\u0111\066\u01cd\102\u0112\103\u010d\001" +
    "\001\000\004\064\u01ce\001\001\000\002\001\001\000\006" +
    "\063\u01e1\064\u01e2\001\001\000\032\014\143\017\u01d2\020" +
    "\147\037\126\042\151\043\130\046\114\047\150\060\141" +
    "\076\153\077\117\100\154\001\001\000\030\014\143\020" +
    "\205\022\202\037\126\042\151\043\130\046\114\047\150" +
    "\076\153\077\246\100\235\001\001\000\002\001\001\000" +
    "\004\063\u01d4\001\001\000\044\015\u0110\025\u0108\027\u0117" +
    "\031\u010f\032\u0118\033\u010b\034\u0115\037\u010e\040\u0119\041" +
    "\u0113\042\u0109\043\u010c\044\u011a\046\u0111\066\u01d5\102\u0112" +
    "\103\u010d\001\001\000\004\064\u01d9\001\001\000\010\016" +
    "\u0122\022\u011f\064\u01d7\001\001\000\004\026\u01d8\001\001" +
    "\000\002\001\001\000\004\026\u01da\001\001\000\002\001" +
    "\001\000\004\063\u01dc\001\001\000\044\015\u0110\025\u0108" +
    "\027\u0117\031\u010f\032\u0118\033\u010b\034\u0115\037\u010e\040" +
    "\u0119\041\u0113\042\u0109\043\u010c\044\u011a\046\u0111\066\u01dd" +
    "\102\u0112\103\u010d\001\001\000\004\064\u01de\001\001\000" +
    "\004\026\u01df\001\001\000\002\001\001\000\004\063\u01e7" +
    "\001\001\000\044\015\u0110\025\u0108\027\u0117\031\u010f\032" +
    "\u0118\033\u010b\034\u0115\037\u010e\040\u0119\041\u0113\042\u0109" +
    "\043\u010c\044\u011a\046\u0111\066\u01e4\102\u0112\103\u010d\001" +
    "\001\000\004\026\u01e3\001\001\000\002\001\001\000\004" +
    "\064\u01e5\001\001\000\004\026\u01e6\001\001\000\002\001" +
    "\001\000\044\015\u0110\025\u0108\027\u0117\031\u010f\032\u0118" +
    "\033\u010b\034\u0115\037\u010e\040\u0119\041\u0113\042\u0109\043" +
    "\u010c\044\u011a\046\u0111\066\u01e8\102\u0112\103\u010d\001\001" +
    "\000\004\064\u01e9\001\001\000\004\026\u01ea\001\001\000" +
    "\002\001\001\000\004\026\u01ec\001\001\000\002\001\001" +
    "\000\004\063\u01ee\001\001\000\044\015\u0110\025\u0108\027" +
    "\u0117\031\u010f\032\u0118\033\u010b\034\u0115\037\u010e\040\u0119" +
    "\041\u0113\042\u0109\043\u010c\044\u011a\046\u0111\066\u01ef\102" +
    "\u0112\103\u010d\001\001\000\004\064\u01f0\001\001\000\004" +
    "\026\u01f1\001\001\000\002\001\001\000\004\063\u01f9\001" +
    "\001\000\044\015\u0110\025\u0108\027\u0117\031\u010f\032\u0118" +
    "\033\u010b\034\u0115\037\u010e\040\u0119\041\u0113\042\u0109\043" +
    "\u010c\044\u011a\046\u0111\066\u01f6\102\u0112\103\u010d\001\001" +
    "\000\004\026\u01f5\001\001\000\002\001\001\000\004\064" +
    "\u01f7\001\001\000\004\026\u01f8\001\001\000\002\001\001" +
    "\000\044\015\u0110\025\u0108\027\u0117\031\u010f\032\u0118\033" +
    "\u010b\034\u0115\037\u010e\040\u0119\041\u0113\042\u0109\043\u010c" +
    "\044\u011a\046\u0111\066\u01fa\102\u0112\103\u010d\001\001\000" +
    "\004\064\u01fb\001\001\000\004\026\u01fc\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\057\u020c" +
    "\001\001\000\004\057\u0208\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\052\u0216\001\001\000\004\016\u0252\001\001\000\034" +
    "\014\143\017\u0219\020\147\037\126\042\151\043\130\046" +
    "\114\047\150\053\u0244\060\141\076\153\077\117\100\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\014" +
    "\143\017\u0219\020\147\037\126\042\151\043\130\046\114" +
    "\047\150\053\u021a\060\141\076\153\077\117\100\154\001" +
    "\001\000\032\014\143\020\205\022\202\037\126\042\151" +
    "\043\130\046\114\047\150\054\u0237\076\153\077\246\100" +
    "\235\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\054\u021e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\063\u0220\001\001\000\044\015\u0110" +
    "\025\u0108\027\u0117\031\u010f\032\u0118\033\u010b\034\u0115\037" +
    "\u010e\040\u0119\041\u0113\042\u0109\043\u010c\044\u011a\046\u0111" +
    "\066\u0221\102\u0112\103\u010d\001\001\000\004\064\u0224\001" +
    "\001\000\010\016\u0122\022\u011f\064\u0223\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\014\143\020\u022a\037" +
    "\126\042\151\043\130\046\114\047\150\076\153\001\001" +
    "\000\002\001\001\000\022\014\143\020\u0229\037\126\042" +
    "\151\043\130\046\114\047\150\076\153\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\014" +
    "\143\020\u0234\037\126\042\151\043\130\046\114\047\150" +
    "\076\153\001\001\000\002\001\001\000\022\014\143\020" +
    "\u0233\037\126\042\151\043\130\046\114\047\150\076\153" +
    "\001\001\000\002\001\001\000\004\063\u0230\001\001\000" +
    "\044\015\u0110\025\u0108\027\u0117\031\u010f\032\u0118\033\u010b" +
    "\034\u0115\037\u010e\040\u0119\041\u0113\042\u0109\043\u010c\044" +
    "\u011a\046\u0111\066\u0231\102\u0112\103\u010d\001\001\000\004" +
    "\064\u0232\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\272\001\001\000\024\014\143" +
    "\020\205\022\202\037\126\042\151\043\130\046\114\047" +
    "\150\076\153\001\001\000\002\001\001\000\004\063\u0239" +
    "\001\001\000\044\015\u0110\025\u0108\027\u0117\031\u010f\032" +
    "\u0118\033\u010b\034\u0115\037\u010e\040\u0119\041\u0113\042\u0109" +
    "\043\u010c\044\u011a\046\u0111\066\u023a\102\u0112\103\u010d\001" +
    "\001\000\004\064\u023b\001\001\000\002\001\001\000\022" +
    "\014\143\020\u0240\037\126\042\151\043\130\046\114\047" +
    "\150\076\153\001\001\000\022\014\143\020\u023f\037\126" +
    "\042\151\043\130\046\114\047\150\076\153\001\001\000" +
    "\024\014\143\020\205\022\202\037\126\042\151\043\130" +
    "\046\114\047\150\076\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\272\001\001\000\022\014\143" +
    "\020\u024f\037\126\042\151\043\130\046\114\047\150\076" +
    "\153\001\001\000\004\063\u024c\001\001\000\002\001\001" +
    "\000\004\054\u0247\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\063\u0249\001\001\000\044\015\u0110\025\u0108" +
    "\027\u0117\031\u010f\032\u0118\033\u010b\034\u0115\037\u010e\040" +
    "\u0119\041\u0113\042\u0109\043\u010c\044\u011a\046\u0111\066\u024a" +
    "\102\u0112\103\u010d\001\001\000\004\064\u024b\001\001\000" +
    "\002\001\001\000\044\015\u0110\025\u0108\027\u0117\031\u010f" +
    "\032\u0118\033\u010b\034\u0115\037\u010e\040\u0119\041\u0113\042" +
    "\u0109\043\u010c\044\u011a\046\u0111\066\u024d\102\u0112\103\u010d" +
    "\001\001\000\004\064\u024e\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\014\143\020\u0251\037\126\042\151" +
    "\043\130\046\114\047\150\076\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\014\143\020\u0259\037\126\042\151\043\130\046" +
    "\114\047\150\076\153\001\001\000\022\014\143\020\u0258" +
    "\037\126\042\151\043\130\046\114\047\150\076\153\001" +
    "\001\000\024\014\143\020\205\022\202\037\126\042\151" +
    "\043\130\046\114\047\150\076\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\014\143\020\u025b\037\126" +
    "\042\151\043\130\046\114\047\150\076\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\063\u0285\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\063\u0264\001\001" +
    "\000\004\072\u0267\001\001\000\004\063\u027e\001\001\000" +
    "\004\064\u027d\001\001\000\004\064\u027c\001\001\000\022" +
    "\014\143\020\u026a\037\126\042\151\043\130\046\114\047" +
    "\150\076\153\001\001\000\030\014\143\020\205\022\202" +
    "\037\126\042\151\043\130\046\114\047\150\063\u0275\064" +
    "\u0276\076\153\001\001\000\004\063\u026b\001\001\000\044" +
    "\015\u0110\025\u0108\027\u0117\031\u010f\032\u0118\033\u010b\034" +
    "\u0115\037\u010e\040\u0119\041\u0113\042\u0109\043\u010c\044\u011a" +
    "\046\u0111\066\u026c\102\u0112\103\u010d\001\001\000\004\070" +
    "\u0272\001\001\000\010\016\u0122\022\u011f\070\u026f\001\001" +
    "\000\002\001\001\000\004\064\u0270\001\001\000\004\072" +
    "\u0271\001\001\000\002\001\001\000\004\064\u0273\001\001" +
    "\000\004\072\u0274\001\001\000\002\001\001\000\044\015" +
    "\u0110\025\u0108\027\u0117\031\u010f\032\u0118\033\u010b\034\u0115" +
    "\037\u010e\040\u0119\041\u0113\042\u0109\043\u010c\044\u011a\046" +
    "\u0111\066\u0278\102\u0112\103\u010d\001\001\000\004\072\u0277" +
    "\001\001\000\002\001\001\000\004\070\u0279\001\001\000" +
    "\004\064\u027a\001\001\000\004\072\u027b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\015" +
    "\u0110\025\u0108\027\u0117\031\u010f\032\u0118\033\u010b\034\u0115" +
    "\037\u010e\040\u0119\041\u0113\042\u0109\043\u010c\044\u011a\046" +
    "\u0111\066\u027f\102\u0112\103\u010d\001\001\000\004\064\u0280" +
    "\001\001\000\002\001\001\000\004\063\u0282\001\001\000" +
    "\004\072\u0283\001\001\000\004\064\u0284\001\001\000\002" +
    "\001\001\000\004\072\u0286\001\001\000\004\064\u0287\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\015\063\025\052\027\074\031\061" +
    "\032\076\033\054\034\070\037\057\040\102\041\066\042" +
    "\053\043\055\044\100\046\062\067\u028f\102\065\103\056" +
    "\001\001\000\004\064\u0290\001\001\000\002\001\001\000" +
    "\012\016\u0296\055\u0292\073\u0295\074\u0293\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\u029e\001\001\000\004\063\u029b\001\001\000" +
    "\044\015\063\025\052\027\074\031\061\032\076\033\054" +
    "\034\070\037\057\040\102\041\066\042\053\043\055\044" +
    "\100\046\062\067\u029c\102\065\103\056\001\001\000\004" +
    "\064\u029d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\u02a7\001\001\000\004\063\u02a2" +
    "\001\001\000\044\015\063\025\052\027\074\031\061\032" +
    "\076\033\054\034\070\037\057\040\102\041\066\042\053" +
    "\043\055\044\100\046\062\067\u02a4\102\065\103\056\001" +
    "\001\000\010\016\u0122\022\u011f\064\u02a6\001\001\000\004" +
    "\064\u02a5\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\016\u0296\055\u02ad\073" +
    "\u0295\074\u0293\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\063\u02b0\001\001\000\044\015\063\025\052\027" +
    "\074\031\061\032\076\033\054\034\070\037\057\040\102" +
    "\041\066\042\053\043\055\044\100\046\062\067\u02b1\102" +
    "\065\103\056\001\001\000\004\064\u02b2\001\001\000\002" +
    "\001\001\000\004\063\u02b4\001\001\000\044\015\063\025" +
    "\052\027\074\031\061\032\076\033\054\034\070\037\057" +
    "\040\102\041\066\042\053\043\055\044\100\046\062\067" +
    "\u02b6\102\065\103\056\001\001\000\010\016\u0122\022\u011f" +
    "\064\u02b8\001\001\000\004\064\u02b7\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\016\u0296" +
    "\055\u02bb\073\u0295\074\u0293\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\063\u02be\001\001\000\044\015\u0110" +
    "\025\u0108\027\u0117\031\u010f\032\u0118\033\u010b\034\u0115\037" +
    "\u010e\040\u0119\041\u0113\042\u0109\043\u010c\044\u011a\046\u0111" +
    "\066\u02bf\102\u0112\103\u010d\001\001\000\004\064\u02c0\001" +
    "\001\000\002\001\001\000\004\063\u02c2\001\001\000\044" +
    "\015\u0110\025\u0108\027\u0117\031\u010f\032\u0118\033\u010b\034" +
    "\u0115\037\u010e\040\u0119\041\u0113\042\u0109\043\u010c\044\u011a" +
    "\046\u0111\066\u02c3\102\u0112\103\u010d\001\001\000\004\064" +
    "\u02c6\001\001\000\010\016\u0122\022\u011f\064\u02c5\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\014\143\017\u02cd\020\147\037\126" +
    "\042\151\043\130\046\114\047\150\060\141\076\153\077" +
    "\117\100\154\001\001\000\002\001\001\000\032\014\143" +
    "\017\u02cc\020\147\037\126\042\151\043\130\046\114\047" +
    "\150\060\141\076\153\077\117\100\154\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\016\u0296" +
    "\055\u02d3\073\u0295\074\u0293\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\063\u02d6\001\001\000\044\015\u0110" +
    "\025\u0108\027\u0117\031\u010f\032\u0118\033\u010b\034\u0115\037" +
    "\u010e\040\u0119\041\u0113\042\u0109\043\u010c\044\u011a\046\u0111" +
    "\066\u02d7\102\u0112\103\u010d\001\001\000\004\064\u02d8\001" +
    "\001\000\002\001\001\000\004\063\u02da\001\001\000\044" +
    "\015\u0110\025\u0108\027\u0117\031\u010f\032\u0118\033\u010b\034" +
    "\u0115\037\u010e\040\u0119\041\u0113\042\u0109\043\u010c\044\u011a" +
    "\046\u0111\066\u02db\102\u0112\103\u010d\001\001\000\004\064" +
    "\u02de\001\001\000\010\016\u0122\022\u011f\064\u02dd\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\063\u02f2\001" +
    "\001\000\012\016\u0296\055\u02ec\073\u0295\074\u0293\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\u02e5\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\014\143\017\343\020\147\023\u02e8\024\337\037" +
    "\126\042\151\043\130\046\114\047\150\060\141\061\344" +
    "\075\345\076\153\077\117\100\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\014\143\017\u02eb\020\147" +
    "\037\126\042\151\043\130\046\114\047\150\060\141\076" +
    "\153\077\117\100\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\063\u02ef\001\001\000" +
    "\044\015\u0110\025\u0108\027\u0117\031\u010f\032\u0118\033\u010b" +
    "\034\u0115\037\u010e\040\u0119\041\u0113\042\u0109\043\u010c\044" +
    "\u011a\046\u0111\066\u02f0\102\u0112\103\u010d\001\001\000\004" +
    "\064\u02f1\001\001\000\002\001\001\000\044\015\u0110\025" +
    "\u0108\027\u0117\031\u010f\032\u0118\033\u010b\034\u0115\037\u010e" +
    "\040\u0119\041\u0113\042\u0109\043\u010c\044\u011a\046\u0111\066" +
    "\u02f3\102\u0112\103\u010d\001\001\000\004\064\u02f4\001\001" +
    "\000\002\001\001\000\004\016\u02f6\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\u02fa" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\014" +
    "\143\017\343\020\147\023\u02fd\024\337\037\126\042\151" +
    "\043\130\046\114\047\150\060\141\061\344\075\345\076" +
    "\153\077\117\100\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\014\143\017\u0300\020\147\037\126\042" +
    "\151\043\130\046\114\047\150\060\141\076\153\077\117" +
    "\100\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\u0305\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\014\143\017" +
    "\343\020\147\023\u0308\024\337\037\126\042\151\043\130" +
    "\046\114\047\150\060\141\061\344\075\345\076\153\077" +
    "\117\100\154\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\063\u030f\001\001\000\022\010\u0310" +
    "\011\042\012\035\016\037\021\031\035\040\036\032\045" +
    "\026\001\001\000\004\065\u0311\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //codigo
    public ArrayList<ErrorLSS> listaErrores = new ArrayList<>();

    public void setAccion(String tipo, String mensaje, String accion){
        //listaErrores.add(new ErrorLSS());
    }

	private Symbol s;
	public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void syntax_error(Symbol s){
        //String message = s.toString();
        //StringBuilder m = new StringBuilder("Error: ");
        String cadena =  (String) s.value;
        int columna = s.left+1;
        int linea = s.right+1;
        
        agregarError("Sintactico",cadena,"No se esperaba un token tipo <"+s.value+">", linea, columna);
    }

	public void agregarError(String tipo, String cadena, String descripcion, int linea, int columna){
        System.out.println("Tipo: "+tipo+"\tCadena: "+cadena+", descripcion: "+descripcion+", Linea: "+linea+", Columna: "+columna);
		listaErrores.add(new ErrorLSS(linea,columna,cadena,descripcion,tipo));
    }


	public void unrecovered_syntax_error(Symbol cur_token){
        if(cur_token.toString().equals("#0")){
			//String message = s.toString();
			//StringBuilder m = new StringBuilder("Error: ");
			String cadena =  "Fin del archivo";
			int columna = cur_token.left+1;
			int linea = cur_token.right+1;
			agregarError("Sintactico",cadena,"No se pudo recuperar y seguir analizando, no se encontraron mas tokens.", linea, columna);
            
        }else{
			//String message = s.toString();
			//StringBuilder m = new StringBuilder("Error: ");
			String cadena =  (String)cur_token.value;
			int columna = cur_token.left+1;
			int linea = cur_token.right+1;
			agregarError("Sintactico",cadena,"No se pudo recuperar y seguir analizando.", linea, columna);
			
        }
        System.out.println("No se pudo recuperar y seguir analizando, no se encontraron mas tokens.");
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {


    

  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // especiales_q_retornan ::= struct_longitud 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("especiales_q_retornan",60, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // especiales_q_retornan ::= struct_sumarizar 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("especiales_q_retornan",60, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // especiales_q_retornan ::= struct_reproducir 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("especiales_q_retornan",60, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // state_continuar ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("state_continuar",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // state_continuar ::= CONTINUAR 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("state_continuar",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // struct_hacer ::= HACER error PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura hacer (", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_hacer",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // struct_hacer ::= HACER st_ind code_funcion state_continuar st_ded MIENTRAS PA_A error PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura hacer, se esperaba un <condicion>", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_hacer",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // struct_hacer ::= HACER st_ind code_funcion state_continuar st_ded error PA_A struct_operador_logico PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura hacer, se esperaba un <mientras>", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_hacer",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // struct_hacer ::= HACER error st_ded MIENTRAS PA_A struct_operador_logico PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura hacer, fallo el el bloque de codigo", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_hacer",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // struct_hacer ::= HACER st_ind error state_continuar st_ded MIENTRAS PA_A struct_operador_logico PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura hacer, fallo el el bloque de codigo", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_hacer",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // struct_hacer ::= HACER st_ind code_funcion state_continuar st_ded MIENTRAS PA_A struct_operador_logico PA_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_hacer",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // struct_mientras ::= MIENTRAS error st_ded 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura mientras", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_mientras",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // struct_mientras ::= MIENTRAS error PA_C st_ind code_funcion st_ded 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura mientras, se esperaba un una \"(condicion)\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_mientras",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // struct_mientras ::= MIENTRAS PA_A struct_operador_logico PA_C st_ind error st_ded 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura mientras, fallo el bloque de codigo", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_mientras",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // struct_mientras ::= MIENTRAS PA_A error PA_C st_ind code_funcion st_ded 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura mientras, se esperaba un una condicion", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_mientras",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // struct_mientras ::= MIENTRAS PA_A struct_operador_logico PA_C st_ind code_funcion st_ded 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_mientras",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // incremento_para ::= error MENOS_MENOS 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la asignacion de variable, se esperaba un ID", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("incremento_para",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // incremento_para ::= error MAS_MAS 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la asignacion de variable, se esperaba un ID", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("incremento_para",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // incremento_para ::= error MAS_IGUAL valor_operacion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la asignacion de variable, se esperaba un ID", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("incremento_para",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // incremento_para ::= error IGUAL valor_operacion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la asignacion de variable, se esperaba un ID", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("incremento_para",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // incremento_para ::= IDENTIFICADOR MENOS_MENOS 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("incremento_para",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // incremento_para ::= IDENTIFICADOR MAS_MAS 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("incremento_para",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // incremento_para ::= IDENTIFICADOR MAS_IGUAL valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("incremento_para",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // incremento_para ::= IDENTIFICADOR IGUAL valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("incremento_para",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // condicion_para ::= struct_operador_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion_para",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // para_asig_var ::= IDENTIFICADOR IGUAL error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la asignacion de variable, se esperaba un <valor>", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("para_asig_var",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // para_asig_var ::= IDENTIFICADOR error valor_operacion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la asignacion de variable, se esperaba un <=>", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("para_asig_var",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // para_asig_var ::= error IGUAL valor_operacion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la asignacion de variable, se esperaba un <ID>", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("para_asig_var",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // para_asig_var ::= VAR tipo_dato IDENTIFICADOR IGUAL error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la asignacion de variable, se esperaba un <valor>", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("para_asig_var",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // para_asig_var ::= VAR tipo_dato IDENTIFICADOR error valor_operacion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la asignacion de variable, se esperaba un <=>", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("para_asig_var",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // para_asig_var ::= VAR tipo_dato error IGUAL valor_operacion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la asignacion de variable, se esperaba un <ID>", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("para_asig_var",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // para_asig_var ::= error IDENTIFICADOR IGUAL valor_operacion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la asignacion de variable, se esperaba un <tipoDato>", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("para_asig_var",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // para_asig_var ::= IDENTIFICADOR IGUAL valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("para_asig_var",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // para_asig_var ::= VAR tipo_dato IDENTIFICADOR IGUAL valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("para_asig_var",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // struct_para ::= PARA PA_A para_asig_var PUNTO_COMA condicion_para PUNTO_COMA incremento_para PA_C st_ind error st_ded 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura de para, fallo el el bloque de codigo", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_para",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // struct_para ::= PARA PA_A error PA_C st_ind code_funcion st_ded 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura de para, se esperaba: \"(asignacion,condicion ,incremento)\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_para",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // struct_para ::= PARA PA_A para_asig_var PUNTO_COMA condicion_para PUNTO_COMA error PA_C st_ind code_funcion st_ded 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura de para, se esperaba un \"incremento\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_para",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // struct_para ::= PARA PA_A para_asig_var PUNTO_COMA error incremento_para PA_C st_ind code_funcion st_ded 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura de para, se esperaba una \"condicion ,\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_para",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // struct_para ::= PARA PA_A error condicion_para PUNTO_COMA incremento_para PA_C st_ind code_funcion st_ded 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura de para, se esperaba una \"asignacion de variable ,\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_para",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // struct_para ::= PARA PA_A para_asig_var PUNTO_COMA condicion_para PUNTO_COMA incremento_para PA_C st_ind code_funcion st_ded 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_para",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // caso_salir ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("caso_salir",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // caso_salir ::= SALIR 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("caso_salir",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // struct_caso ::= CASO error st_ded struct_caso 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura del caso", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_caso",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // struct_caso ::= CASO valor_operacion st_ind error caso_salir st_ded struct_caso 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura del caso, fallo en el bloque de codigo", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_caso",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // struct_caso ::= CASO error st_ind code_funcion caso_salir st_ded struct_caso 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura del caso, se esperava un valor", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_caso",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // struct_caso ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_caso",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // struct_caso ::= DEFAULT st_ind code_funcion st_ded 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_caso",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // struct_caso ::= CASO valor_operacion st_ind code_funcion caso_salir st_ded struct_caso 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_caso",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // struct_switch ::= SWITCH PA_A IDENTIFICADOR PA_C st_ind error st_ded 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura del switch, fallo en el bloque de caso", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_switch",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // struct_switch ::= SWITCH error st_ind struct_caso st_ded 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura del switch, se esperaba un (ID)", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_switch",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // struct_switch ::= SWITCH PA_A error PA_C st_ind struct_caso st_ded 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura del switch, se esperaba un ID", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_switch",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // struct_switch ::= SWITCH PA_A IDENTIFICADOR PA_C st_ind struct_caso st_ded 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_switch",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // struct_sino ::= SINO_SI error st_ded struct_sino 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura de sino si", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_sino",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // struct_sino ::= SINO_SI error PA_C st_ind code_funcion st_ded struct_sino 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura de sino si, se esperaba una \"( estructura logica)\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_sino",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // struct_sino ::= SINO_SI error st_ind code_funcion st_ded struct_sino 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura de sino si, se esperaba una \"( estructura logica)\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_sino",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // struct_sino ::= SINO_SI PA_A struct_operador_logico PA_C st_ind error st_ded struct_sino 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura de sino si, fallo en el bloque de codigo", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_sino",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // struct_sino ::= SINO_SI PA_A error PA_C st_ind code_funcion st_ded struct_sino 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura de la sentencias logica, se esperaba una estructura logica", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_sino",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // struct_sino ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_sino",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // struct_sino ::= SINO st_ind code_funcion st_ded 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_sino",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // struct_sino ::= SINO_SI PA_A struct_operador_logico PA_C st_ind code_funcion st_ded struct_sino 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_sino",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // struct_si ::= SI error st_ded struct_sino 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura de Si", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_si",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // struct_si ::= SI error PA_C st_ind code_funcion st_ded struct_sino 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura de Si, se esperaba una \"( estructura logica)\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_si",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // struct_si ::= SI error st_ind code_funcion st_ded struct_sino 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura de Si, se esperaba una \"( estructura logica)\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_si",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // struct_si ::= SI PA_A struct_operador_logico PA_C st_ind error st_ded struct_sino 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura de Si, fallo en el bloque de codigo", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_si",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // struct_si ::= SI PA_A error PA_C st_ind code_funcion st_ded struct_sino 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura de la sentencias logica, se esperaba una estructura logica", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_si",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // struct_si ::= SI PA_A struct_operador_logico PA_C st_ind code_funcion st_ded struct_sino 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_si",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // struct_principal ::= PRINCIPAL PA_A PA_C st_ind error st_ded 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura del metodo Principal, fallo en el bloque de codigo", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_principal",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // struct_principal ::= PRINCIPAL error st_ind code_metodo st_ded 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura del metodo Principal, se esperaba \"< ( ) >\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_principal",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // struct_principal ::= PRINCIPAL PA_A PA_C st_ind code_metodo st_ded 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_principal",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // tipo_orden ::= error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el tipo de orden se esperaba un: \n\"<ASCENDENTE | DESCENDENTE | PARES | IMPARES | PRIMOS>\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_orden",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // tipo_orden ::= PRIMOS 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_orden",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // tipo_orden ::= IMPARES 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_orden",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // tipo_orden ::= PARES 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_orden",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // tipo_orden ::= DESCENDENTE 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_orden",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // tipo_orden ::= ASCENDENTE 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_orden",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // notas ::= error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la nota musical se esperaba una de las notas: \n\"Do, Do#, Re, Re#, Mi, Fa, Fa#, Sol, Sol#, La, La#, Si\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // notas ::= LA_S 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // notas ::= SOL_S 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // notas ::= FA_S 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // notas ::= RE_S 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // notas ::= DO_S 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // notas ::= SI 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // notas ::= LA 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // notas ::= SOL 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // notas ::= FA 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // notas ::= MI 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // notas ::= RE 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // notas ::= DO 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // mensajes ::= mensajes error struct_operador_logico 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro de la funcion Mensaje, se esperaba un \"<+>\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mensajes",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // mensajes ::= error MAS struct_operador_logico 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro de la funcion Mensaje, se esperaba un \"<MENSAJE>\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mensajes",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // mensajes ::= struct_operador_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mensajes",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // mensajes ::= mensajes MAS struct_operador_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mensajes",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // struct_mensaje ::= MENSAJE error PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro de la funcion Mensaje, se esperaba \"(\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_mensaje",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // struct_mensaje ::= MENSAJE PA_A error PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro de la funcion Mensaje, se esperaba un \"<MENSAJE>\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_mensaje",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // struct_mensaje ::= MENSAJE PA_A PA_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_mensaje",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // struct_mensaje ::= MENSAJE PA_A mensajes PA_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_mensaje",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // struct_longitud ::= LONGITUD error PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro de la funcion Longitud, se esperaba \"(\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_longitud",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // struct_longitud ::= LONGITUD PA_A error PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro de la funcion Longitud, se esperaba un \"valor\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_longitud",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // struct_longitud ::= LONGITUD PA_A valor_operacion PA_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_longitud",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // struct_sumarizar ::= SUMARIZAR error PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro de la funcion Sumarizar, se esperaba \"(\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_sumarizar",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // struct_sumarizar ::= SUMARIZAR PA_A error PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro de la funcion Sumarizar, se esperaba un \"ID\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_sumarizar",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // struct_sumarizar ::= SUMARIZAR PA_A IDENTIFICADOR PA_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_sumarizar",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // struct_ordenar ::= ORDENAR error PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro de la funcion Ordenar, se esperaba \"(\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_ordenar",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // struct_ordenar ::= ORDENAR PA_A IDENTIFICADOR error tipo_orden PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro de la funcion Ordenar, se esperaba \",\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_ordenar",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // struct_ordenar ::= ORDENAR PA_A error PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro de la funcion Ordenar, se esperaba \"(ID , <tipoOrden>)\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_ordenar",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // struct_ordenar ::= ORDENAR PA_A IDENTIFICADOR COMA tipo_orden PA_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_ordenar",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // struct_esperar ::= ESPERAR error PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro de la funcion Esperar, se esperaba \"(\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_esperar",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // struct_esperar ::= ESPERAR PA_A error PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro de la funcion Esperar, se esperaba \"(valor , valor)\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_esperar",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // struct_esperar ::= ESPERAR PA_A valor_operacion error valor_operacion PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro de la funcion Esperar, se esperaba \",\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_esperar",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // struct_esperar ::= ESPERAR PA_A valor_operacion COMA valor_operacion PA_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_esperar",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // struct_reproducir ::= REPRODUCIR error PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro de la funcion Reproducir, se esperaba \"(\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_reproducir",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // struct_reproducir ::= REPRODUCIR PA_A notas COMA valor_operacion COMA valor_operacion error valor_operacion PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro de la funcion Reproducir, se esperaba \",\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_reproducir",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // struct_reproducir ::= REPRODUCIR PA_A notas COMA valor_operacion error valor_operacion COMA valor_operacion PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro de la funcion Reproducir, se esperaba \",\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_reproducir",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // struct_reproducir ::= REPRODUCIR PA_A notas error valor_operacion COMA valor_operacion COMA valor_operacion PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro de la funcion Reproducir, se esperaba \",\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_reproducir",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // struct_reproducir ::= REPRODUCIR PA_A error PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro de la funcion Reproducir, se esperaba \"(notas , valor , valor , valor)\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_reproducir",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // struct_reproducir ::= REPRODUCIR PA_A notas COMA valor_operacion COMA valor_operacion COMA valor_operacion PA_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_reproducir",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // code_metodo ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // code_metodo ::= struct_mensaje code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // code_metodo ::= struct_longitud code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // code_metodo ::= struct_sumarizar code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // code_metodo ::= struct_ordenar code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // code_metodo ::= struct_esperar code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // code_metodo ::= struct_reproducir code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // code_metodo ::= struct_hacer code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // code_metodo ::= struct_mientras code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // code_metodo ::= struct_para code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // code_metodo ::= struct_switch code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // code_metodo ::= struct_si code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // code_metodo ::= strunt_llamada_funcion code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // code_metodo ::= struct_asig_arreglo code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // code_metodo ::= struct_declaracion_array_f code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // code_metodo ::= struc_asig_var code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // code_metodo ::= struct_declaracion_var_f code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // code_funcion ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // code_funcion ::= RETORNAR error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				parser.agregarError("Sintactico",(String)e,"Error: se esperaba un valor para Retornar", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // code_funcion ::= RETORNAR struct_operador_logico code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // code_funcion ::= struct_mensaje code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // code_funcion ::= struct_longitud code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // code_funcion ::= struct_sumarizar code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // code_funcion ::= struct_ordenar code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // code_funcion ::= struct_esperar code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // code_funcion ::= struct_reproducir code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // code_funcion ::= struct_hacer code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // code_funcion ::= struct_mientras code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // code_funcion ::= struct_para code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // code_funcion ::= struct_switch code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // code_funcion ::= struct_si code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // code_funcion ::= strunt_llamada_funcion code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // code_funcion ::= struct_asig_arreglo code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // code_funcion ::= struct_declaracion_array_f code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // code_funcion ::= struc_asig_var code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // code_funcion ::= struct_declaracion_var_f code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // param_vacio ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("param_vacio",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // params_lleno ::= error COMA tipo_dato IDENTIFICADOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro, se esperaba un \"<tipoDato> ID,<tipoDato> ID...\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params_lleno",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // params_lleno ::= struct_parametros COMA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro, se esperaba un ID", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params_lleno",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // params_lleno ::= tipo_dato error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro, se esperaba un ID", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params_lleno",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // params_lleno ::= tipo_dato IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params_lleno",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // params_lleno ::= struct_parametros COMA tipo_dato IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params_lleno",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // struct_parametros ::= param_vacio 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_parametros",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // struct_parametros ::= params_lleno 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_parametros",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // struct_procedimiento ::= KEEP IDENTIFICADOR PA_A struct_parametros PA_C st_ind error st_ded 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura del metodo "+a+", fallo en el bloque de codigo de la metodo", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_procedimiento",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // struct_procedimiento ::= KEEP IDENTIFICADOR PA_A error PA_C st_ind code_metodo st_ded 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error el los parametros del metodo "+a, eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_procedimiento",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // struct_procedimiento ::= IDENTIFICADOR PA_A struct_parametros PA_C st_ind error st_ded 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura del metodo "+a+", fallo en el bloque de codigo de la metodo", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_procedimiento",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // struct_procedimiento ::= IDENTIFICADOR PA_A error PA_C st_ind code_metodo st_ded 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error el los parametros del metodo "+a, eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_procedimiento",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // struct_procedimiento ::= KEEP IDENTIFICADOR PA_A struct_parametros PA_C st_ind code_metodo st_ded 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_procedimiento",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // struct_procedimiento ::= IDENTIFICADOR PA_A struct_parametros PA_C st_ind code_metodo st_ded 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_procedimiento",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // struct_funcion ::= KEEP tipo_dato IDENTIFICADOR PA_A struct_parametros PA_C st_ind error st_ded 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura de la funcion "+a+", fallo en el bloque de codigo de la funcion", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_funcion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // struct_funcion ::= tipo_dato IDENTIFICADOR PA_A struct_parametros PA_C st_ind error st_ded 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura de la funcion "+a+", fallo en el bloque de codigo de la funcion", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_funcion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // struct_funcion ::= error PA_C st_ind code_funcion st_ded 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura de la funcion, se esperaba un \"<tipoDato> ID (<parametros>)\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_funcion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // struct_funcion ::= KEEP tipo_dato IDENTIFICADOR PA_A error PA_C st_ind code_funcion st_ded 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error el los parametros en la funcion "+a, eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_funcion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // struct_funcion ::= tipo_dato IDENTIFICADOR PA_A error PA_C st_ind code_funcion st_ded 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error el los parametros en la funcion "+a, eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_funcion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // struct_funcion ::= error PA_A struct_parametros PA_C st_ind code_funcion st_ded 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura de la funcion, se esperaba un \"<tipoDato> ID\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_funcion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // struct_funcion ::= KEEP tipo_dato IDENTIFICADOR PA_A struct_parametros PA_C st_ind code_funcion st_ded 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_funcion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // struct_funcion ::= tipo_dato IDENTIFICADOR PA_A struct_parametros PA_C st_ind code_funcion st_ded 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_funcion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // struct_asig_arreglo ::= error dim_arreglo IGUAL tipo_valor_op_logico 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la asignacion de arreglo, se esperaba un ID", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_asig_arreglo",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // struct_asig_arreglo ::= IDENTIFICADOR error IGUAL tipo_valor_op_logico 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la asignacion de arreglo, se esperaba el valor de la dimension [num]...", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_asig_arreglo",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // struct_asig_arreglo ::= IDENTIFICADOR dim_arreglo error tipo_valor_op_logico 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la asignacion de arreglo, se esperaba un \"=\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_asig_arreglo",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // struct_asig_arreglo ::= IDENTIFICADOR dim_arreglo IGUAL tipo_valor_op_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_asig_arreglo",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // tipo_valor_op_logico ::= struct_operador_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_valor_op_logico",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // valores_array ::= valores_array error tipo_valor_op_logico 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el valor de asignacion del arreglo, se esperaba una coma \",\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valores_array",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // valores_array ::= error COMA tipo_valor_op_logico 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el valor de asignacion del arreglo, se esperaba un valor", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valores_array",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // valores_array ::= tipo_valor_op_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valores_array",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // valores_array ::= valores_array COMA tipo_valor_op_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valores_array",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // valores_array_mas_dim ::= error LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el valor de asignacion del arreglo", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valores_array_mas_dim",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // valores_array_mas_dim ::= error LLAVE_A valores_array_mas_dim LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el valor de asignacion del arreglo", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valores_array_mas_dim",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // valores_array_mas_dim ::= error LLAVE_A valores_array LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el valor de asignacion del arreglo", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valores_array_mas_dim",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // valores_array_mas_dim ::= valores_array_mas_dim COMA LLAVE_A valores_array LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valores_array_mas_dim",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // valores_array_mas_dim ::= LLAVE_A valores_array LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valores_array_mas_dim",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // valores_array_mas_dim ::= valores_array_mas_dim COMA LLAVE_A valores_array_mas_dim LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valores_array_mas_dim",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // valores_array_mas_dim ::= LLAVE_A valores_array_mas_dim LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valores_array_mas_dim",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // valor_arreglo ::= valores_array 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor_arreglo",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // valor_arreglo ::= valores_array_mas_dim 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor_arreglo",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // dim_arreglo ::= dim_arreglo CORCHETE_A error CORCHETE_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el valor de asignacion de la dimenasion arreglo", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("dim_arreglo",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // dim_arreglo ::= CORCHETE_A error CORCHETE_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el valor de asignacion de la dimenasion arreglo", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("dim_arreglo",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // dim_arreglo ::= CORCHETE_A valor_operacion CORCHETE_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("dim_arreglo",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // dim_arreglo ::= dim_arreglo CORCHETE_A valor_operacion CORCHETE_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("dim_arreglo",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // struct_declaracion_array_f ::= error tipo_dato ARREGLO IDENTIFICADOR dim_arreglo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		parser.agregarError("Sintactico",(String)e,"Se esperaba el Simbolo ID o fallo en la declaracion", eright+1, eleft+1);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array_f",65, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // struct_declaracion_array_f ::= error tipo_dato ARREGLO IDENTIFICADOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		parser.agregarError("Sintactico",(String)e,"Se esperaba el Simbolo ID o fallo en la declaracion", eright+1, eleft+1);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array_f",65, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // struct_declaracion_array_f ::= error tipo_dato ARREGLO IDENTIFICADOR dim_arreglo IGUAL LLAVE_A valor_arreglo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).value;
		parser.agregarError("Sintactico",(String)e,"Se esperaba el Simbolo ID o fallo en la declaracion", eright+1, eleft+1);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array_f",65, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // struct_declaracion_array_f ::= VAR tipo_dato ARREGLO IDENTIFICADOR dim_arreglo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array_f",65, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // struct_declaracion_array_f ::= VAR tipo_dato ARREGLO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array_f",65, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // struct_declaracion_array_f ::= VAR tipo_dato ARREGLO IDENTIFICADOR dim_arreglo IGUAL LLAVE_A valor_arreglo LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array_f",65, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // struct_declaracion_array_f ::= struct_declaracion_array_f COMA IDENTIFICADOR dim_arreglo IGUAL LLAVE_A valor_arreglo LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array_f",65, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // struct_declaracion_array_f ::= struct_declaracion_array_f COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array_f",65, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // struct_declaracion_array_f ::= struct_declaracion_array_f COMA IDENTIFICADOR dim_arreglo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array_f",65, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // struct_declaracion_array ::= error tipo_dato ARREGLO IDENTIFICADOR dim_arreglo 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		parser.agregarError("Sintactico",(String)e,"Se esperaba el Simbolo ID o fallo en la declaracion", eright+1, eleft+1);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // struct_declaracion_array ::= error tipo_dato ARREGLO IDENTIFICADOR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		parser.agregarError("Sintactico",(String)e,"Se esperaba el Simbolo ID o fallo en la declaracion", eright+1, eleft+1);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // struct_declaracion_array ::= error tipo_dato ARREGLO IDENTIFICADOR dim_arreglo IGUAL LLAVE_A valor_arreglo LLAVE_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).value;
		parser.agregarError("Sintactico",(String)e,"Se esperaba el Simbolo ID o fallo en la declaracion", eright+1, eleft+1);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // struct_declaracion_array ::= keep_state VAR tipo_dato ARREGLO IDENTIFICADOR dim_arreglo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // struct_declaracion_array ::= keep_state VAR tipo_dato ARREGLO IDENTIFICADOR 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // struct_declaracion_array ::= keep_state VAR tipo_dato ARREGLO IDENTIFICADOR dim_arreglo IGUAL LLAVE_A valor_arreglo LLAVE_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // struct_declaracion_array ::= struct_declaracion_array COMA IDENTIFICADOR dim_arreglo IGUAL LLAVE_A valor_arreglo LLAVE_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // struct_declaracion_array ::= struct_declaracion_array COMA IDENTIFICADOR 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // struct_declaracion_array ::= struct_declaracion_array COMA IDENTIFICADOR dim_arreglo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // struc_asig_var ::= error MENOS_MENOS 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la asignacion de variable, se esperaba un ID", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struc_asig_var",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // struc_asig_var ::= error MAS_MAS 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la asignacion de variable, se esperaba un ID", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struc_asig_var",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // struc_asig_var ::= error MAS_IGUAL struct_operador_logico 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la asignacion de variable, se esperaba un ID", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struc_asig_var",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // struc_asig_var ::= error IGUAL struct_operador_logico 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la asignacion de variable, se esperaba un ID", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struc_asig_var",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // struc_asig_var ::= IDENTIFICADOR error NT$0 struct_operador_logico 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struc_asig_var",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$0 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

				parser.agregarError("Sintactico",(String)e,"Error en la asignacion de variable, se esperaba un ID", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$0",66, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // struc_asig_var ::= IDENTIFICADOR MENOS_MENOS 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struc_asig_var",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // struc_asig_var ::= IDENTIFICADOR MAS_MAS 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struc_asig_var",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // struc_asig_var ::= IDENTIFICADOR MAS_IGUAL struct_operador_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struc_asig_var",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // struc_asig_var ::= IDENTIFICADOR IGUAL struct_operador_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struc_asig_var",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // valor_operacion ::= PA_A error PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error de la operacion, se esperaba un valor, u operacion", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // valor_operacion ::= error valor_operacion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error de la operacion, se esperaba s(+,-,*,/,%,^)", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // valor_operacion ::= valor 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // valor_operacion ::= PA_A valor_operacion PA_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // valor_operacion ::= valor_operacion POTENCIA valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // valor_operacion ::= valor_operacion MODULO valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // valor_operacion ::= valor_operacion DIVISION valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // valor_operacion ::= valor_operacion POR valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // valor_operacion ::= valor_operacion MENOS valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // valor_operacion ::= valor_operacion MAS valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // state_op_racional ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("state_op_racional",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // state_op_racional ::= MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("state_op_racional",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // state_op_racional ::= MENOR_Q 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("state_op_racional",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // state_op_racional ::= MAYOR_Q 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("state_op_racional",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // state_op_racional ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("state_op_racional",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // state_op_racional ::= IGUAL_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("state_op_racional",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // struct_operador_relacional ::= error state_op_racional 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                parser.agregarError("Sintactico",(String)e,"Error en la estrucutra racional se esperaba un valor para comparar", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // struct_operador_relacional ::= state_op_racional error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                parser.agregarError("Sintactico",(String)e,"Error en la estrucutra racional se esperaba un valor para comparar", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // struct_operador_relacional ::= PA_A struct_operador_relacional PA_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // struct_operador_relacional ::= IS_NULL struct_operador_relacional 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // struct_operador_relacional ::= IS_NULL valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // struct_operador_relacional ::= valor_operacion MENOR_IGUAL valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // struct_operador_relacional ::= valor_operacion MAYOR_IGUAL valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // struct_operador_relacional ::= valor_operacion MENOR_Q valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // struct_operador_relacional ::= valor_operacion MAYOR_Q valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // struct_operador_relacional ::= valor_operacion DIFERENTE valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // struct_operador_relacional ::= valor_operacion IGUAL_IGUAL valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // state_op_logicos ::= NAND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("state_op_logicos",61, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // state_op_logicos ::= AND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("state_op_logicos",61, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // state_op_logicos ::= XOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("state_op_logicos",61, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // state_op_logicos ::= NOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("state_op_logicos",61, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // state_op_logicos ::= OR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("state_op_logicos",61, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // struct_operador_logico ::= NOT error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                parser.agregarError("Sintactico",(String)e,"Error en la estrucutra logica se esperaba un valor booleano para el NOT", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // struct_operador_logico ::= state_op_logicos error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                parser.agregarError("Sintactico",(String)e,"Error en la estrucutra logica se esperaba un valor booleano", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // struct_operador_logico ::= error state_op_logicos 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                parser.agregarError("Sintactico",(String)e,"Error en la estrucutra logica se esperaba un valor booleano", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // struct_operador_logico ::= valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // struct_operador_logico ::= struct_operador_relacional 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // struct_operador_logico ::= NOT PA_A struct_operador_logico PA_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // struct_operador_logico ::= struct_operador_logico NAND struct_operador_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // struct_operador_logico ::= struct_operador_logico AND struct_operador_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // struct_operador_logico ::= struct_operador_logico XOR struct_operador_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // struct_operador_logico ::= struct_operador_logico NOR struct_operador_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // struct_operador_logico ::= struct_operador_logico OR struct_operador_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // tipo_dato ::= error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                parser.agregarError("Sintactico",(String)e,"Se esperaba un tipo de variable o un keep", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // tipo_dato ::= BOOLEAN 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // tipo_dato ::= CADENA_RSV 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // tipo_dato ::= CARACTER_RSV 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // tipo_dato ::= ENTERO 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // tipo_dato ::= DOBLE 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // struct_llamada_arreglo ::= error dim_arreglo 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la llamada del arreglo", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_llamada_arreglo",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // struct_llamada_arreglo ::= IDENTIFICADOR dim_arreglo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_llamada_arreglo",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // state_params ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("state_params",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // state_params ::= parametros 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("state_params",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // parametros ::= valor_operacion error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en los parametros", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametros",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // parametros ::= error COMA valor_operacion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en los parametros", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametros",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parametros ::= valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametros",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parametros ::= parametros COMA valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametros",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // strunt_llamada_funcion ::= IDENTIFICADOR PA_A error PA_C 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en los parametros de la funcion o metodo: "+a, eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("strunt_llamada_funcion",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // strunt_llamada_funcion ::= IDENTIFICADOR PA_A state_params PA_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("strunt_llamada_funcion",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // valor ::= FALSE 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // valor ::= TRUE 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // valor ::= CARACTER 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // valor ::= CADENA 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // valor ::= DECIMAL 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // valor ::= NUMERO 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // valor ::= especiales_q_retornan 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // valor ::= struct_llamada_arreglo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // valor ::= strunt_llamada_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // valor ::= IDENTIFICADOR 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // keep_state ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("keep_state",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // keep_state ::= KEEP 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("keep_state",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // struct_declaracion_var_f ::= error tipo_dato IDENTIFICADOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
            	parser.agregarError("Sintactico",(String)e,"Se esperaba el Simbolo var", eright+1, eleft+1); 
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var_f",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // struct_declaracion_var_f ::= error tipo_dato IDENTIFICADOR IGUAL struct_operador_logico 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		
				parser.agregarError("Sintactico",(String)e,"Se esperaba el Simbolo var", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var_f",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // struct_declaracion_var_f ::= struct_declaracion_var_f COMA error struct_operador_logico 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Se esperaba el Simbolo ID o fallo en la declaracion", eright+1, eleft+1);
               // System.out.println("Err: "+(eright+1)+", Col: "+(eleft+1)+", Token: "+e+", Descript: "+"Error de declaracion de variable");
                //parser.listaErrores.add(new ErrorLSS(eright+1,eleft+1,(String) e,"Error de declaracion de variable"));
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var_f",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // struct_declaracion_var_f ::= VAR tipo_dato IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var_f",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // struct_declaracion_var_f ::= VAR tipo_dato IDENTIFICADOR IGUAL struct_operador_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var_f",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // struct_declaracion_var_f ::= struct_declaracion_var_f COMA IDENTIFICADOR IGUAL struct_operador_logico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var_f",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // struct_declaracion_var_f ::= struct_declaracion_var_f COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var_f",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // struct_declaracion_var ::= error tipo_dato IDENTIFICADOR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
            	parser.agregarError("Sintactico",(String)e,"Se esperaba el Simbolo var", eright+1, eleft+1); 
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // struct_declaracion_var ::= error tipo_dato IDENTIFICADOR IGUAL struct_operador_logico 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		
				parser.agregarError("Sintactico",(String)e,"Se esperaba el Simbolo var", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // struct_declaracion_var ::= struct_declaracion_var COMA error struct_operador_logico 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Se esperaba el Simbolo ID o fallo en la declaracion", eright+1, eleft+1);
               // System.out.println("Err: "+(eright+1)+", Col: "+(eleft+1)+", Token: "+e+", Descript: "+"Error de declaracion de variable");
                //parser.listaErrores.add(new ErrorLSS(eright+1,eleft+1,(String) e,"Error de declaracion de variable"));
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // struct_declaracion_var ::= keep_state VAR tipo_dato IDENTIFICADOR 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // struct_declaracion_var ::= keep_state VAR tipo_dato IDENTIFICADOR IGUAL struct_operador_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // struct_declaracion_var ::= struct_declaracion_var COMA IDENTIFICADOR IGUAL struct_operador_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // struct_declaracion_var ::= struct_declaracion_var COMA IDENTIFICADOR 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // struc_code ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struc_code",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // struc_code ::= struct_principal struc_code 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struc_code",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // struc_code ::= struct_procedimiento struc_code 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struc_code",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // struc_code ::= struct_funcion struc_code 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struc_code",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // struc_code ::= struct_declaracion_array struc_code 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struc_code",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // struc_code ::= struct_declaracion_var struc_code 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struc_code",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // struct_extiende ::= error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en las Extensiones", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_extiende",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // struct_extiende ::= EXTIENDE IDENTIFICADOR 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_extiende",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // struct_extiende ::= struct_extiende COMA IDENTIFICADOR 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_extiende",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // extiende_state ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("extiende_state",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // extiende_state ::= struct_extiende 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("extiende_state",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // struct_pista ::= PISTA error extiende_state st_ind struc_code st_final 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en nombrar Pista", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_pista",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // struct_pista ::= PISTA IDENTIFICADOR extiende_state st_ind struc_code st_final 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_pista",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // codigo ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigo ::= struct_pista codigo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // st_final ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("st_final",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // st_final ::= DEDENT 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("st_final",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // st_ded ::= DEDENT 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("st_ded",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // st_ind ::= INDENT 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("st_ind",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // blanco ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("blanco",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // blanco ::= INDENT blanco DEDENT blanco 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("blanco",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= blanco codigo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

