
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Aug 24 00:02:27 CST 2021
//----------------------------------------------------

package backend.analizador;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.Stack;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Aug 24 00:02:27 CST 2021
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\315\000\002\002\004\000\002\002\004\000\002\003" +
    "\006\000\002\003\002\000\002\063\003\000\002\064\003" +
    "\000\002\065\003\000\002\065\002\000\002\004\004\000" +
    "\002\004\002\000\002\005\010\000\002\007\003\000\002" +
    "\007\002\000\002\006\005\000\002\006\004\000\002\010" +
    "\004\000\002\010\004\000\002\010\004\000\002\010\004" +
    "\000\002\010\004\000\002\010\002\000\002\011\005\000" +
    "\002\011\007\000\002\011\010\000\002\011\006\000\002" +
    "\011\006\000\002\011\007\000\002\011\005\000\002\012" +
    "\003\000\002\012\002\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\046\006\000\002\050\005\000\002\050\003\000\002" +
    "\051\003\000\002\051\002\000\002\047\004\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\006\000\002\017\003\000\002\017" +
    "\003\000\002\060\005\000\002\060\005\000\002\060\005" +
    "\000\002\060\005\000\002\060\005\000\002\060\005\000" +
    "\002\060\004\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\003\000\002\015\005" +
    "\000\002\015\005\000\002\015\004\000\002\015\004\000" +
    "\002\021\006\000\002\021\005\000\002\021\012\000\002" +
    "\021\014\000\002\021\007\000\002\021\010\000\002\021" +
    "\013\000\002\021\006\000\002\021\007\000\002\022\006" +
    "\000\002\022\005\000\002\023\003\000\002\023\003\000" +
    "\002\075\005\000\002\075\007\000\002\075\005\000\002" +
    "\075\007\000\002\024\005\000\002\024\003\000\002\061" +
    "\003\000\002\031\006\000\002\035\012\000\002\035\013" +
    "\000\002\035\003\000\002\036\011\000\002\036\012\000" +
    "\002\055\003\000\002\055\003\000\002\073\006\000\002" +
    "\073\004\000\002\074\002\000\002\066\004\000\002\066" +
    "\004\000\002\066\004\000\002\066\004\000\002\066\004" +
    "\000\002\066\004\000\002\066\004\000\002\066\004\000" +
    "\002\066\004\000\002\066\004\000\002\066\004\000\002" +
    "\066\004\000\002\066\004\000\002\066\004\000\002\066" +
    "\004\000\002\066\004\000\002\066\005\000\002\066\002" +
    "\000\002\067\004\000\002\067\004\000\002\067\004\000" +
    "\002\067\004\000\002\067\004\000\002\067\004\000\002" +
    "\067\004\000\002\067\004\000\002\067\004\000\002\067" +
    "\004\000\002\067\004\000\002\067\004\000\002\067\004" +
    "\000\002\067\004\000\002\067\004\000\002\067\004\000" +
    "\002\067\002\000\002\037\014\000\002\040\010\000\002" +
    "\041\010\000\002\042\006\000\002\043\006\000\002\044" +
    "\006\000\002\044\005\000\002\062\005\000\002\062\003" +
    "\000\002\056\003\000\002\056\003\000\002\056\003\000" +
    "\002\056\003\000\002\056\003\000\002\056\003\000\002" +
    "\056\003\000\002\056\003\000\002\056\003\000\002\056" +
    "\003\000\002\056\003\000\002\056\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
    "\002\057\003\000\002\045\010\000\002\025\012\000\002" +
    "\026\012\000\002\026\006\000\002\026\002\000\002\027" +
    "\011\000\002\072\011\000\002\072\006\000\002\072\002" +
    "\000\002\070\003\000\002\070\002\000\002\032\015\000" +
    "\002\052\007\000\002\052\005\000\002\053\003\000\002" +
    "\054\005\000\002\054\005\000\002\054\004\000\002\054" +
    "\004\000\002\033\011\000\002\034\013\000\002\071\003" +
    "\000\002\071\002\000\002\076\003\000\002\076\003\000" +
    "\002\076\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01af\000\010\002\ufffe\004\ufffe\130\006\001\002\000" +
    "\006\002\ufff8\004\015\001\002\000\004\002\012\001\002" +
    "\000\006\130\006\131\ufffe\001\002\000\004\131\010\001" +
    "\002\000\012\002\ufffe\004\ufffe\130\006\131\ufffe\001\002" +
    "\000\010\002\uffff\004\uffff\131\uffff\001\002\000\004\002" +
    "\001\001\002\000\006\002\ufff8\004\015\001\002\000\004" +
    "\002\000\001\002\000\004\005\016\001\002\000\006\006" +
    "\020\130\ufff5\001\002\000\006\007\u01af\130\ufff6\001\002" +
    "\000\004\005\u01ae\001\002\000\004\130\023\001\002\000" +
    "\036\002\uffed\003\040\004\uffed\005\041\011\043\012\036" +
    "\013\032\014\026\015\025\041\024\042\uffe4\076\037\113" +
    "\034\131\uffed\001\002\000\074\002\ufffd\003\ufffd\004\ufffd" +
    "\005\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\041" +
    "\ufffd\042\ufffd\062\ufffd\066\ufffd\067\ufffd\070\ufffd\071\ufffd" +
    "\072\ufffd\073\ufffd\074\ufffd\075\ufffd\076\ufffd\100\ufffd\101" +
    "\ufffd\102\ufffd\110\ufffd\111\ufffd\112\ufffd\113\ufffd\131\ufffd" +
    "\001\002\000\022\003\047\005\u01a0\011\043\012\036\013" +
    "\032\014\026\015\025\042\uffe5\001\002\000\006\005\uffc8" +
    "\055\uffc8\001\002\000\006\005\uffc9\055\uffc9\001\002\000" +
    "\040\002\uffed\003\040\004\uffed\005\041\007\u0107\011\043" +
    "\012\036\013\032\014\026\015\025\041\024\042\uffe4\076" +
    "\037\113\034\131\uffed\001\002\000\004\005\u0197\001\002" +
    "\000\010\002\ufffa\004\ufffa\131\u0196\001\002\000\006\005" +
    "\uffc7\055\uffc7\001\002\000\036\002\uffed\003\040\004\uffed" +
    "\005\041\011\043\012\036\013\032\014\026\015\025\041" +
    "\024\042\uffe4\076\037\113\034\131\uffed\001\002\000\004" +
    "\064\u018f\001\002\000\040\002\uffed\003\040\004\uffed\005" +
    "\041\007\373\011\043\012\036\013\032\014\026\015\025" +
    "\041\024\042\uffe4\076\037\113\034\131\uffed\001\002\000" +
    "\006\005\uffcb\055\uffcb\001\002\000\036\002\uff93\003\uff93" +
    "\004\uff93\005\uff93\011\uff93\012\uff93\013\uff93\014\uff93\015" +
    "\uff93\041\uff93\042\uff93\076\uff93\113\uff93\131\uff93\001\002" +
    "\000\020\003\047\005\uffc6\011\043\012\036\013\032\014" +
    "\026\015\025\001\002\000\004\064\255\001\002\000\036" +
    "\002\uffed\003\040\004\uffed\005\041\011\043\012\036\013" +
    "\032\014\026\015\025\041\024\042\uffe4\076\037\113\034" +
    "\131\uffed\001\002\000\006\005\uffca\055\uffca\001\002\000" +
    "\036\002\uffed\003\040\004\uffed\005\041\011\043\012\036" +
    "\013\032\014\026\015\025\041\024\042\uffe4\076\037\113" +
    "\034\131\uffed\001\002\000\004\042\046\001\002\000\016" +
    "\003\047\011\043\012\036\013\032\014\026\015\025\001" +
    "\002\000\006\005\uffc6\055\uffc6\001\002\000\006\005\051" +
    "\055\052\001\002\000\074\002\uffe9\003\uffe9\004\uffe9\005" +
    "\uffe9\007\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9" +
    "\041\uffe9\042\uffe9\043\251\062\uffe9\066\uffe9\070\uffe9\072" +
    "\uffe9\073\uffe9\074\uffe9\075\uffe9\076\uffe9\100\uffe9\101\uffe9" +
    "\102\uffe9\110\uffe9\111\uffe9\112\uffe9\113\uffe9\131\uffe9\001" +
    "\002\000\004\005\053\001\002\000\074\002\uffa6\003\uffa6" +
    "\004\uffa6\005\uffa6\007\uffa6\011\uffa6\012\uffa6\013\uffa6\014" +
    "\uffa6\015\uffa6\041\uffa6\042\uffa6\056\055\062\uffa6\066\uffa6" +
    "\070\uffa6\072\uffa6\073\uffa6\074\uffa6\075\uffa6\076\uffa6\100" +
    "\uffa6\101\uffa6\102\uffa6\110\uffa6\111\uffa6\112\uffa6\113\uffa6" +
    "\131\uffa6\001\002\000\076\002\uffa5\003\uffa5\004\uffa5\005" +
    "\uffa5\007\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5" +
    "\041\uffa5\042\uffa5\043\166\056\136\062\uffa5\066\uffa5\070" +
    "\uffa5\072\uffa5\073\uffa5\074\uffa5\075\uffa5\076\uffa5\100\uffa5" +
    "\101\uffa5\102\uffa5\110\uffa5\111\uffa5\112\uffa5\113\uffa5\131" +
    "\uffa5\001\002\000\030\005\073\044\071\045\060\046\056" +
    "\047\064\050\070\051\067\064\075\100\072\110\074\111" +
    "\076\001\002\000\146\002\uffd5\003\uffd5\004\uffd5\005\uffd5" +
    "\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015" +
    "\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5" +
    "\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\033\uffd5\034" +
    "\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5" +
    "\057\uffd5\061\uffd5\062\uffd5\065\uffd5\066\uffd5\070\uffd5\072" +
    "\uffd5\073\uffd5\074\uffd5\075\uffd5\076\uffd5\100\uffd5\101\uffd5" +
    "\102\uffd5\110\uffd5\111\uffd5\112\uffd5\113\uffd5\130\uffd5\131" +
    "\uffd5\001\002\000\146\002\uff36\003\uff36\004\uff36\005\uff36" +
    "\007\uff36\010\uff36\011\uff36\012\uff36\013\uff36\014\uff36\015" +
    "\uff36\016\uff36\017\uff36\020\uff36\021\uff36\022\uff36\023\uff36" +
    "\025\uff36\026\uff36\027\uff36\030\uff36\031\uff36\033\uff36\034" +
    "\uff36\035\uff36\036\uff36\037\uff36\040\uff36\041\uff36\042\uff36" +
    "\057\uff36\061\uff36\062\uff36\065\uff36\066\uff36\070\uff36\072" +
    "\uff36\073\uff36\074\uff36\075\uff36\076\uff36\100\uff36\101\uff36" +
    "\102\uff36\110\uff36\111\uff36\112\uff36\113\uff36\130\uff36\131" +
    "\uff36\001\002\000\146\002\uffd6\003\uffd6\004\uffd6\005\uffd6" +
    "\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015" +
    "\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6" +
    "\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\033\uffd6\034" +
    "\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6" +
    "\057\uffd6\061\uffd6\062\uffd6\065\uffd6\066\uffd6\070\uffd6\072" +
    "\uffd6\073\uffd6\074\uffd6\075\uffd6\076\uffd6\100\uffd6\101\uffd6" +
    "\102\uffd6\110\uffd6\111\uffd6\112\uffd6\113\uffd6\130\uffd6\131" +
    "\uffd6\001\002\000\146\002\uff35\003\uff35\004\uff35\005\uff35" +
    "\007\uff35\010\uff35\011\uff35\012\uff35\013\uff35\014\uff35\015" +
    "\uff35\016\uff35\017\uff35\020\uff35\021\uff35\022\uff35\023\uff35" +
    "\025\uff35\026\uff35\027\uff35\030\uff35\031\uff35\033\uff35\034" +
    "\uff35\035\uff35\036\uff35\037\uff35\040\uff35\041\uff35\042\uff35" +
    "\057\uff35\061\uff35\062\uff35\065\uff35\066\uff35\070\uff35\072" +
    "\uff35\073\uff35\074\uff35\075\uff35\076\uff35\100\uff35\101\uff35" +
    "\102\uff35\110\uff35\111\uff35\112\uff35\113\uff35\130\uff35\131" +
    "\uff35\001\002\000\146\002\uff37\003\uff37\004\uff37\005\uff37" +
    "\007\uff37\010\uff37\011\uff37\012\uff37\013\uff37\014\uff37\015" +
    "\uff37\016\uff37\017\uff37\020\uff37\021\uff37\022\uff37\023\uff37" +
    "\025\uff37\026\uff37\027\uff37\030\uff37\031\uff37\033\uff37\034" +
    "\uff37\035\uff37\036\uff37\037\uff37\040\uff37\041\uff37\042\uff37" +
    "\057\uff37\061\uff37\062\uff37\065\uff37\066\uff37\070\uff37\072" +
    "\uff37\073\uff37\074\uff37\075\uff37\076\uff37\100\uff37\101\uff37" +
    "\102\uff37\110\uff37\111\uff37\112\uff37\113\uff37\130\uff37\131" +
    "\uff37\001\002\000\146\002\uffd8\003\uffd8\004\uffd8\005\uffd8" +
    "\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8" +
    "\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\033\uffd8\034" +
    "\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8" +
    "\057\uffd8\061\uffd8\062\uffd8\065\uffd8\066\uffd8\070\uffd8\072" +
    "\uffd8\073\uffd8\074\uffd8\075\uffd8\076\uffd8\100\uffd8\101\uffd8" +
    "\102\uffd8\110\uffd8\111\uffd8\112\uffd8\113\uffd8\130\uffd8\131" +
    "\uffd8\001\002\000\146\002\uffd3\003\uffd3\004\uffd3\005\uffd3" +
    "\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015" +
    "\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3" +
    "\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\033\uffd3\034" +
    "\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3" +
    "\057\uffd3\061\uffd3\062\uffd3\065\uffd3\066\uffd3\070\uffd3\072" +
    "\uffd3\073\uffd3\074\uffd3\075\uffd3\076\uffd3\100\uffd3\101\uffd3" +
    "\102\uffd3\110\uffd3\111\uffd3\112\uffd3\113\uffd3\130\uffd3\131" +
    "\uffd3\001\002\000\146\002\uffaf\003\uffaf\004\uffaf\005\uffaf" +
    "\007\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015" +
    "\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf" +
    "\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\033\uffaf\034" +
    "\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf" +
    "\057\uffaf\061\uffaf\062\uffaf\065\uffaf\066\uffaf\070\uffaf\072" +
    "\uffaf\073\uffaf\074\uffaf\075\uffaf\076\uffaf\100\uffaf\101\uffaf" +
    "\102\uffaf\110\uffaf\111\uffaf\112\uffaf\113\uffaf\130\uffaf\131" +
    "\uffaf\001\002\000\146\002\uffda\003\uffda\004\uffda\005\uffda" +
    "\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015" +
    "\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda" +
    "\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\033\uffda\034" +
    "\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda" +
    "\057\uffda\061\uffda\062\uffda\065\uffda\066\uffda\070\uffda\072" +
    "\uffda\073\uffda\074\uffda\075\uffda\076\uffda\100\uffda\101\uffda" +
    "\102\uffda\110\uffda\111\uffda\112\uffda\113\uffda\130\uffda\131" +
    "\uffda\001\002\000\146\002\uffd4\003\uffd4\004\uffd4\005\uffd4" +
    "\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015" +
    "\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4" +
    "\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\033\uffd4\034" +
    "\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4" +
    "\057\uffd4\061\uffd4\062\uffd4\065\uffd4\066\uffd4\070\uffd4\072" +
    "\uffd4\073\uffd4\074\uffd4\075\uffd4\076\uffd4\100\uffd4\101\uffd4" +
    "\102\uffd4\110\uffd4\111\uffd4\112\uffd4\113\uffd4\130\uffd4\131" +
    "\uffd4\001\002\000\146\002\uffd2\003\uffd2\004\uffd2\005\uffd2" +
    "\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015" +
    "\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2" +
    "\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\033\uffd2\034" +
    "\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2" +
    "\057\uffd2\061\uffd2\062\uffd2\065\uffd2\066\uffd2\070\uffd2\072" +
    "\uffd2\073\uffd2\074\uffd2\075\uffd2\076\uffd2\100\uffd2\101\uffd2" +
    "\102\uffd2\110\uffd2\111\uffd2\112\uffd2\113\uffd2\130\uffd2\131" +
    "\uffd2\001\002\000\146\002\uffd7\003\uffd7\004\uffd7\005\uffd7" +
    "\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015" +
    "\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7" +
    "\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\033\uffd7\034" +
    "\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7" +
    "\057\uffd7\061\uffd7\062\uffd7\065\uffd7\066\uffd7\070\uffd7\072" +
    "\uffd7\073\uffd7\074\uffd7\075\uffd7\076\uffd7\100\uffd7\101\uffd7" +
    "\102\uffd7\110\uffd7\111\uffd7\112\uffd7\113\uffd7\130\uffd7\131" +
    "\uffd7\001\002\000\004\064\141\001\002\000\152\002\uffdb" +
    "\003\uffdb\004\uffdb\005\uffdb\007\uffdb\010\uffdb\011\uffdb\012" +
    "\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb" +
    "\021\uffdb\022\uffdb\023\uffdb\025\uffdb\026\uffdb\027\uffdb\030" +
    "\uffdb\031\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb" +
    "\040\uffdb\041\uffdb\042\uffdb\056\055\057\uffdb\061\uffdb\062" +
    "\uffdb\064\127\065\uffdb\066\uffdb\070\uffdb\072\uffdb\073\uffdb" +
    "\074\uffdb\075\uffdb\076\uffdb\100\uffdb\101\uffdb\102\uffdb\110" +
    "\uffdb\111\uffdb\112\uffdb\113\uffdb\130\uffdb\131\uffdb\001\002" +
    "\000\004\064\123\001\002\000\030\005\073\044\071\045" +
    "\060\046\056\047\064\050\070\051\067\064\075\100\072" +
    "\110\074\111\076\001\002\000\004\064\116\001\002\000" +
    "\020\033\101\034\105\035\106\036\104\037\103\040\102" +
    "\057\107\001\002\000\146\002\uffd9\003\uffd9\004\uffd9\005" +
    "\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9" +
    "\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023" +
    "\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\033\uffd9" +
    "\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042" +
    "\uffd9\057\uffd9\061\uffd9\062\uffd9\065\uffd9\066\uffd9\070\uffd9" +
    "\072\uffd9\073\uffd9\074\uffd9\075\uffd9\076\uffd9\100\uffd9\101" +
    "\uffd9\102\uffd9\110\uffd9\111\uffd9\112\uffd9\113\uffd9\130\uffd9" +
    "\131\uffd9\001\002\000\030\005\073\044\071\045\060\046" +
    "\056\047\064\050\070\051\067\064\075\100\072\110\074" +
    "\111\076\001\002\000\030\005\073\044\071\045\060\046" +
    "\056\047\064\050\070\051\067\064\075\100\072\110\074" +
    "\111\076\001\002\000\030\005\073\044\071\045\060\046" +
    "\056\047\064\050\070\051\067\064\075\100\072\110\074" +
    "\111\076\001\002\000\030\005\073\044\071\045\060\046" +
    "\056\047\064\050\070\051\067\064\075\100\072\110\074" +
    "\111\076\001\002\000\030\005\073\044\071\045\060\046" +
    "\056\047\064\050\070\051\067\064\075\100\072\110\074" +
    "\111\076\001\002\000\030\005\073\044\071\045\060\046" +
    "\056\047\064\050\070\051\067\064\075\100\072\110\074" +
    "\111\076\001\002\000\152\002\uffa0\003\uffa0\004\uffa0\005" +
    "\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0" +
    "\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023" +
    "\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\033\uffa0" +
    "\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042" +
    "\uffa0\043\uffa0\056\uffa0\057\uffa0\061\uffa0\062\uffa0\065\uffa0" +
    "\066\uffa0\070\uffa0\072\uffa0\073\uffa0\074\uffa0\075\uffa0\076" +
    "\uffa0\100\uffa0\101\uffa0\102\uffa0\110\uffa0\111\uffa0\112\uffa0" +
    "\113\uffa0\130\uffa0\131\uffa0\001\002\000\146\002\uffb4\003" +
    "\uffb4\004\uffb4\005\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4" +
    "\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021" +
    "\uffb4\022\uffb4\023\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4" +
    "\031\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040" +
    "\102\041\uffb4\042\uffb4\057\uffb4\061\uffb4\062\uffb4\065\uffb4" +
    "\066\uffb4\070\uffb4\072\uffb4\073\uffb4\074\uffb4\075\uffb4\076" +
    "\uffb4\100\uffb4\101\uffb4\102\uffb4\110\uffb4\111\uffb4\112\uffb4" +
    "\113\uffb4\130\uffb4\131\uffb4\001\002\000\146\002\uffb5\003" +
    "\uffb5\004\uffb5\005\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5" +
    "\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021" +
    "\uffb5\022\uffb5\023\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5" +
    "\031\uffb5\033\uffb5\034\uffb5\035\106\036\104\037\103\040" +
    "\102\041\uffb5\042\uffb5\057\uffb5\061\uffb5\062\uffb5\065\uffb5" +
    "\066\uffb5\070\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5\076" +
    "\uffb5\100\uffb5\101\uffb5\102\uffb5\110\uffb5\111\uffb5\112\uffb5" +
    "\113\uffb5\130\uffb5\131\uffb5\001\002\000\146\002\uffb3\003" +
    "\uffb3\004\uffb3\005\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3" +
    "\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021" +
    "\uffb3\022\uffb3\023\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3" +
    "\031\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040" +
    "\102\041\uffb3\042\uffb3\057\uffb3\061\uffb3\062\uffb3\065\uffb3" +
    "\066\uffb3\070\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3\076" +
    "\uffb3\100\uffb3\101\uffb3\102\uffb3\110\uffb3\111\uffb3\112\uffb3" +
    "\113\uffb3\130\uffb3\131\uffb3\001\002\000\146\002\uffb2\003" +
    "\uffb2\004\uffb2\005\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2" +
    "\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021" +
    "\uffb2\022\uffb2\023\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2" +
    "\031\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040" +
    "\102\041\uffb2\042\uffb2\057\uffb2\061\uffb2\062\uffb2\065\uffb2" +
    "\066\uffb2\070\uffb2\072\uffb2\073\uffb2\074\uffb2\075\uffb2\076" +
    "\uffb2\100\uffb2\101\uffb2\102\uffb2\110\uffb2\111\uffb2\112\uffb2" +
    "\113\uffb2\130\uffb2\131\uffb2\001\002\000\146\002\uffb1\003" +
    "\uffb1\004\uffb1\005\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1" +
    "\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021" +
    "\uffb1\022\uffb1\023\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1" +
    "\031\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040" +
    "\uffb1\041\uffb1\042\uffb1\057\uffb1\061\uffb1\062\uffb1\065\uffb1" +
    "\066\uffb1\070\uffb1\072\uffb1\073\uffb1\074\uffb1\075\uffb1\076" +
    "\uffb1\100\uffb1\101\uffb1\102\uffb1\110\uffb1\111\uffb1\112\uffb1" +
    "\113\uffb1\130\uffb1\131\uffb1\001\002\000\146\002\uffb6\003" +
    "\uffb6\004\uffb6\005\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6" +
    "\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021" +
    "\uffb6\022\uffb6\023\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6" +
    "\031\uffb6\033\uffb6\034\uffb6\035\106\036\104\037\103\040" +
    "\102\041\uffb6\042\uffb6\057\uffb6\061\uffb6\062\uffb6\065\uffb6" +
    "\066\uffb6\070\uffb6\072\uffb6\073\uffb6\074\uffb6\075\uffb6\076" +
    "\uffb6\100\uffb6\101\uffb6\102\uffb6\110\uffb6\111\uffb6\112\uffb6" +
    "\113\uffb6\130\uffb6\131\uffb6\001\002\000\030\005\073\044" +
    "\071\045\060\046\056\047\064\050\070\051\067\064\075" +
    "\100\072\110\074\111\076\001\002\000\020\033\101\034" +
    "\105\035\106\036\104\037\103\040\102\065\120\001\002" +
    "\000\146\002\uff64\003\uff64\004\uff64\005\uff64\007\uff64\010" +
    "\uff64\011\uff64\012\uff64\013\uff64\014\uff64\015\uff64\016\uff64" +
    "\017\uff64\020\uff64\021\uff64\022\uff64\023\uff64\025\uff64\026" +
    "\uff64\027\uff64\030\uff64\031\uff64\033\uff64\034\uff64\035\uff64" +
    "\036\uff64\037\uff64\040\uff64\041\uff64\042\uff64\057\uff64\061" +
    "\uff64\062\uff64\065\uff64\066\uff64\070\uff64\072\uff64\073\uff64" +
    "\074\uff64\075\uff64\076\uff64\100\uff64\101\uff64\102\uff64\110" +
    "\uff64\111\uff64\112\uff64\113\uff64\130\uff64\131\uff64\001\002" +
    "\000\020\033\101\034\105\035\106\036\104\037\103\040" +
    "\102\065\122\001\002\000\146\002\uffb0\003\uffb0\004\uffb0" +
    "\005\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014" +
    "\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0" +
    "\023\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\033" +
    "\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0" +
    "\042\uffb0\057\uffb0\061\uffb0\062\uffb0\065\uffb0\066\uffb0\070" +
    "\uffb0\072\uffb0\073\uffb0\074\uffb0\075\uffb0\076\uffb0\100\uffb0" +
    "\101\uffb0\102\uffb0\110\uffb0\111\uffb0\112\uffb0\113\uffb0\130" +
    "\uffb0\131\uffb0\001\002\000\004\005\124\001\002\000\004" +
    "\065\125\001\002\000\146\002\uff65\003\uff65\004\uff65\005" +
    "\uff65\007\uff65\010\uff65\011\uff65\012\uff65\013\uff65\014\uff65" +
    "\015\uff65\016\uff65\017\uff65\020\uff65\021\uff65\022\uff65\023" +
    "\uff65\025\uff65\026\uff65\027\uff65\030\uff65\031\uff65\033\uff65" +
    "\034\uff65\035\uff65\036\uff65\037\uff65\040\uff65\041\uff65\042" +
    "\uff65\057\uff65\061\uff65\062\uff65\065\uff65\066\uff65\070\uff65" +
    "\072\uff65\073\uff65\074\uff65\075\uff65\076\uff65\100\uff65\101" +
    "\uff65\102\uff65\110\uff65\111\uff65\112\uff65\113\uff65\130\uff65" +
    "\131\uff65\001\002\000\150\002\uffcc\003\uffcc\004\uffcc\005" +
    "\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc" +
    "\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023" +
    "\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\033\uffcc" +
    "\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042" +
    "\uffcc\056\136\057\uffcc\061\uffcc\062\uffcc\065\uffcc\066\uffcc" +
    "\070\uffcc\072\uffcc\073\uffcc\074\uffcc\075\uffcc\076\uffcc\100" +
    "\uffcc\101\uffcc\102\uffcc\110\uffcc\111\uffcc\112\uffcc\113\uffcc" +
    "\130\uffcc\131\uffcc\001\002\000\032\005\073\044\071\045" +
    "\060\046\056\047\064\050\070\051\067\064\075\065\uffcd" +
    "\100\072\110\074\111\076\001\002\000\004\065\135\001" +
    "\002\000\006\007\133\065\uffce\001\002\000\022\007\uffcf" +
    "\033\101\034\105\035\106\036\104\037\103\040\102\065" +
    "\uffcf\001\002\000\030\005\073\044\071\045\060\046\056" +
    "\047\064\050\070\051\067\064\075\100\072\110\074\111" +
    "\076\001\002\000\022\007\uffd0\033\101\034\105\035\106" +
    "\036\104\037\103\040\102\065\uffd0\001\002\000\146\002" +
    "\uffd1\003\uffd1\004\uffd1\005\uffd1\007\uffd1\010\uffd1\011\uffd1" +
    "\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020" +
    "\uffd1\021\uffd1\022\uffd1\023\uffd1\025\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037" +
    "\uffd1\040\uffd1\041\uffd1\042\uffd1\057\uffd1\061\uffd1\062\uffd1" +
    "\065\uffd1\066\uffd1\070\uffd1\072\uffd1\073\uffd1\074\uffd1\075" +
    "\uffd1\076\uffd1\100\uffd1\101\uffd1\102\uffd1\110\uffd1\111\uffd1" +
    "\112\uffd1\113\uffd1\130\uffd1\131\uffd1\001\002\000\030\005" +
    "\073\044\071\045\060\046\056\047\064\050\070\051\067" +
    "\064\075\100\072\110\074\111\076\001\002\000\020\033" +
    "\101\034\105\035\106\036\104\037\103\040\102\057\140" +
    "\001\002\000\152\002\uffa1\003\uffa1\004\uffa1\005\uffa1\007" +
    "\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1" +
    "\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\025" +
    "\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\033\uffa1\034\uffa1" +
    "\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043" +
    "\uffa1\056\uffa1\057\uffa1\061\uffa1\062\uffa1\065\uffa1\066\uffa1" +
    "\070\uffa1\072\uffa1\073\uffa1\074\uffa1\075\uffa1\076\uffa1\100" +
    "\uffa1\101\uffa1\102\uffa1\110\uffa1\111\uffa1\112\uffa1\113\uffa1" +
    "\130\uffa1\131\uffa1\001\002\000\032\062\156\114\153\115" +
    "\146\116\142\117\152\120\145\121\150\122\151\123\154" +
    "\124\144\125\143\126\147\001\002\000\004\007\uff5d\001" +
    "\002\000\004\007\uff55\001\002\000\004\007\uff56\001\002" +
    "\000\004\007\uff5b\001\002\000\004\007\uff5e\001\002\000" +
    "\004\007\uff54\001\002\000\004\007\uff5a\001\002\000\004" +
    "\007\uff58\001\002\000\004\007\uff5c\001\002\000\004\007" +
    "\uff5f\001\002\000\004\007\uff57\001\002\000\004\007\157" +
    "\001\002\000\004\007\uff59\001\002\000\030\005\073\044" +
    "\071\045\060\046\056\047\064\050\070\051\067\064\075" +
    "\100\072\110\074\111\076\001\002\000\020\007\161\033" +
    "\101\034\105\035\106\036\104\037\103\040\102\001\002" +
    "\000\030\005\073\044\071\045\060\046\056\047\064\050" +
    "\070\051\067\064\075\100\072\110\074\111\076\001\002" +
    "\000\020\007\163\033\101\034\105\035\106\036\104\037" +
    "\103\040\102\001\002\000\030\005\073\044\071\045\060" +
    "\046\056\047\064\050\070\051\067\064\075\100\072\110" +
    "\074\111\076\001\002\000\020\033\101\034\105\035\106" +
    "\036\104\037\103\040\102\065\165\001\002\000\146\002" +
    "\uff68\003\uff68\004\uff68\005\uff68\007\uff68\010\uff68\011\uff68" +
    "\012\uff68\013\uff68\014\uff68\015\uff68\016\uff68\017\uff68\020" +
    "\uff68\021\uff68\022\uff68\023\uff68\025\uff68\026\uff68\027\uff68" +
    "\030\uff68\031\uff68\033\uff68\034\uff68\035\uff68\036\uff68\037" +
    "\uff68\040\uff68\041\uff68\042\uff68\057\uff68\061\uff68\062\uff68" +
    "\065\uff68\066\uff68\070\uff68\072\uff68\073\uff68\074\uff68\075" +
    "\uff68\076\uff68\100\uff68\101\uff68\102\uff68\110\uff68\111\uff68" +
    "\112\uff68\113\uff68\130\uff68\131\uff68\001\002\000\004\060" +
    "\167\001\002\000\036\005\073\024\200\032\172\044\071" +
    "\045\060\046\056\047\064\050\070\051\067\060\177\064" +
    "\075\100\072\110\074\111\076\001\002\000\114\002\uffbf" +
    "\003\uffbf\004\uffbf\005\uffbf\007\uffbf\010\uffbf\011\uffbf\012" +
    "\uffbf\013\uffbf\014\uffbf\015\uffbf\025\uffbf\026\uffbf\027\uffbf" +
    "\030\uffbf\031\uffbf\033\uffbf\041\uffbf\042\uffbf\061\uffbf\062" +
    "\uffbf\065\uffbf\066\uffbf\070\uffbf\072\uffbf\073\uffbf\074\uffbf" +
    "\075\uffbf\076\uffbf\100\uffbf\101\uffbf\102\uffbf\110\uffbf\111" +
    "\uffbf\112\uffbf\113\uffbf\131\uffbf\001\002\000\006\007\227" +
    "\061\uff9e\001\002\000\004\064\246\001\002\000\006\007" +
    "\uff98\061\uff98\001\002\000\006\007\221\061\uff9f\001\002" +
    "\000\004\061\245\001\002\000\066\003\uff97\005\uff97\007" +
    "\uff97\025\234\026\233\027\237\030\235\031\236\041\uff97" +
    "\042\uff97\061\uff97\062\uff97\066\uff97\070\uff97\072\uff97\073" +
    "\uff97\074\uff97\075\uff97\076\uff97\100\uff97\101\uff97\102\uff97" +
    "\110\uff97\111\uff97\112\uff97\131\uff97\001\002\000\036\005" +
    "\073\024\200\032\172\044\071\045\060\046\056\047\064" +
    "\050\070\051\067\060\177\064\075\100\072\110\074\111" +
    "\076\001\002\000\030\005\073\044\071\045\060\046\056" +
    "\047\064\050\070\051\067\064\075\100\072\110\074\111" +
    "\076\001\002\000\142\002\uffbe\003\uffbe\004\uffbe\005\uffbe" +
    "\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015" +
    "\uffbe\016\202\017\206\020\204\021\205\022\203\023\207" +
    "\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\033\101\034" +
    "\105\035\106\036\104\037\103\040\102\041\uffbe\042\uffbe" +
    "\061\uffbe\062\uffbe\065\uffbe\066\uffbe\070\uffbe\072\uffbe\073" +
    "\uffbe\074\uffbe\075\uffbe\076\uffbe\100\uffbe\101\uffbe\102\uffbe" +
    "\110\uffbe\111\uffbe\112\uffbe\113\uffbe\131\uffbe\001\002\000" +
    "\030\005\073\044\071\045\060\046\056\047\064\050\070" +
    "\051\067\064\075\100\072\110\074\111\076\001\002\000" +
    "\030\005\073\044\071\045\060\046\056\047\064\050\070" +
    "\051\067\064\075\100\072\110\074\111\076\001\002\000" +
    "\030\005\073\044\071\045\060\046\056\047\064\050\070" +
    "\051\067\064\075\100\072\110\074\111\076\001\002\000" +
    "\030\005\073\044\071\045\060\046\056\047\064\050\070" +
    "\051\067\064\075\100\072\110\074\111\076\001\002\000" +
    "\030\005\073\044\071\045\060\046\056\047\064\050\070" +
    "\051\067\064\075\100\072\110\074\111\076\001\002\000" +
    "\030\005\073\044\071\045\060\046\056\047\064\050\070" +
    "\051\067\064\075\100\072\110\074\111\076\001\002\000" +
    "\126\002\uffb8\003\uffb8\004\uffb8\005\uffb8\007\uffb8\010\uffb8" +
    "\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\025\uffb8\026" +
    "\uffb8\027\uffb8\030\uffb8\031\uffb8\033\101\034\105\035\106" +
    "\036\104\037\103\040\102\041\uffb8\042\uffb8\061\uffb8\062" +
    "\uffb8\065\uffb8\066\uffb8\070\uffb8\072\uffb8\073\uffb8\074\uffb8" +
    "\075\uffb8\076\uffb8\100\uffb8\101\uffb8\102\uffb8\110\uffb8\111" +
    "\uffb8\112\uffb8\113\uffb8\131\uffb8\001\002\000\126\002\uffbc" +
    "\003\uffbc\004\uffbc\005\uffbc\007\uffbc\010\uffbc\011\uffbc\012" +
    "\uffbc\013\uffbc\014\uffbc\015\uffbc\025\uffbc\026\uffbc\027\uffbc" +
    "\030\uffbc\031\uffbc\033\101\034\105\035\106\036\104\037" +
    "\103\040\102\041\uffbc\042\uffbc\061\uffbc\062\uffbc\065\uffbc" +
    "\066\uffbc\070\uffbc\072\uffbc\073\uffbc\074\uffbc\075\uffbc\076" +
    "\uffbc\100\uffbc\101\uffbc\102\uffbc\110\uffbc\111\uffbc\112\uffbc" +
    "\113\uffbc\131\uffbc\001\002\000\126\002\uffba\003\uffba\004" +
    "\uffba\005\uffba\007\uffba\010\uffba\011\uffba\012\uffba\013\uffba" +
    "\014\uffba\015\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031" +
    "\uffba\033\101\034\105\035\106\036\104\037\103\040\102" +
    "\041\uffba\042\uffba\061\uffba\062\uffba\065\uffba\066\uffba\070" +
    "\uffba\072\uffba\073\uffba\074\uffba\075\uffba\076\uffba\100\uffba" +
    "\101\uffba\102\uffba\110\uffba\111\uffba\112\uffba\113\uffba\131" +
    "\uffba\001\002\000\126\002\uffbb\003\uffbb\004\uffbb\005\uffbb" +
    "\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015" +
    "\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\033\101" +
    "\034\105\035\106\036\104\037\103\040\102\041\uffbb\042" +
    "\uffbb\061\uffbb\062\uffbb\065\uffbb\066\uffbb\070\uffbb\072\uffbb" +
    "\073\uffbb\074\uffbb\075\uffbb\076\uffbb\100\uffbb\101\uffbb\102" +
    "\uffbb\110\uffbb\111\uffbb\112\uffbb\113\uffbb\131\uffbb\001\002" +
    "\000\126\002\uffb9\003\uffb9\004\uffb9\005\uffb9\007\uffb9\010" +
    "\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\025\uffb9" +
    "\026\uffb9\027\uffb9\030\uffb9\031\uffb9\033\101\034\105\035" +
    "\106\036\104\037\103\040\102\041\uffb9\042\uffb9\061\uffb9" +
    "\062\uffb9\065\uffb9\066\uffb9\070\uffb9\072\uffb9\073\uffb9\074" +
    "\uffb9\075\uffb9\076\uffb9\100\uffb9\101\uffb9\102\uffb9\110\uffb9" +
    "\111\uffb9\112\uffb9\113\uffb9\131\uffb9\001\002\000\126\002" +
    "\uffbd\003\uffbd\004\uffbd\005\uffbd\007\uffbd\010\uffbd\011\uffbd" +
    "\012\uffbd\013\uffbd\014\uffbd\015\uffbd\025\uffbd\026\uffbd\027" +
    "\uffbd\030\uffbd\031\uffbd\033\101\034\105\035\106\036\104" +
    "\037\103\040\102\041\uffbd\042\uffbd\061\uffbd\062\uffbd\065" +
    "\uffbd\066\uffbd\070\uffbd\072\uffbd\073\uffbd\074\uffbd\075\uffbd" +
    "\076\uffbd\100\uffbd\101\uffbd\102\uffbd\110\uffbd\111\uffbd\112" +
    "\uffbd\113\uffbd\131\uffbd\001\002\000\126\002\uffb7\003\uffb7" +
    "\004\uffb7\005\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013" +
    "\uffb7\014\uffb7\015\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7" +
    "\031\uffb7\033\101\034\105\035\106\036\104\037\103\040" +
    "\102\041\uffb7\042\uffb7\061\uffb7\062\uffb7\065\uffb7\066\uffb7" +
    "\070\uffb7\072\uffb7\073\uffb7\074\uffb7\075\uffb7\076\uffb7\100" +
    "\uffb7\101\uffb7\102\uffb7\110\uffb7\111\uffb7\112\uffb7\113\uffb7" +
    "\131\uffb7\001\002\000\006\007\227\061\232\001\002\000" +
    "\006\007\221\061\222\001\002\000\004\060\223\001\002" +
    "\000\006\007\uff9d\061\uff9d\001\002\000\036\005\073\024" +
    "\200\032\172\044\071\045\060\046\056\047\064\050\070" +
    "\051\067\060\177\064\075\100\072\110\074\111\076\001" +
    "\002\000\006\007\227\061\230\001\002\000\006\007\221" +
    "\061\226\001\002\000\006\007\uff9c\061\uff9c\001\002\000" +
    "\034\005\073\024\200\032\172\044\071\045\060\046\056" +
    "\047\064\050\070\051\067\064\075\100\072\110\074\111" +
    "\076\001\002\000\006\007\uff9a\061\uff9a\001\002\000\006" +
    "\007\uff99\061\uff99\001\002\000\006\007\uff9b\061\uff9b\001" +
    "\002\000\034\005\073\024\200\032\172\044\071\045\060" +
    "\046\056\047\064\050\070\051\067\064\075\100\072\110" +
    "\074\111\076\001\002\000\034\005\073\024\200\032\172" +
    "\044\071\045\060\046\056\047\064\050\070\051\067\064" +
    "\075\100\072\110\074\111\076\001\002\000\034\005\073" +
    "\024\200\032\172\044\071\045\060\046\056\047\064\050" +
    "\070\051\067\064\075\100\072\110\074\111\076\001\002" +
    "\000\034\005\073\024\200\032\172\044\071\045\060\046" +
    "\056\047\064\050\070\051\067\064\075\100\072\110\074" +
    "\111\076\001\002\000\034\005\073\024\200\032\172\044" +
    "\071\045\060\046\056\047\064\050\070\051\067\064\075" +
    "\100\072\110\074\111\076\001\002\000\114\002\uffc5\003" +
    "\uffc5\004\uffc5\005\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5" +
    "\013\uffc5\014\uffc5\015\uffc5\025\234\026\233\027\uffc5\030" +
    "\uffc5\031\uffc5\033\uffc5\041\uffc5\042\uffc5\061\uffc5\062\uffc5" +
    "\065\uffc5\066\uffc5\070\uffc5\072\uffc5\073\uffc5\074\uffc5\075" +
    "\uffc5\076\uffc5\100\uffc5\101\uffc5\102\uffc5\110\uffc5\111\uffc5" +
    "\112\uffc5\113\uffc5\131\uffc5\001\002\000\114\002\uffc3\003" +
    "\uffc3\004\uffc3\005\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3" +
    "\013\uffc3\014\uffc3\015\uffc3\025\234\026\233\027\uffc3\030" +
    "\uffc3\031\uffc3\033\uffc3\041\uffc3\042\uffc3\061\uffc3\062\uffc3" +
    "\065\uffc3\066\uffc3\070\uffc3\072\uffc3\073\uffc3\074\uffc3\075" +
    "\uffc3\076\uffc3\100\uffc3\101\uffc3\102\uffc3\110\uffc3\111\uffc3" +
    "\112\uffc3\113\uffc3\131\uffc3\001\002\000\114\002\uffc4\003" +
    "\uffc4\004\uffc4\005\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4" +
    "\013\uffc4\014\uffc4\015\uffc4\025\234\026\233\027\uffc4\030" +
    "\uffc4\031\uffc4\033\uffc4\041\uffc4\042\uffc4\061\uffc4\062\uffc4" +
    "\065\uffc4\066\uffc4\070\uffc4\072\uffc4\073\uffc4\074\uffc4\075" +
    "\uffc4\076\uffc4\100\uffc4\101\uffc4\102\uffc4\110\uffc4\111\uffc4" +
    "\112\uffc4\113\uffc4\131\uffc4\001\002\000\114\002\uffc2\003" +
    "\uffc2\004\uffc2\005\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2" +
    "\013\uffc2\014\uffc2\015\uffc2\025\uffc2\026\uffc2\027\uffc2\030" +
    "\uffc2\031\uffc2\033\uffc2\041\uffc2\042\uffc2\061\uffc2\062\uffc2" +
    "\065\uffc2\066\uffc2\070\uffc2\072\uffc2\073\uffc2\074\uffc2\075" +
    "\uffc2\076\uffc2\100\uffc2\101\uffc2\102\uffc2\110\uffc2\111\uffc2" +
    "\112\uffc2\113\uffc2\131\uffc2\001\002\000\114\002\uffc1\003" +
    "\uffc1\004\uffc1\005\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1" +
    "\013\uffc1\014\uffc1\015\uffc1\025\uffc1\026\uffc1\027\uffc1\030" +
    "\uffc1\031\uffc1\033\uffc1\041\uffc1\042\uffc1\061\uffc1\062\uffc1" +
    "\065\uffc1\066\uffc1\070\uffc1\072\uffc1\073\uffc1\074\uffc1\075" +
    "\uffc1\076\uffc1\100\uffc1\101\uffc1\102\uffc1\110\uffc1\111\uffc1" +
    "\112\uffc1\113\uffc1\131\uffc1\001\002\000\072\002\uffa7\003" +
    "\uffa7\004\uffa7\005\uffa7\007\uffa7\011\uffa7\012\uffa7\013\uffa7" +
    "\014\uffa7\015\uffa7\041\uffa7\042\uffa7\062\uffa7\066\uffa7\070" +
    "\uffa7\072\uffa7\073\uffa7\074\uffa7\075\uffa7\076\uffa7\100\uffa7" +
    "\101\uffa7\102\uffa7\110\uffa7\111\uffa7\112\uffa7\113\uffa7\131" +
    "\uffa7\001\002\000\034\005\073\024\200\032\172\044\071" +
    "\045\060\046\056\047\064\050\070\051\067\064\075\100" +
    "\072\110\074\111\076\001\002\000\016\025\234\026\233" +
    "\027\237\030\235\031\236\065\250\001\002\000\114\002" +
    "\uffc0\003\uffc0\004\uffc0\005\uffc0\007\uffc0\010\uffc0\011\uffc0" +
    "\012\uffc0\013\uffc0\014\uffc0\015\uffc0\025\uffc0\026\uffc0\027" +
    "\uffc0\030\uffc0\031\uffc0\033\uffc0\041\uffc0\042\uffc0\061\uffc0" +
    "\062\uffc0\065\uffc0\066\uffc0\070\uffc0\072\uffc0\073\uffc0\074" +
    "\uffc0\075\uffc0\076\uffc0\100\uffc0\101\uffc0\102\uffc0\110\uffc0" +
    "\111\uffc0\112\uffc0\113\uffc0\131\uffc0\001\002\000\034\005" +
    "\073\024\200\032\172\044\071\045\060\046\056\047\064" +
    "\050\070\051\067\064\075\100\072\110\074\111\076\001" +
    "\002\000\104\002\uffea\003\uffea\004\uffea\005\uffea\007\uffea" +
    "\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\025\234\026" +
    "\233\027\237\030\235\031\236\041\uffea\042\uffea\062\uffea" +
    "\066\uffea\070\uffea\072\uffea\073\uffea\074\uffea\075\uffea\076" +
    "\uffea\100\uffea\101\uffea\102\uffea\110\uffea\111\uffea\112\uffea" +
    "\113\uffea\131\uffea\001\002\000\010\002\ufff0\004\ufff0\131" +
    "\ufff0\001\002\000\010\002\uffef\004\uffef\131\uffef\001\002" +
    "\000\022\003\047\007\uff8c\011\043\012\036\013\032\014" +
    "\026\015\025\065\uff8c\001\002\000\006\007\263\065\264" +
    "\001\002\000\006\007\uff8f\065\uff8f\001\002\000\006\007" +
    "\uff90\065\uff90\001\002\000\004\005\262\001\002\000\006" +
    "\007\uff8d\065\uff8d\001\002\000\016\003\047\011\043\012" +
    "\036\013\032\014\026\015\025\001\002\000\004\130\023" +
    "\001\002\000\042\003\307\005\310\041\267\042\uffe4\062" +
    "\305\066\275\072\301\073\313\074\316\100\072\101\321" +
    "\102\304\110\074\111\076\112\320\131\uff69\001\002\000" +
    "\042\003\307\005\310\041\267\042\uffe4\062\305\066\275" +
    "\072\301\073\313\074\316\100\072\101\321\102\304\110" +
    "\074\111\076\112\320\131\uff69\001\002\000\004\042\uffe5" +
    "\001\002\000\042\003\307\005\310\041\267\042\uffe4\062" +
    "\305\066\275\072\301\073\313\074\316\100\072\101\321" +
    "\102\304\110\074\111\076\112\320\131\uff69\001\002\000" +
    "\042\003\307\005\310\041\267\042\uffe4\062\305\066\275" +
    "\072\301\073\313\074\316\100\072\101\321\102\304\110" +
    "\074\111\076\112\320\131\uff69\001\002\000\042\003\307" +
    "\005\310\041\267\042\uffe4\062\305\066\275\072\301\073" +
    "\313\074\316\100\072\101\321\102\304\110\074\111\076" +
    "\112\320\131\uff69\001\002\000\044\003\307\005\310\007" +
    "\u0107\041\267\042\uffe4\062\305\066\275\072\301\073\313" +
    "\074\316\100\072\101\321\102\304\110\074\111\076\112" +
    "\320\131\uff69\001\002\000\042\003\307\005\310\041\267" +
    "\042\uffe4\062\305\066\275\072\301\073\313\074\316\100" +
    "\072\101\321\102\304\110\074\111\076\112\320\131\uff69" +
    "\001\002\000\004\064\u0174\001\002\000\042\003\307\005" +
    "\310\041\267\042\uffe4\062\305\066\275\072\301\073\313" +
    "\074\316\100\072\101\321\102\304\110\074\111\076\112" +
    "\320\131\uff69\001\002\000\042\003\307\005\310\041\267" +
    "\042\uffe4\062\305\066\275\072\301\073\313\074\316\100" +
    "\072\101\321\102\304\110\074\111\076\112\320\131\uff69" +
    "\001\002\000\042\003\307\005\310\041\267\042\uffe4\062" +
    "\305\066\275\072\301\073\313\074\316\100\072\101\321" +
    "\102\304\110\074\111\076\112\320\131\uff69\001\002\000" +
    "\004\064\u0157\001\002\000\042\003\307\005\310\041\267" +
    "\042\uffe4\062\305\066\275\072\301\073\313\074\316\100" +
    "\072\101\321\102\304\110\074\111\076\112\320\131\uff69" +
    "\001\002\000\044\003\307\005\310\007\373\041\267\042" +
    "\uffe4\062\305\066\275\072\301\073\313\074\316\100\072" +
    "\101\321\102\304\110\074\111\076\112\320\131\uff69\001" +
    "\002\000\004\064\u014b\001\002\000\004\064\u0138\001\002" +
    "\000\042\003\307\005\310\041\267\042\uffe4\062\305\066" +
    "\275\072\301\073\313\074\316\100\072\101\321\102\304" +
    "\110\074\111\076\112\320\131\uff69\001\002\000\016\003" +
    "\047\011\043\012\036\013\032\014\026\015\025\001\002" +
    "\000\016\043\u0125\052\u0123\053\u0127\054\u0124\056\055\064" +
    "\127\001\002\000\042\003\307\005\310\041\267\042\uffe4" +
    "\062\305\066\275\072\301\073\313\074\316\100\072\101" +
    "\321\102\304\110\074\111\076\112\320\131\uff69\001\002" +
    "\000\042\003\307\005\310\041\267\042\uffe4\062\305\066" +
    "\275\072\301\073\313\074\316\100\072\101\321\102\304" +
    "\110\074\111\076\112\320\131\uff69\001\002\000\004\064" +
    "\u011b\001\002\000\042\003\307\005\310\041\267\042\uffe4" +
    "\062\305\066\275\072\301\073\313\074\316\100\072\101" +
    "\321\102\304\110\074\111\076\112\320\131\uff69\001\002" +
    "\000\042\003\307\005\310\041\267\042\uffe4\062\305\066" +
    "\275\072\301\073\313\074\316\100\072\101\321\102\304" +
    "\110\074\111\076\112\320\131\uff69\001\002\000\004\130" +
    "\023\001\002\000\004\131\336\001\002\000\004\064\327" +
    "\001\002\000\004\064\322\001\002\000\030\005\073\044" +
    "\071\045\060\046\056\047\064\050\070\051\067\064\075" +
    "\100\072\110\074\111\076\001\002\000\020\007\324\033" +
    "\101\034\105\035\106\036\104\037\103\040\102\001\002" +
    "\000\030\005\073\044\071\045\060\046\056\047\064\050" +
    "\070\051\067\064\075\100\072\110\074\111\076\001\002" +
    "\000\020\033\101\034\105\035\106\036\104\037\103\040" +
    "\102\065\326\001\002\000\050\003\uff67\005\uff67\041\uff67" +
    "\042\uff67\062\uff67\066\uff67\070\uff67\072\uff67\073\uff67\074" +
    "\uff67\075\uff67\076\uff67\100\uff67\101\uff67\102\uff67\110\uff67" +
    "\111\uff67\112\uff67\131\uff67\001\002\000\036\005\073\024" +
    "\200\032\172\044\071\045\060\046\056\047\064\050\070" +
    "\051\067\064\075\065\331\100\072\110\074\111\076\001" +
    "\002\000\020\025\234\026\233\027\237\030\235\031\236" +
    "\033\uff60\065\uff60\001\002\000\050\003\uff62\005\uff62\041" +
    "\uff62\042\uff62\062\uff62\066\uff62\070\uff62\072\uff62\073\uff62" +
    "\074\uff62\075\uff62\076\uff62\100\uff62\101\uff62\102\uff62\110" +
    "\uff62\111\uff62\112\uff62\131\uff62\001\002\000\006\033\333" +
    "\065\334\001\002\000\034\005\073\024\200\032\172\044" +
    "\071\045\060\046\056\047\064\050\070\051\067\064\075" +
    "\100\072\110\074\111\076\001\002\000\050\003\uff63\005" +
    "\uff63\041\uff63\042\uff63\062\uff63\066\uff63\070\uff63\072\uff63" +
    "\073\uff63\074\uff63\075\uff63\076\uff63\100\uff63\101\uff63\102" +
    "\uff63\110\uff63\111\uff63\112\uff63\131\uff63\001\002\000\020" +
    "\025\234\026\233\027\237\030\235\031\236\033\uff61\065" +
    "\uff61\001\002\000\100\002\ufffc\003\ufffc\004\ufffc\005\ufffc" +
    "\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\041\ufffc\042" +
    "\ufffc\062\ufffc\063\ufffc\066\ufffc\067\ufffc\070\ufffc\071\ufffc" +
    "\072\ufffc\073\ufffc\074\ufffc\075\ufffc\076\ufffc\100\ufffc\101" +
    "\ufffc\102\ufffc\110\ufffc\111\ufffc\112\ufffc\113\ufffc\127\ufffc" +
    "\131\ufffc\001\002\000\036\002\uff92\003\uff92\004\uff92\005" +
    "\uff92\011\uff92\012\uff92\013\uff92\014\uff92\015\uff92\041\uff92" +
    "\042\uff92\076\uff92\113\uff92\131\uff92\001\002\000\046\003" +
    "\307\005\310\041\267\042\uffe4\062\305\066\275\072\301" +
    "\073\313\074\316\075\uff7a\076\355\100\072\101\321\102" +
    "\304\110\074\111\076\112\320\131\uff7a\001\002\000\050" +
    "\003\307\005\310\041\267\042\uffe4\062\305\066\275\070" +
    "\uff7a\072\301\073\313\074\316\075\uff7a\076\355\100\072" +
    "\101\321\102\304\110\074\111\076\112\320\131\uff7a\001" +
    "\002\000\050\003\307\005\310\041\267\042\uffe4\062\305" +
    "\066\275\070\uff7a\072\301\073\313\074\316\075\uff7a\076" +
    "\355\100\072\101\321\102\304\110\074\111\076\112\320" +
    "\131\uff7a\001\002\000\006\075\u0111\131\uff38\001\002\000" +
    "\050\003\307\005\310\041\267\042\uffe4\062\305\066\275" +
    "\070\uff7a\072\301\073\313\074\316\075\uff7a\076\355\100" +
    "\072\101\321\102\304\110\074\111\076\112\320\131\uff7a" +
    "\001\002\000\050\003\307\005\310\041\267\042\uffe4\062" +
    "\305\066\275\070\uff7a\072\301\073\313\074\316\075\uff7a" +
    "\076\355\100\072\101\321\102\304\110\074\111\076\112" +
    "\320\131\uff7a\001\002\000\052\003\307\005\310\007\u0107" +
    "\041\267\042\uffe4\062\305\066\275\070\uff7a\072\301\073" +
    "\313\074\316\075\uff7a\076\355\100\072\101\321\102\304" +
    "\110\074\111\076\112\320\131\uff7a\001\002\000\050\003" +
    "\307\005\310\041\267\042\uffe4\062\305\066\275\070\uff7a" +
    "\072\301\073\313\074\316\075\uff7a\076\355\100\072\101" +
    "\321\102\304\110\074\111\076\112\320\131\uff7a\001\002" +
    "\000\050\003\307\005\310\041\267\042\uffe4\062\305\066" +
    "\275\070\uff7a\072\301\073\313\074\316\075\uff7a\076\355" +
    "\100\072\101\321\102\304\110\074\111\076\112\320\131" +
    "\uff7a\001\002\000\050\003\307\005\310\041\267\042\uffe4" +
    "\062\305\066\275\070\uff7a\072\301\073\313\074\316\075" +
    "\uff7a\076\355\100\072\101\321\102\304\110\074\111\076" +
    "\112\320\131\uff7a\001\002\000\050\003\307\005\310\041" +
    "\267\042\uffe4\062\305\066\275\070\uff7a\072\301\073\313" +
    "\074\316\075\uff7a\076\355\100\072\101\321\102\304\110" +
    "\074\111\076\112\320\131\uff7a\001\002\000\050\003\307" +
    "\005\310\041\267\042\uffe4\062\305\066\275\070\uff7a\072" +
    "\301\073\313\074\316\075\uff7a\076\355\100\072\101\321" +
    "\102\304\110\074\111\076\112\320\131\uff7a\001\002\000" +
    "\052\003\307\005\310\007\373\041\267\042\uffe4\062\305" +
    "\066\275\070\uff7a\072\301\073\313\074\316\075\uff7a\076" +
    "\355\100\072\101\321\102\304\110\074\111\076\112\320" +
    "\131\uff7a\001\002\000\034\005\073\024\200\032\172\044" +
    "\071\045\060\046\056\047\064\050\070\051\067\064\075" +
    "\100\072\110\074\111\076\001\002\000\050\003\307\005" +
    "\310\041\267\042\uffe4\062\305\066\275\070\uff7a\072\301" +
    "\073\313\074\316\075\uff7a\076\355\100\072\101\321\102" +
    "\304\110\074\111\076\112\320\131\uff7a\001\002\000\050" +
    "\003\307\005\310\041\267\042\uffe4\062\305\066\275\070" +
    "\uff7a\072\301\073\313\074\316\075\uff7a\076\355\100\072" +
    "\101\321\102\304\110\074\111\076\112\320\131\uff7a\001" +
    "\002\000\050\003\307\005\310\041\267\042\uffe4\062\305" +
    "\066\275\070\uff7a\072\301\073\313\074\316\075\uff7a\076" +
    "\355\100\072\101\321\102\304\110\074\111\076\112\320" +
    "\131\uff7a\001\002\000\050\003\307\005\310\041\267\042" +
    "\uffe4\062\305\066\275\070\uff7a\072\301\073\313\074\316" +
    "\075\uff7a\076\355\100\072\101\321\102\304\110\074\111" +
    "\076\112\320\131\uff7a\001\002\000\050\003\307\005\310" +
    "\041\267\042\uffe4\062\305\066\275\070\uff7a\072\301\073" +
    "\313\074\316\075\uff7a\076\355\100\072\101\321\102\304" +
    "\110\074\111\076\112\320\131\uff7a\001\002\000\010\070" +
    "\uff80\075\uff80\131\uff80\001\002\000\010\070\uff7c\075\uff7c" +
    "\131\uff7c\001\002\000\010\070\uff84\075\uff84\131\uff84\001" +
    "\002\000\010\070\uff85\075\uff85\131\uff85\001\002\000\010" +
    "\070\uff82\075\uff82\131\uff82\001\002\000\062\003\307\005" +
    "\310\025\234\026\233\027\237\030\235\031\236\041\267" +
    "\042\uffe4\062\305\066\275\070\uff7a\072\301\073\313\074" +
    "\316\075\uff7a\076\355\100\072\101\321\102\304\110\074" +
    "\111\076\112\320\131\uff7a\001\002\000\010\070\uff7b\075" +
    "\uff7b\131\uff7b\001\002\000\010\070\uff8b\075\uff8b\131\uff8b" +
    "\001\002\000\006\003\374\005\375\001\002\000\034\005" +
    "\073\024\200\032\172\044\071\045\060\046\056\047\064" +
    "\050\070\051\067\064\075\100\072\110\074\111\076\001" +
    "\002\000\074\002\uffec\003\uffec\004\uffec\005\uffec\007\uffec" +
    "\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\041\uffec\042" +
    "\uffec\043\376\062\uffec\066\uffec\070\uffec\072\uffec\073\uffec" +
    "\074\uffec\075\uffec\076\uffec\100\uffec\101\uffec\102\uffec\110" +
    "\uffec\111\uffec\112\uffec\113\uffec\131\uffec\001\002\000\034" +
    "\005\073\024\200\032\172\044\071\045\060\046\056\047" +
    "\064\050\070\051\067\064\075\100\072\110\074\111\076" +
    "\001\002\000\104\002\uffeb\003\uffeb\004\uffeb\005\uffeb\007" +
    "\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\025\234" +
    "\026\233\027\237\030\235\031\236\041\uffeb\042\uffeb\062" +
    "\uffeb\066\uffeb\070\uffeb\072\uffeb\073\uffeb\074\uffeb\075\uffeb" +
    "\076\uffeb\100\uffeb\101\uffeb\102\uffeb\110\uffeb\111\uffeb\112" +
    "\uffeb\113\uffeb\131\uffeb\001\002\000\104\002\uffe8\003\uffe8" +
    "\004\uffe8\005\uffe8\007\uffe8\011\uffe8\012\uffe8\013\uffe8\014" +
    "\uffe8\015\uffe8\025\234\026\233\027\237\030\235\031\236" +
    "\041\uffe8\042\uffe8\062\uffe8\066\uffe8\070\uffe8\072\uffe8\073" +
    "\uffe8\074\uffe8\075\uffe8\076\uffe8\100\uffe8\101\uffe8\102\uffe8" +
    "\110\uffe8\111\uffe8\112\uffe8\113\uffe8\131\uffe8\001\002\000" +
    "\010\070\uff7f\075\uff7f\131\uff7f\001\002\000\010\070\uff8a" +
    "\075\uff8a\131\uff8a\001\002\000\010\070\uff87\075\uff87\131" +
    "\uff87\001\002\000\010\070\uff88\075\uff88\131\uff88\001\002" +
    "\000\010\070\uff81\075\uff81\131\uff81\001\002\000\010\070" +
    "\uff89\075\uff89\131\uff89\001\002\000\004\005\u0108\001\002" +
    "\000\074\002\uffa9\003\uffa9\004\uffa9\005\uffa9\007\uffa9\011" +
    "\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\041\uffa9\042\uffa9" +
    "\056\055\062\uffa9\066\uffa9\070\uffa9\072\uffa9\073\uffa9\074" +
    "\uffa9\075\uffa9\076\uffa9\100\uffa9\101\uffa9\102\uffa9\110\uffa9" +
    "\111\uffa9\112\uffa9\113\uffa9\131\uffa9\001\002\000\076\002" +
    "\uffaa\003\uffaa\004\uffaa\005\uffaa\007\uffaa\011\uffaa\012\uffaa" +
    "\013\uffaa\014\uffaa\015\uffaa\041\uffaa\042\uffaa\043\u010a\056" +
    "\136\062\uffaa\066\uffaa\070\uffaa\072\uffaa\073\uffaa\074\uffaa" +
    "\075\uffaa\076\uffaa\100\uffaa\101\uffaa\102\uffaa\110\uffaa\111" +
    "\uffaa\112\uffaa\113\uffaa\131\uffaa\001\002\000\004\060\u010b" +
    "\001\002\000\036\005\073\024\200\032\172\044\071\045" +
    "\060\046\056\047\064\050\070\051\067\060\177\064\075" +
    "\100\072\110\074\111\076\001\002\000\004\061\u010d\001" +
    "\002\000\072\002\uffa8\003\uffa8\004\uffa8\005\uffa8\007\uffa8" +
    "\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8\041\uffa8\042" +
    "\uffa8\062\uffa8\066\uffa8\070\uffa8\072\uffa8\073\uffa8\074\uffa8" +
    "\075\uffa8\076\uffa8\100\uffa8\101\uffa8\102\uffa8\110\uffa8\111" +
    "\uffa8\112\uffa8\113\uffa8\131\uffa8\001\002\000\010\070\uff7d" +
    "\075\uff7d\131\uff7d\001\002\000\010\070\uff83\075\uff83\131" +
    "\uff83\001\002\000\004\131\336\001\002\000\004\131\uff39" +
    "\001\002\000\004\073\u0113\001\002\000\004\064\u0114\001" +
    "\002\000\034\005\073\024\200\032\172\044\071\045\060" +
    "\046\056\047\064\050\070\051\067\064\075\100\072\110" +
    "\074\111\076\001\002\000\016\025\234\026\233\027\237" +
    "\030\235\031\236\065\u0116\001\002\000\050\003\uff3a\005" +
    "\uff3a\041\uff3a\042\uff3a\062\uff3a\066\uff3a\070\uff3a\072\uff3a" +
    "\073\uff3a\074\uff3a\075\uff3a\076\uff3a\100\uff3a\101\uff3a\102" +
    "\uff3a\110\uff3a\111\uff3a\112\uff3a\131\uff3a\001\002\000\010" +
    "\070\uff7e\075\uff7e\131\uff7e\001\002\000\010\070\uff86\075" +
    "\uff86\131\uff86\001\002\000\004\131\uff6a\001\002\000\004" +
    "\131\uff6e\001\002\000\034\005\073\024\200\032\172\044" +
    "\071\045\060\046\056\047\064\050\070\051\067\064\075" +
    "\100\072\110\074\111\076\001\002\000\016\025\234\026" +
    "\233\027\237\030\235\031\236\065\u011d\001\002\000\004" +
    "\130\023\001\002\000\044\003\307\005\310\041\267\042" +
    "\uffe4\062\305\066\275\072\301\073\313\074\316\076\355" +
    "\100\072\101\321\102\304\110\074\111\076\112\320\131" +
    "\uff7a\001\002\000\004\131\336\001\002\000\050\003\uff3b" +
    "\005\uff3b\041\uff3b\042\uff3b\062\uff3b\066\uff3b\070\uff3b\072" +
    "\uff3b\073\uff3b\074\uff3b\075\uff3b\076\uff3b\100\uff3b\101\uff3b" +
    "\102\uff3b\110\uff3b\111\uff3b\112\uff3b\131\uff3b\001\002\000" +
    "\004\131\uff72\001\002\000\004\131\uff73\001\002\000\034" +
    "\005\073\024\200\032\172\044\071\045\060\046\056\047" +
    "\064\050\070\051\067\064\075\100\072\110\074\111\076" +
    "\001\002\000\050\003\uffab\005\uffab\041\uffab\042\uffab\062" +
    "\uffab\066\uffab\070\uffab\072\uffab\073\uffab\074\uffab\075\uffab" +
    "\076\uffab\100\uffab\101\uffab\102\uffab\110\uffab\111\uffab\112" +
    "\uffab\131\uffab\001\002\000\034\005\073\024\200\032\172" +
    "\044\071\045\060\046\056\047\064\050\070\051\067\064" +
    "\075\100\072\110\074\111\076\001\002\000\006\043\u0128" +
    "\056\136\001\002\000\050\003\uffac\005\uffac\041\uffac\042" +
    "\uffac\062\uffac\066\uffac\070\uffac\072\uffac\073\uffac\074\uffac" +
    "\075\uffac\076\uffac\100\uffac\101\uffac\102\uffac\110\uffac\111" +
    "\uffac\112\uffac\131\uffac\001\002\000\034\005\073\024\200" +
    "\032\172\044\071\045\060\046\056\047\064\050\070\051" +
    "\067\064\075\100\072\110\074\111\076\001\002\000\050" +
    "\003\uff96\005\uff96\041\uff96\042\uff96\062\uff96\066\uff96\070" +
    "\uff96\072\uff96\073\uff96\074\uff96\075\uff96\076\uff96\100\uff96" +
    "\101\uff96\102\uff96\110\uff96\111\uff96\112\uff96\131\uff96\001" +
    "\002\000\062\003\uffae\005\uffae\025\234\026\233\027\237" +
    "\030\235\031\236\041\uffae\042\uffae\062\uffae\066\uffae\070" +
    "\uffae\072\uffae\073\uffae\074\uffae\075\uffae\076\uffae\100\uffae" +
    "\101\uffae\102\uffae\110\uffae\111\uffae\112\uffae\131\uffae\001" +
    "\002\000\062\003\uffad\005\uffad\025\234\026\233\027\237" +
    "\030\235\031\236\041\uffad\042\uffad\062\uffad\066\uffad\070" +
    "\uffad\072\uffad\073\uffad\074\uffad\075\uffad\076\uffad\100\uffad" +
    "\101\uffad\102\uffad\110\uffad\111\uffad\112\uffad\131\uffad\001" +
    "\002\000\006\005\u012d\055\u012e\001\002\000\074\002\uffe6" +
    "\003\uffe6\004\uffe6\005\uffe6\007\uffe6\011\uffe6\012\uffe6\013" +
    "\uffe6\014\uffe6\015\uffe6\041\uffe6\042\uffe6\043\u0135\062\uffe6" +
    "\066\uffe6\070\uffe6\072\uffe6\073\uffe6\074\uffe6\075\uffe6\076" +
    "\uffe6\100\uffe6\101\uffe6\102\uffe6\110\uffe6\111\uffe6\112\uffe6" +
    "\113\uffe6\131\uffe6\001\002\000\004\005\u012f\001\002\000" +
    "\074\002\uffa3\003\uffa3\004\uffa3\005\uffa3\007\uffa3\011\uffa3" +
    "\012\uffa3\013\uffa3\014\uffa3\015\uffa3\041\uffa3\042\uffa3\056" +
    "\055\062\uffa3\066\uffa3\070\uffa3\072\uffa3\073\uffa3\074\uffa3" +
    "\075\uffa3\076\uffa3\100\uffa3\101\uffa3\102\uffa3\110\uffa3\111" +
    "\uffa3\112\uffa3\113\uffa3\131\uffa3\001\002\000\076\002\uffa2" +
    "\003\uffa2\004\uffa2\005\uffa2\007\uffa2\011\uffa2\012\uffa2\013" +
    "\uffa2\014\uffa2\015\uffa2\041\uffa2\042\uffa2\043\u0131\056\136" +
    "\062\uffa2\066\uffa2\070\uffa2\072\uffa2\073\uffa2\074\uffa2\075" +
    "\uffa2\076\uffa2\100\uffa2\101\uffa2\102\uffa2\110\uffa2\111\uffa2" +
    "\112\uffa2\113\uffa2\131\uffa2\001\002\000\004\060\u0132\001" +
    "\002\000\036\005\073\024\200\032\172\044\071\045\060" +
    "\046\056\047\064\050\070\051\067\060\177\064\075\100" +
    "\072\110\074\111\076\001\002\000\004\061\u0134\001\002" +
    "\000\072\002\uffa4\003\uffa4\004\uffa4\005\uffa4\007\uffa4\011" +
    "\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4\041\uffa4\042\uffa4" +
    "\062\uffa4\066\uffa4\070\uffa4\072\uffa4\073\uffa4\074\uffa4\075" +
    "\uffa4\076\uffa4\100\uffa4\101\uffa4\102\uffa4\110\uffa4\111\uffa4" +
    "\112\uffa4\113\uffa4\131\uffa4\001\002\000\034\005\073\024" +
    "\200\032\172\044\071\045\060\046\056\047\064\050\070" +
    "\051\067\064\075\100\072\110\074\111\076\001\002\000" +
    "\104\002\uffe7\003\uffe7\004\uffe7\005\uffe7\007\uffe7\011\uffe7" +
    "\012\uffe7\013\uffe7\014\uffe7\015\uffe7\025\234\026\233\027" +
    "\237\030\235\031\236\041\uffe7\042\uffe7\062\uffe7\066\uffe7" +
    "\070\uffe7\072\uffe7\073\uffe7\074\uffe7\075\uffe7\076\uffe7\100" +
    "\uffe7\101\uffe7\102\uffe7\110\uffe7\111\uffe7\112\uffe7\113\uffe7" +
    "\131\uffe7\001\002\000\004\131\uff70\001\002\000\034\005" +
    "\073\024\200\032\172\044\071\045\060\046\056\047\064" +
    "\050\070\051\067\064\075\100\072\110\074\111\076\001" +
    "\002\000\016\025\234\026\233\027\237\030\235\031\236" +
    "\065\u013a\001\002\000\004\130\023\001\002\000\044\003" +
    "\307\005\310\041\267\042\uffe4\062\305\066\275\072\301" +
    "\073\313\074\316\076\355\100\072\101\321\102\304\110" +
    "\074\111\076\112\320\131\uff7a\001\002\000\004\131\336" +
    "\001\002\000\054\003\uff4a\005\uff4a\041\uff4a\042\uff4a\062" +
    "\uff4a\063\u0140\066\uff4a\070\uff4a\072\uff4a\073\uff4a\074\uff4a" +
    "\075\uff4a\076\uff4a\100\uff4a\101\uff4a\102\uff4a\110\uff4a\111" +
    "\uff4a\112\uff4a\127\u013f\131\uff4a\001\002\000\050\003\uff4d" +
    "\005\uff4d\041\uff4d\042\uff4d\062\uff4d\066\uff4d\070\uff4d\072" +
    "\uff4d\073\uff4d\074\uff4d\075\uff4d\076\uff4d\100\uff4d\101\uff4d" +
    "\102\uff4d\110\uff4d\111\uff4d\112\uff4d\131\uff4d\001\002\000" +
    "\004\064\u0144\001\002\000\004\130\023\001\002\000\044" +
    "\003\307\005\310\041\267\042\uffe4\062\305\066\275\072" +
    "\301\073\313\074\316\076\355\100\072\101\321\102\304" +
    "\110\074\111\076\112\320\131\uff7a\001\002\000\004\131" +
    "\336\001\002\000\050\003\uff4b\005\uff4b\041\uff4b\042\uff4b" +
    "\062\uff4b\066\uff4b\070\uff4b\072\uff4b\073\uff4b\074\uff4b\075" +
    "\uff4b\076\uff4b\100\uff4b\101\uff4b\102\uff4b\110\uff4b\111\uff4b" +
    "\112\uff4b\131\uff4b\001\002\000\034\005\073\024\200\032" +
    "\172\044\071\045\060\046\056\047\064\050\070\051\067" +
    "\064\075\100\072\110\074\111\076\001\002\000\016\025" +
    "\234\026\233\027\237\030\235\031\236\065\u0146\001\002" +
    "\000\004\130\023\001\002\000\044\003\307\005\310\041" +
    "\267\042\uffe4\062\305\066\275\072\301\073\313\074\316" +
    "\076\355\100\072\101\321\102\304\110\074\111\076\112" +
    "\320\131\uff7a\001\002\000\004\131\336\001\002\000\054" +
    "\003\uff4a\005\uff4a\041\uff4a\042\uff4a\062\uff4a\063\u0140\066" +
    "\uff4a\070\uff4a\072\uff4a\073\uff4a\074\uff4a\075\uff4a\076\uff4a" +
    "\100\uff4a\101\uff4a\102\uff4a\110\uff4a\111\uff4a\112\uff4a\127" +
    "\u013f\131\uff4a\001\002\000\050\003\uff4c\005\uff4c\041\uff4c" +
    "\042\uff4c\062\uff4c\066\uff4c\070\uff4c\072\uff4c\073\uff4c\074" +
    "\uff4c\075\uff4c\076\uff4c\100\uff4c\101\uff4c\102\uff4c\110\uff4c" +
    "\111\uff4c\112\uff4c\131\uff4c\001\002\000\004\005\u014c\001" +
    "\002\000\004\007\u014d\001\002\000\014\103\u014f\104\u0151" +
    "\105\u014e\106\u0153\107\u0150\001\002\000\004\065\uff51\001" +
    "\002\000\004\065\uff53\001\002\000\004\065\uff4f\001\002" +
    "\000\004\065\uff52\001\002\000\004\065\u0154\001\002\000" +
    "\004\065\uff50\001\002\000\050\003\uff66\005\uff66\041\uff66" +
    "\042\uff66\062\uff66\066\uff66\070\uff66\072\uff66\073\uff66\074" +
    "\uff66\075\uff66\076\uff66\100\uff66\101\uff66\102\uff66\110\uff66" +
    "\111\uff66\112\uff66\131\uff66\001\002\000\004\131\uff79\001" +
    "\002\000\004\131\uff6d\001\002\000\006\005\u0159\042\u0158" +
    "\001\002\000\016\003\047\011\043\012\036\013\032\014" +
    "\026\015\025\001\002\000\004\043\u016b\001\002\000\004" +
    "\010\u015b\001\002\000\034\005\073\024\200\032\172\044" +
    "\071\045\060\046\056\047\064\050\070\051\067\064\075" +
    "\100\072\110\074\111\076\001\002\000\004\010\u015e\001" +
    "\002\000\016\010\uff40\025\234\026\233\027\237\030\235" +
    "\031\236\001\002\000\004\005\u015f\001\002\000\012\043" +
    "\u0167\052\u0165\053\u0168\054\u0166\001\002\000\004\065\u0161" +
    "\001\002\000\004\130\023\001\002\000\044\003\307\005" +
    "\310\041\267\042\uffe4\062\305\066\275\072\301\073\313" +
    "\074\316\076\355\100\072\101\321\102\304\110\074\111" +
    "\076\112\320\131\uff7a\001\002\000\004\131\336\001\002" +
    "\000\050\003\uff43\005\uff43\041\uff43\042\uff43\062\uff43\066" +
    "\uff43\070\uff43\072\uff43\073\uff43\074\uff43\075\uff43\076\uff43" +
    "\100\uff43\101\uff43\102\uff43\110\uff43\111\uff43\112\uff43\131" +
    "\uff43\001\002\000\030\005\073\044\071\045\060\046\056" +
    "\047\064\050\070\051\067\064\075\100\072\110\074\111" +
    "\076\001\002\000\004\065\uff3c\001\002\000\030\005\073" +
    "\044\071\045\060\046\056\047\064\050\070\051\067\064" +
    "\075\100\072\110\074\111\076\001\002\000\004\065\uff3d" +
    "\001\002\000\020\033\101\034\105\035\106\036\104\037" +
    "\103\040\102\065\uff3f\001\002\000\020\033\101\034\105" +
    "\035\106\036\104\037\103\040\102\065\uff3e\001\002\000" +
    "\030\005\073\044\071\045\060\046\056\047\064\050\070" +
    "\051\067\064\075\100\072\110\074\111\076\001\002\000" +
    "\020\010\uff41\033\101\034\105\035\106\036\104\037\103" +
    "\040\102\001\002\000\004\005\u016e\001\002\000\004\043" +
    "\u016f\001\002\000\030\005\073\044\071\045\060\046\056" +
    "\047\064\050\070\051\067\064\075\100\072\110\074\111" +
    "\076\001\002\000\020\010\uff42\033\101\034\105\035\106" +
    "\036\104\037\103\040\102\001\002\000\004\131\uff78\001" +
    "\002\000\004\131\uff75\001\002\000\004\131\uff76\001\002" +
    "\000\004\005\u0175\001\002\000\004\065\u0176\001\002\000" +
    "\004\130\023\001\002\000\010\067\u017a\071\u0178\131\uff46" +
    "\001\002\000\004\130\023\001\002\000\004\131\336\001" +
    "\002\000\030\005\073\044\071\045\060\046\056\047\064" +
    "\050\070\051\067\064\075\100\072\110\074\111\076\001" +
    "\002\000\020\033\101\034\105\035\106\036\104\037\103" +
    "\040\102\130\023\001\002\000\046\003\307\005\310\041" +
    "\267\042\uffe4\062\305\066\275\070\uff7a\072\301\073\313" +
    "\074\316\076\355\100\072\101\321\102\304\110\074\111" +
    "\076\112\320\131\uff7a\001\002\000\006\070\u017f\131\uff44" +
    "\001\002\000\004\131\336\001\002\000\004\131\uff45\001" +
    "\002\000\010\067\u017a\071\u0178\131\uff46\001\002\000\004" +
    "\131\uff48\001\002\000\050\003\uff49\005\uff49\041\uff49\042" +
    "\uff49\062\uff49\066\uff49\070\uff49\072\uff49\073\uff49\074\uff49" +
    "\075\uff49\076\uff49\100\uff49\101\uff49\102\uff49\110\uff49\111" +
    "\uff49\112\uff49\131\uff49\001\002\000\044\003\307\005\310" +
    "\041\267\042\uffe4\062\305\066\275\072\301\073\313\074" +
    "\316\076\355\100\072\101\321\102\304\110\074\111\076" +
    "\112\320\131\uff7a\001\002\000\004\131\336\001\002\000" +
    "\004\131\uff47\001\002\000\004\131\uff6f\001\002\000\004" +
    "\131\uff77\001\002\000\004\131\uff6b\001\002\000\004\131" +
    "\uff71\001\002\000\004\131\uff6c\001\002\000\004\131\uff74" +
    "\001\002\000\004\005\u018d\001\002\000\006\007\uff8e\065" +
    "\uff8e\001\002\000\010\002\ufff2\004\ufff2\131\ufff2\001\002" +
    "\000\004\065\u0190\001\002\000\004\130\023\001\002\000" +
    "\042\003\307\005\310\041\267\042\uffe4\062\305\066\275" +
    "\072\301\073\313\074\316\100\072\101\321\102\304\110" +
    "\074\111\076\112\320\131\uff69\001\002\000\004\131\336" +
    "\001\002\000\036\002\uff4e\003\uff4e\004\uff4e\005\uff4e\011" +
    "\uff4e\012\uff4e\013\uff4e\014\uff4e\015\uff4e\041\uff4e\042\uff4e" +
    "\076\uff4e\113\uff4e\131\uff4e\001\002\000\010\002\uffee\004" +
    "\uffee\131\uffee\001\002\000\006\002\ufff7\004\ufff7\001\002" +
    "\000\006\002\ufffb\004\ufffb\001\002\000\004\064\u0198\001" +
    "\002\000\022\003\047\007\uff8c\011\043\012\036\013\032" +
    "\014\026\015\025\065\uff8c\001\002\000\006\007\263\065" +
    "\u019a\001\002\000\004\130\023\001\002\000\044\003\307" +
    "\005\310\041\267\042\uffe4\062\305\066\275\072\301\073" +
    "\313\074\316\076\355\100\072\101\321\102\304\110\074" +
    "\111\076\112\320\131\uff7a\001\002\000\004\131\336\001" +
    "\002\000\036\002\uff95\003\uff95\004\uff95\005\uff95\011\uff95" +
    "\012\uff95\013\uff95\014\uff95\015\uff95\041\uff95\042\uff95\076" +
    "\uff95\113\uff95\131\uff95\001\002\000\010\002\ufff1\004\ufff1" +
    "\131\ufff1\001\002\000\004\005\u01a7\001\002\000\004\064" +
    "\u01a1\001\002\000\022\003\047\007\uff8c\011\043\012\036" +
    "\013\032\014\026\015\025\065\uff8c\001\002\000\006\007" +
    "\263\065\u01a3\001\002\000\004\130\023\001\002\000\042" +
    "\003\307\005\310\041\267\042\uffe4\062\305\066\275\072" +
    "\301\073\313\074\316\100\072\101\321\102\304\110\074" +
    "\111\076\112\320\131\uff69\001\002\000\004\131\336\001" +
    "\002\000\036\002\uff91\003\uff91\004\uff91\005\uff91\011\uff91" +
    "\012\uff91\013\uff91\014\uff91\015\uff91\041\uff91\042\uff91\076" +
    "\uff91\113\uff91\131\uff91\001\002\000\004\064\u01a8\001\002" +
    "\000\022\003\047\007\uff8c\011\043\012\036\013\032\014" +
    "\026\015\025\065\uff8c\001\002\000\006\007\263\065\u01aa" +
    "\001\002\000\004\130\023\001\002\000\044\003\307\005" +
    "\310\041\267\042\uffe4\062\305\066\275\072\301\073\313" +
    "\074\316\076\355\100\072\101\321\102\304\110\074\111" +
    "\076\112\320\131\uff7a\001\002\000\004\131\336\001\002" +
    "\000\036\002\uff94\003\uff94\004\uff94\005\uff94\011\uff94\012" +
    "\uff94\013\uff94\014\uff94\015\uff94\041\uff94\042\uff94\076\uff94" +
    "\113\uff94\131\uff94\001\002\000\006\007\ufff3\130\ufff3\001" +
    "\002\000\004\005\u01b0\001\002\000\006\007\ufff4\130\ufff4" +
    "\001\002\000\004\002\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01af\000\006\002\004\003\003\001\001\000\006\004" +
    "\013\005\012\001\001\000\002\001\001\000\004\003\006" +
    "\001\001\000\002\001\001\000\004\003\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\u01b0\005\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\016\007\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\063\021\001\001\000\022\010\030\011\034\012" +
    "\044\016\027\021\026\035\043\036\041\045\032\001\001" +
    "\000\002\001\001\000\004\016\u019e\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\010\u019d\011\034\012\044" +
    "\016\027\021\026\035\043\036\041\045\032\001\001\000" +
    "\002\001\001\000\004\065\u0194\001\001\000\002\001\001" +
    "\000\022\010\u0193\011\034\012\044\016\027\021\026\035" +
    "\043\036\041\045\032\001\001\000\002\001\001\000\022" +
    "\010\u018d\011\034\012\044\016\027\021\026\035\043\036" +
    "\041\045\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\u012b\001\001\000\002\001\001\000\022\010" +
    "\253\011\034\012\044\016\027\021\026\035\043\036\041" +
    "\045\032\001\001\000\002\001\001\000\022\010\252\011" +
    "\034\012\044\016\027\021\026\035\043\036\041\045\032" +
    "\001\001\000\002\001\001\000\004\016\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\053\001\001\000\002\001\001\000" +
    "\022\014\064\020\076\037\061\042\056\043\060\046\065" +
    "\047\077\076\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\125\001\001\000" +
    "\002\001\001\000\022\014\064\020\120\037\061\042\056" +
    "\043\060\046\065\047\077\076\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\014\064" +
    "\020\114\037\061\042\056\043\060\046\065\047\077\076" +
    "\062\001\001\000\022\014\064\020\113\037\061\042\056" +
    "\043\060\046\065\047\077\076\062\001\001\000\022\014" +
    "\064\020\112\037\061\042\056\043\060\046\065\047\077" +
    "\076\062\001\001\000\022\014\064\020\111\037\061\042" +
    "\056\043\060\046\065\047\077\076\062\001\001\000\022" +
    "\014\064\020\110\037\061\042\056\043\060\046\065\047" +
    "\077\076\062\001\001\000\022\014\064\020\107\037\061" +
    "\042\056\043\060\046\065\047\077\076\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\014\064\020\116\037\061\042\056\043\060" +
    "\046\065\047\077\076\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\014\064\020\131\037\061\042\056\043\060" +
    "\046\065\047\077\050\130\051\127\076\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\014\064\020\133\037\061\042\056\043\060\046\065\047" +
    "\077\076\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\014\064\020\136\037\061\042\056\043\060\046" +
    "\065\047\077\076\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\056\154\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\014\064\020" +
    "\157\037\061\042\056\043\060\046\065\047\077\076\062" +
    "\001\001\000\002\001\001\000\022\014\064\020\161\037" +
    "\061\042\056\043\060\046\065\047\077\076\062\001\001" +
    "\000\002\001\001\000\022\014\064\020\163\037\061\042" +
    "\056\043\060\046\065\047\077\076\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\014" +
    "\064\017\175\020\200\023\174\024\170\037\061\042\056" +
    "\043\060\046\065\047\077\060\167\061\172\075\173\076" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\014\064\017\175\020\200" +
    "\024\216\037\061\042\056\043\060\046\065\047\077\060" +
    "\167\061\172\075\217\076\062\001\001\000\022\014\064" +
    "\020\215\037\061\042\056\043\060\046\065\047\077\076" +
    "\062\001\001\000\002\001\001\000\022\014\064\020\214" +
    "\037\061\042\056\043\060\046\065\047\077\076\062\001" +
    "\001\000\022\014\064\020\213\037\061\042\056\043\060" +
    "\046\065\047\077\076\062\001\001\000\022\014\064\020" +
    "\212\037\061\042\056\043\060\046\065\047\077\076\062" +
    "\001\001\000\022\014\064\020\211\037\061\042\056\043" +
    "\060\046\065\047\077\076\062\001\001\000\022\014\064" +
    "\020\210\037\061\042\056\043\060\046\065\047\077\076" +
    "\062\001\001\000\022\014\064\020\207\037\061\042\056" +
    "\043\060\046\065\047\077\076\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\014\064\017\175\020\200\024\223\037" +
    "\061\042\056\043\060\046\065\047\077\060\167\061\172" +
    "\075\224\076\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\014\064\017\175\020\200" +
    "\037\061\042\056\043\060\046\065\047\077\060\167\061" +
    "\230\076\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\014\064\017\243\020\200\037" +
    "\061\042\056\043\060\046\065\047\077\060\167\076\062" +
    "\001\001\000\026\014\064\017\242\020\200\037\061\042" +
    "\056\043\060\046\065\047\077\060\167\076\062\001\001" +
    "\000\026\014\064\017\241\020\200\037\061\042\056\043" +
    "\060\046\065\047\077\060\167\076\062\001\001\000\026" +
    "\014\064\017\240\020\200\037\061\042\056\043\060\046" +
    "\065\047\077\060\167\076\062\001\001\000\026\014\064" +
    "\017\237\020\200\037\061\042\056\043\060\046\065\047" +
    "\077\060\167\076\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\014\064\017\246\020\200" +
    "\037\061\042\056\043\060\046\065\047\077\060\167\076" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\014\064\017\251\020\200\037\061\042\056\043\060\046" +
    "\065\047\077\060\167\076\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\016\260\055" +
    "\255\073\257\074\256\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\u018b\001\001\000\004\063\264\001\001" +
    "\000\046\011\302\012\044\015\277\021\272\025\265\027" +
    "\310\031\275\032\311\033\270\034\305\037\273\040\313" +
    "\041\301\042\267\043\271\044\314\046\276\067\316\001" +
    "\001\000\046\011\302\012\044\015\277\021\272\025\265" +
    "\027\310\031\275\032\311\033\270\034\305\037\273\040" +
    "\313\041\301\042\267\043\271\044\314\046\276\067\u018a" +
    "\001\001\000\002\001\001\000\046\011\302\012\044\015" +
    "\277\021\272\025\265\027\310\031\275\032\311\033\270" +
    "\034\305\037\273\040\313\041\301\042\267\043\271\044" +
    "\314\046\276\067\u0189\001\001\000\046\011\302\012\044" +
    "\015\277\021\272\025\265\027\310\031\275\032\311\033" +
    "\270\034\305\037\273\040\313\041\301\042\267\043\271" +
    "\044\314\046\276\067\u0188\001\001\000\046\011\302\012" +
    "\044\015\277\021\272\025\265\027\310\031\275\032\311" +
    "\033\270\034\305\037\273\040\313\041\301\042\267\043" +
    "\271\044\314\046\276\067\u0187\001\001\000\046\011\302" +
    "\012\044\015\277\021\272\025\265\027\310\031\275\032" +
    "\311\033\270\034\305\037\273\040\313\041\301\042\267" +
    "\043\271\044\314\046\276\067\u0186\001\001\000\046\011" +
    "\302\012\044\015\277\021\272\025\265\027\310\031\275" +
    "\032\311\033\270\034\305\037\273\040\313\041\301\042" +
    "\267\043\271\044\314\046\276\067\u0185\001\001\000\002" +
    "\001\001\000\046\011\302\012\044\015\277\021\272\025" +
    "\265\027\310\031\275\032\311\033\270\034\305\037\273" +
    "\040\313\041\301\042\267\043\271\044\314\046\276\067" +
    "\u0172\001\001\000\046\011\302\012\044\015\277\021\272" +
    "\025\265\027\310\031\275\032\311\033\270\034\305\037" +
    "\273\040\313\041\301\042\267\043\271\044\314\046\276" +
    "\067\u0171\001\001\000\046\011\302\012\044\015\277\021" +
    "\272\025\265\027\310\031\275\032\311\033\270\034\305" +
    "\037\273\040\313\041\301\042\267\043\271\044\314\046" +
    "\276\067\u0170\001\001\000\002\001\001\000\046\011\302" +
    "\012\044\015\277\021\272\025\265\027\310\031\275\032" +
    "\311\033\270\034\305\037\273\040\313\041\301\042\267" +
    "\043\271\044\314\046\276\067\u0155\001\001\000\046\011" +
    "\302\012\044\015\277\021\272\025\265\027\310\031\275" +
    "\032\311\033\270\034\305\037\273\040\313\041\301\042" +
    "\267\043\271\044\314\046\276\067\u0154\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\011\302\012\044\015" +
    "\277\021\272\025\265\027\310\031\275\032\311\033\270" +
    "\034\305\037\273\040\313\041\301\042\267\043\271\044" +
    "\314\046\276\067\u0136\001\001\000\004\016\u012b\001\001" +
    "\000\004\022\u0125\001\001\000\046\011\302\012\044\015" +
    "\277\021\272\025\265\027\310\031\275\032\311\033\270" +
    "\034\305\037\273\040\313\041\301\042\267\043\271\044" +
    "\314\046\276\067\u0121\001\001\000\046\011\302\012\044" +
    "\015\277\021\272\025\265\027\310\031\275\032\311\033" +
    "\270\034\305\037\273\040\313\041\301\042\267\043\271" +
    "\044\314\046\276\067\u0120\001\001\000\002\001\001\000" +
    "\046\011\302\012\044\015\277\021\272\025\265\027\310" +
    "\031\275\032\311\033\270\034\305\037\273\040\313\041" +
    "\301\042\267\043\271\044\314\046\276\067\u0119\001\001" +
    "\000\046\011\302\012\044\015\277\021\272\025\265\027" +
    "\310\031\275\032\311\033\270\034\305\037\273\040\313" +
    "\041\301\042\267\043\271\044\314\046\276\067\u0118\001" +
    "\001\000\004\063\337\001\001\000\004\064\336\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\014\064\020" +
    "\322\037\061\042\056\043\060\046\065\047\077\076\062" +
    "\001\001\000\002\001\001\000\022\014\064\020\324\037" +
    "\061\042\056\043\060\046\065\047\077\076\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\014\064\017" +
    "\327\020\200\037\061\042\056\043\060\046\065\047\077" +
    "\060\167\062\331\076\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\014\064\017\334" +
    "\020\200\037\061\042\056\043\060\046\065\047\077\060" +
    "\167\076\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\011\353\012" +
    "\044\015\351\021\345\025\340\027\356\031\347\032\357" +
    "\033\343\034\355\037\346\040\361\041\352\042\341\043" +
    "\344\044\360\046\350\066\342\001\001\000\046\011\353" +
    "\012\044\015\351\021\345\025\340\027\356\031\347\032" +
    "\357\033\343\034\355\037\346\040\361\041\352\042\341" +
    "\043\344\044\360\046\350\066\u0117\001\001\000\046\011" +
    "\353\012\044\015\351\021\345\025\340\027\356\031\347" +
    "\032\357\033\343\034\355\037\346\040\361\041\352\042" +
    "\341\043\344\044\360\046\350\066\u0116\001\001\000\004" +
    "\071\u010f\001\001\000\046\011\353\012\044\015\351\021" +
    "\345\025\340\027\356\031\347\032\357\033\343\034\355" +
    "\037\346\040\361\041\352\042\341\043\344\044\360\046" +
    "\350\066\u010e\001\001\000\046\011\353\012\044\015\351" +
    "\021\345\025\340\027\356\031\347\032\357\033\343\034" +
    "\355\037\346\040\361\041\352\042\341\043\344\044\360" +
    "\046\350\066\u010d\001\001\000\046\011\353\012\044\015" +
    "\351\021\345\025\340\027\356\031\347\032\357\033\343" +
    "\034\355\037\346\040\361\041\352\042\341\043\344\044" +
    "\360\046\350\066\u0105\001\001\000\046\011\353\012\044" +
    "\015\351\021\345\025\340\027\356\031\347\032\357\033" +
    "\343\034\355\037\346\040\361\041\352\042\341\043\344" +
    "\044\360\046\350\066\u0104\001\001\000\046\011\353\012" +
    "\044\015\351\021\345\025\340\027\356\031\347\032\357" +
    "\033\343\034\355\037\346\040\361\041\352\042\341\043" +
    "\344\044\360\046\350\066\u0103\001\001\000\046\011\353" +
    "\012\044\015\351\021\345\025\340\027\356\031\347\032" +
    "\357\033\343\034\355\037\346\040\361\041\352\042\341" +
    "\043\344\044\360\046\350\066\u0102\001\001\000\046\011" +
    "\353\012\044\015\351\021\345\025\340\027\356\031\347" +
    "\032\357\033\343\034\355\037\346\040\361\041\352\042" +
    "\341\043\344\044\360\046\350\066\u0101\001\001\000\046" +
    "\011\353\012\044\015\351\021\345\025\340\027\356\031" +
    "\347\032\357\033\343\034\355\037\346\040\361\041\352" +
    "\042\341\043\344\044\360\046\350\066\u0100\001\001\000" +
    "\046\011\353\012\044\015\351\021\345\025\340\027\356" +
    "\031\347\032\357\033\343\034\355\037\346\040\361\041" +
    "\352\042\341\043\344\044\360\046\350\066\371\001\001" +
    "\000\026\014\064\017\367\020\200\037\061\042\056\043" +
    "\060\046\065\047\077\060\167\076\062\001\001\000\046" +
    "\011\353\012\044\015\351\021\345\025\340\027\356\031" +
    "\347\032\357\033\343\034\355\037\346\040\361\041\352" +
    "\042\341\043\344\044\360\046\350\066\366\001\001\000" +
    "\046\011\353\012\044\015\351\021\345\025\340\027\356" +
    "\031\347\032\357\033\343\034\355\037\346\040\361\041" +
    "\352\042\341\043\344\044\360\046\350\066\365\001\001" +
    "\000\046\011\353\012\044\015\351\021\345\025\340\027" +
    "\356\031\347\032\357\033\343\034\355\037\346\040\361" +
    "\041\352\042\341\043\344\044\360\046\350\066\364\001" +
    "\001\000\046\011\353\012\044\015\351\021\345\025\340" +
    "\027\356\031\347\032\357\033\343\034\355\037\346\040" +
    "\361\041\352\042\341\043\344\044\360\046\350\066\363" +
    "\001\001\000\046\011\353\012\044\015\351\021\345\025" +
    "\340\027\356\031\347\032\357\033\343\034\355\037\346" +
    "\040\361\041\352\042\341\043\344\044\360\046\350\066" +
    "\362\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\011" +
    "\353\012\044\015\351\021\345\025\340\027\356\031\347" +
    "\032\357\033\343\034\355\037\346\040\361\041\352\042" +
    "\341\043\344\044\360\046\350\066\370\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\014" +
    "\064\017\377\020\200\037\061\042\056\043\060\046\065" +
    "\047\077\060\167\076\062\001\001\000\002\001\001\000" +
    "\026\014\064\017\376\020\200\037\061\042\056\043\060" +
    "\046\065\047\077\060\167\076\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\u0108\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\014\064\017" +
    "\175\020\200\023\u010b\024\170\037\061\042\056\043\060" +
    "\046\065\047\077\060\167\061\172\075\173\076\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\064\u0111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\014\064" +
    "\017\u0114\020\200\037\061\042\056\043\060\046\065\047" +
    "\077\060\167\076\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\014\064\017\u011b\020\200" +
    "\037\061\042\056\043\060\046\065\047\077\060\167\076" +
    "\062\001\001\000\002\001\001\000\004\063\u011d\001\001" +
    "\000\046\011\353\012\044\015\351\021\345\025\340\027" +
    "\356\031\347\032\357\033\343\034\355\037\346\040\361" +
    "\041\352\042\341\043\344\044\360\046\350\066\u011e\001" +
    "\001\000\004\064\u011f\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\014\064\017\u012a\020" +
    "\200\037\061\042\056\043\060\046\065\047\077\060\167" +
    "\076\062\001\001\000\002\001\001\000\026\014\064\017" +
    "\u0129\020\200\037\061\042\056\043\060\046\065\047\077" +
    "\060\167\076\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\014\064\017\175\020\200\037\061\042\056" +
    "\043\060\046\065\047\077\060\167\061\u0128\076\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\u012f\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\014\064\017\175\020\200\023\u0132\024\170\037" +
    "\061\042\056\043\060\046\065\047\077\060\167\061\172" +
    "\075\173\076\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\014\064\017\u0135\020\200\037\061\042\056" +
    "\043\060\046\065\047\077\060\167\076\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\014\064\017\u0138" +
    "\020\200\037\061\042\056\043\060\046\065\047\077\060" +
    "\167\076\062\001\001\000\002\001\001\000\004\063\u013a" +
    "\001\001\000\046\011\353\012\044\015\351\021\345\025" +
    "\340\027\356\031\347\032\357\033\343\034\355\037\346" +
    "\040\361\041\352\042\341\043\344\044\360\046\350\066" +
    "\u013b\001\001\000\004\064\u013c\001\001\000\004\026\u013d" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\063" +
    "\u0140\001\001\000\046\011\353\012\044\015\351\021\345" +
    "\025\340\027\356\031\347\032\357\033\343\034\355\037" +
    "\346\040\361\041\352\042\341\043\344\044\360\046\350" +
    "\066\u0141\001\001\000\004\064\u0142\001\001\000\002\001" +
    "\001\000\026\014\064\017\u0144\020\200\037\061\042\056" +
    "\043\060\046\065\047\077\060\167\076\062\001\001\000" +
    "\002\001\001\000\004\063\u0146\001\001\000\046\011\353" +
    "\012\044\015\351\021\345\025\340\027\356\031\347\032" +
    "\357\033\343\034\355\037\346\040\361\041\352\042\341" +
    "\043\344\044\360\046\350\066\u0147\001\001\000\004\064" +
    "\u0148\001\001\000\004\026\u0149\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\057\u0151\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\052\u0159\001\001\000\004\016\u016c\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\014\064\017\u015c\020\200" +
    "\037\061\042\056\043\060\046\065\047\077\053\u015b\060" +
    "\167\076\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\054\u015f\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\063\u0161\001\001\000\046\011\353\012\044" +
    "\015\351\021\345\025\340\027\356\031\347\032\357\033" +
    "\343\034\355\037\346\040\361\041\352\042\341\043\344" +
    "\044\360\046\350\066\u0162\001\001\000\004\064\u0163\001" +
    "\001\000\002\001\001\000\022\014\064\020\u0169\037\061" +
    "\042\056\043\060\046\065\047\077\076\062\001\001\000" +
    "\002\001\001\000\022\014\064\020\u0168\037\061\042\056" +
    "\043\060\046\065\047\077\076\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\014\064" +
    "\020\u016b\037\061\042\056\043\060\046\065\047\077\076" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\014\064\020\u016f\037\061\042\056\043" +
    "\060\046\065\047\077\076\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\063\u0176\001\001" +
    "\000\004\072\u0178\001\001\000\004\063\u0182\001\001\000" +
    "\004\064\u0181\001\001\000\022\014\064\020\u017a\037\061" +
    "\042\056\043\060\046\065\047\077\076\062\001\001\000" +
    "\004\063\u017b\001\001\000\046\011\353\012\044\015\351" +
    "\021\345\025\340\027\356\031\347\032\357\033\343\034" +
    "\355\037\346\040\361\041\352\042\341\043\344\044\360" +
    "\046\350\066\u017c\001\001\000\004\070\u017d\001\001\000" +
    "\004\064\u017f\001\001\000\002\001\001\000\004\072\u0180" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\011" +
    "\353\012\044\015\351\021\345\025\340\027\356\031\347" +
    "\032\357\033\343\034\355\037\346\040\361\041\352\042" +
    "\341\043\344\044\360\046\350\066\u0183\001\001\000\004" +
    "\064\u0184\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\063\u0190" +
    "\001\001\000\046\011\302\012\044\015\277\021\272\025" +
    "\265\027\310\031\275\032\311\033\270\034\305\037\273" +
    "\040\313\041\301\042\267\043\271\044\314\046\276\067" +
    "\u0191\001\001\000\004\064\u0192\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\016\260\055\u0198\073\257\074\256" +
    "\001\001\000\002\001\001\000\004\063\u019a\001\001\000" +
    "\046\011\353\012\044\015\351\021\345\025\340\027\356" +
    "\031\347\032\357\033\343\034\355\037\346\040\361\041" +
    "\352\042\341\043\344\044\360\046\350\066\u019b\001\001" +
    "\000\004\064\u019c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\016\260" +
    "\055\u01a1\073\257\074\256\001\001\000\002\001\001\000" +
    "\004\063\u01a3\001\001\000\046\011\302\012\044\015\277" +
    "\021\272\025\265\027\310\031\275\032\311\033\270\034" +
    "\305\037\273\040\313\041\301\042\267\043\271\044\314" +
    "\046\276\067\u01a4\001\001\000\004\064\u01a5\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\016\260\055\u01a8" +
    "\073\257\074\256\001\001\000\002\001\001\000\004\063" +
    "\u01aa\001\001\000\046\011\353\012\044\015\351\021\345" +
    "\025\340\027\356\031\347\032\357\033\343\034\355\037" +
    "\346\040\361\041\352\042\341\043\344\044\360\046\350" +
    "\066\u01ab\001\001\000\004\064\u01ac\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //codigo
    ArrayList<ErrorSintactico> listaErrores = new ArrayList<>();

    public void setAccion(String tipo, String mensaje, String accion){
        //listaErrores.add(new ErrorSintactico());
    }

	private Symbol s;
	public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void syntax_error(Symbol s){
        String message = s.toString();
        StringBuilder m = new StringBuilder("Error: ");
        String cadena =  (String) s.value;
        int columna = s.left+1;
        int linea = s.right+1;
        
        agregarError("Sintactico",cadena,"No se esperaba un token tipo <"+s.value+">", linea, columna);
    }

	public void agregarError(String tipo, String cadena, String descripcion, int linea, int columna){
        System.out.println("Tipo: "+tipo+"\tCadena: "+cadena+", descripcion: "+descripcion+", Linea: "+linea+", Columna: "+columna);
		//errores.getErrores().remove(errores.getErrores().size()-1);
        //errores.agregarError(tipo, cadena, descripcion, new Pos(linea, columna));
    }

    /*public void syntax_error(Symbol s){
        try {
            listaErrores.add(new ErrorSintactico(s.right+1,
            s.left+1, 
            (String) s.value, 
            "Error sintactico en el codigo, en la linea y columna especificada. Revise que su codigo se correcto."));
            System.out.println((s.right+1)+", Col: "+(s.left+1)+", TokenL: "+s.value+", Descript: "+"Error: Falta el Token \"var\"");
        } catch (Exception e) {
            System.out.println("Error " + e.toString());
        }
    }*/


	public void unrecovered_syntax_error(Symbol cur_token){
        /*if(cur_token.toString().equals("#0")){
            errores.agregarError("Sintactico","Fin del archivo", "No se pudo recuperar y seguir analizando, no se encontraron mas tokens.",new Pos(cur_token.left,cur_token.right));
        }else{
            errores.agregarError("Sintactico", (String)cur_token.value, "No se pudo recuperar y seguir analizando.",new Pos(cur_token.left,cur_token.right));
        }*/
        System.out.println("No se pudo recuperar y seguir analizando, no se encontraron mas tokens.");
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {


    

  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // especiales_q_retornan ::= struct_longitud 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("especiales_q_retornan",60, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // especiales_q_retornan ::= struct_sumarizar 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("especiales_q_retornan",60, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // especiales_q_retornan ::= struct_reproducir 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("especiales_q_retornan",60, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // state_continuar ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("state_continuar",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // state_continuar ::= CONTINUAR 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("state_continuar",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // struct_hacer ::= HACER st_ind code_funcion state_continuar st_ded MIENTRAS PA_A struct_operador_logico PA_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_hacer",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // struct_mientras ::= MIENTRAS PA_A struct_operador_logico PA_C st_ind code_funcion st_ded 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_mientras",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // incremento_para ::= IDENTIFICADOR MENOS_MENOS 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("incremento_para",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // incremento_para ::= IDENTIFICADOR MAS_MAS 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("incremento_para",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // incremento_para ::= IDENTIFICADOR MAS_IGUAL valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("incremento_para",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // incremento_para ::= IDENTIFICADOR IGUAL valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("incremento_para",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // condicion_para ::= struct_operador_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion_para",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // para_asig_var ::= IDENTIFICADOR IGUAL valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("para_asig_var",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // para_asig_var ::= VAR tipo_dato IDENTIFICADOR IGUAL valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("para_asig_var",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // struct_para ::= PARA PA_A para_asig_var PUNTO_COMA condicion_para PUNTO_COMA incremento_para PA_C st_ind code_funcion st_ded 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_para",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // caso_salir ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("caso_salir",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // caso_salir ::= SALIR 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("caso_salir",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // struct_caso ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_caso",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // struct_caso ::= DEFAULT st_ind code_funcion st_ded 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_caso",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // struct_caso ::= CASO valor_operacion st_ind code_funcion caso_salir st_ded struct_caso 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_caso",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // struct_switch ::= SWITCH PA_A IDENTIFICADOR PA_C st_ind struct_caso st_ded 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_switch",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // struct_sino ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_sino",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // struct_sino ::= SINO st_ind code_funcion st_ded 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_sino",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // struct_sino ::= SINO_SI PA_A struct_operador_logico PA_C st_ind code_funcion st_ded struct_sino 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_sino",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // struct_si ::= SI PA_A struct_operador_logico PA_C st_ind code_funcion st_ded struct_sino 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_si",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // struct_principal ::= PRINCIPAL PA_A PA_C st_ind code_metodo st_ded 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_principal",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // tipo_orden ::= PRIMOS 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_orden",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // tipo_orden ::= IMPARES 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_orden",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // tipo_orden ::= PARES 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_orden",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // tipo_orden ::= DESCENDENTE 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_orden",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // tipo_orden ::= ASCENDENTE 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_orden",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // notas ::= LA_S 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // notas ::= SOL_S 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // notas ::= FA_S 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // notas ::= RE_S 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // notas ::= DO_S 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // notas ::= SI 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // notas ::= LA 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // notas ::= SOL 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // notas ::= FA 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // notas ::= MI 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // notas ::= RE 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // notas ::= DO 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // mensajes ::= struct_operador_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mensajes",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // mensajes ::= mensajes MAS struct_operador_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mensajes",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // struct_mensaje ::= MENSAJE PA_A PA_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_mensaje",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // struct_mensaje ::= MENSAJE PA_A mensajes PA_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_mensaje",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // struct_longitud ::= LONGITUD PA_A valor_operacion PA_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_longitud",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // struct_sumarizar ::= SUMARIZAR PA_A IDENTIFICADOR PA_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_sumarizar",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // struct_ordenar ::= ORDENAR PA_A IDENTIFICADOR COMA tipo_orden PA_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_ordenar",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // struct_esperar ::= ESPERAR PA_A valor_operacion COMA valor_operacion PA_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_esperar",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // struct_reproducir ::= REPRODUCIR PA_A notas COMA valor_operacion COMA valor_operacion COMA valor_operacion PA_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_reproducir",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // code_metodo ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // code_metodo ::= struct_mensaje code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // code_metodo ::= struct_longitud code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // code_metodo ::= struct_sumarizar code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // code_metodo ::= struct_ordenar code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // code_metodo ::= struct_esperar code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // code_metodo ::= struct_reproducir code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // code_metodo ::= struct_hacer code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // code_metodo ::= struct_mientras code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // code_metodo ::= struct_para code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // code_metodo ::= struct_switch code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // code_metodo ::= struct_si code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // code_metodo ::= strunt_llamada_funcion code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // code_metodo ::= struct_asig_arreglo code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // code_metodo ::= struct_declaracion_array code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // code_metodo ::= struc_asig_var code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // code_metodo ::= struct_declaracion_var code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // code_funcion ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // code_funcion ::= RETORNAR struct_operador_logico code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // code_funcion ::= struct_mensaje code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // code_funcion ::= struct_longitud code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // code_funcion ::= struct_sumarizar code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // code_funcion ::= struct_ordenar code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // code_funcion ::= struct_esperar code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // code_funcion ::= struct_reproducir code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // code_funcion ::= struct_hacer code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // code_funcion ::= struct_mientras code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // code_funcion ::= struct_para code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // code_funcion ::= struct_switch code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // code_funcion ::= struct_si code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // code_funcion ::= strunt_llamada_funcion code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // code_funcion ::= struct_asig_arreglo code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // code_funcion ::= struct_declaracion_array code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // code_funcion ::= struc_asig_var code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // code_funcion ::= struct_declaracion_var code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // param_vacio ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("param_vacio",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // params_lleno ::= tipo_dato IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params_lleno",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // params_lleno ::= struct_parametros COMA tipo_dato IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params_lleno",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // struct_parametros ::= param_vacio 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_parametros",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // struct_parametros ::= params_lleno 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_parametros",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // struct_procedimiento ::= KEEP IDENTIFICADOR PA_A struct_parametros PA_C st_ind code_metodo st_ded 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_procedimiento",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // struct_procedimiento ::= IDENTIFICADOR PA_A struct_parametros PA_C st_ind code_metodo st_ded 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_procedimiento",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // struct_funcion ::= RETORNAR 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_funcion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // struct_funcion ::= KEEP tipo_dato IDENTIFICADOR PA_A struct_parametros PA_C st_ind code_funcion st_ded 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_funcion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // struct_funcion ::= tipo_dato IDENTIFICADOR PA_A struct_parametros PA_C st_ind code_funcion st_ded 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_funcion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // struct_asig_arreglo ::= IDENTIFICADOR dim_arreglo IGUAL tipo_valor_op_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_asig_arreglo",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // tipo_valor_op_logico ::= struct_operador_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_valor_op_logico",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // valores_array ::= tipo_valor_op_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valores_array",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // valores_array ::= valores_array COMA tipo_valor_op_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valores_array",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // valores_array_mas_dim ::= valores_array_mas_dim COMA LLAVE_A valores_array LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valores_array_mas_dim",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // valores_array_mas_dim ::= LLAVE_A valores_array LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valores_array_mas_dim",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // valores_array_mas_dim ::= valores_array_mas_dim COMA LLAVE_A valores_array_mas_dim LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valores_array_mas_dim",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // valores_array_mas_dim ::= LLAVE_A valores_array_mas_dim LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valores_array_mas_dim",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // valor_arreglo ::= valores_array 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor_arreglo",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // valor_arreglo ::= valores_array_mas_dim 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor_arreglo",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // dim_arreglo ::= CORCHETE_A valor_operacion CORCHETE_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("dim_arreglo",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // dim_arreglo ::= dim_arreglo CORCHETE_A valor_operacion CORCHETE_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("dim_arreglo",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // struct_declaracion_array ::= error tipo_dato ARREGLO IDENTIFICADOR dim_arreglo 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		parser.agregarError("Sintactico",(String)e,"Se esperaba el Simbolo ID o fallo en la declaracion", eright+1, eleft+1);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // struct_declaracion_array ::= error tipo_dato ARREGLO IDENTIFICADOR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		parser.agregarError("Sintactico",(String)e,"Se esperaba el Simbolo ID o fallo en la declaracion", eright+1, eleft+1);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // struct_declaracion_array ::= error tipo_dato ARREGLO IDENTIFICADOR dim_arreglo IGUAL LLAVE_A valor_arreglo LLAVE_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).value;
		parser.agregarError("Sintactico",(String)e,"Se esperaba el Simbolo ID o fallo en la declaracion", eright+1, eleft+1);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // struct_declaracion_array ::= keep_state VAR tipo_dato ARREGLO IDENTIFICADOR dim_arreglo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // struct_declaracion_array ::= keep_state VAR tipo_dato ARREGLO IDENTIFICADOR 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // struct_declaracion_array ::= keep_state VAR tipo_dato ARREGLO IDENTIFICADOR dim_arreglo IGUAL LLAVE_A valor_arreglo LLAVE_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // struct_declaracion_array ::= struct_declaracion_array COMA IDENTIFICADOR dim_arreglo IGUAL LLAVE_A valor_arreglo LLAVE_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // struct_declaracion_array ::= struct_declaracion_array COMA IDENTIFICADOR 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // struct_declaracion_array ::= struct_declaracion_array COMA IDENTIFICADOR dim_arreglo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // struc_asig_var ::= IDENTIFICADOR MENOS_MENOS 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struc_asig_var",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // struc_asig_var ::= IDENTIFICADOR MAS_MAS 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struc_asig_var",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // struc_asig_var ::= IDENTIFICADOR MAS_IGUAL struct_operador_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struc_asig_var",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // struc_asig_var ::= IDENTIFICADOR IGUAL struct_operador_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struc_asig_var",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // valor_operacion ::= valor 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // valor_operacion ::= PA_A valor_operacion PA_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // valor_operacion ::= valor_operacion POTENCIA valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // valor_operacion ::= valor_operacion MODULO valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // valor_operacion ::= valor_operacion DIVISION valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // valor_operacion ::= valor_operacion POR valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // valor_operacion ::= valor_operacion MENOS valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // valor_operacion ::= valor_operacion MAS valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // struct_operador_relacional ::= IS_NULL valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // struct_operador_relacional ::= valor_operacion MENOR_IGUAL valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // struct_operador_relacional ::= valor_operacion MAYOR_IGUAL valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // struct_operador_relacional ::= valor_operacion MENOR_Q valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // struct_operador_relacional ::= valor_operacion MAYOR_Q valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // struct_operador_relacional ::= valor_operacion DIFERENTE valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // struct_operador_relacional ::= valor_operacion IGUAL_IGUAL valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // struct_operador_logico ::= valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // struct_operador_logico ::= struct_operador_relacional 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // struct_operador_logico ::= NOT PA_A struct_operador_logico PA_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // struct_operador_logico ::= struct_operador_logico NAND struct_operador_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // struct_operador_logico ::= struct_operador_logico AND struct_operador_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // struct_operador_logico ::= struct_operador_logico XOR struct_operador_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // struct_operador_logico ::= struct_operador_logico NOR struct_operador_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // struct_operador_logico ::= struct_operador_logico OR struct_operador_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // tipo_dato ::= error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                parser.agregarError("Sintactico",(String)e,"Se esperaba un tipo de variable o un keep", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // tipo_dato ::= BOOLEAN 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // tipo_dato ::= CADENA_RSV 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tipo_dato ::= CARACTER_RSV 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tipo_dato ::= ENTERO 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipo_dato ::= DOBLE 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // struct_llamada_arreglo ::= IDENTIFICADOR dim_arreglo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_llamada_arreglo",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // state_params ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("state_params",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // state_params ::= parametros 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("state_params",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parametros ::= valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametros",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametros ::= parametros COMA valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametros",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // strunt_llamada_funcion ::= IDENTIFICADOR PA_A state_params PA_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("strunt_llamada_funcion",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // valor ::= FALSE 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // valor ::= TRUE 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // valor ::= CARACTER 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // valor ::= CADENA 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // valor ::= DECIMAL 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // valor ::= NUMERO 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // valor ::= especiales_q_retornan 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // valor ::= struct_llamada_arreglo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // valor ::= strunt_llamada_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // valor ::= IDENTIFICADOR 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // valor_declaracion_operacion ::= valor 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor_declaracion_operacion",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // valor_declaracion_operacion ::= PA_A valor_declaracion_operacion PA_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor_declaracion_operacion",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // valor_declaracion_operacion ::= valor_declaracion_operacion POTENCIA valor_declaracion_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor_declaracion_operacion",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // valor_declaracion_operacion ::= valor_declaracion_operacion MODULO valor_declaracion_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor_declaracion_operacion",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // valor_declaracion_operacion ::= valor_declaracion_operacion DIVISION valor_declaracion_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor_declaracion_operacion",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // valor_declaracion_operacion ::= valor_declaracion_operacion POR valor_declaracion_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor_declaracion_operacion",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // valor_declaracion_operacion ::= valor_declaracion_operacion MENOS valor_declaracion_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor_declaracion_operacion",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // valor_declaracion_operacion ::= valor_declaracion_operacion MAS valor_declaracion_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor_declaracion_operacion",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // keep_state ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("keep_state",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // keep_state ::= KEEP 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("keep_state",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // struct_declaracion_var ::= error tipo_dato IDENTIFICADOR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
            	parser.agregarError("Sintactico",(String)e,"Se esperaba el Simbolo var", eright+1, eleft+1); 
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // struct_declaracion_var ::= error tipo_dato IDENTIFICADOR IGUAL struct_operador_logico 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		
				parser.agregarError("Sintactico",(String)e,"Se esperaba el Simbolo var", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // struct_declaracion_var ::= struct_declaracion_var COMA error struct_operador_logico 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Se esperaba el Simbolo ID o fallo en la declaracion", eright+1, eleft+1);
               // System.out.println("Err: "+(eright+1)+", Col: "+(eleft+1)+", Token: "+e+", Descript: "+"Error de declaracion de variable");
                //parser.listaErrores.add(new ErrorSintactico(eright+1,eleft+1,(String) e,"Error de declaracion de variable"));
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // struct_declaracion_var ::= keep_state VAR tipo_dato IDENTIFICADOR 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // struct_declaracion_var ::= keep_state VAR tipo_dato IDENTIFICADOR IGUAL struct_operador_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // struct_declaracion_var ::= struct_declaracion_var COMA IDENTIFICADOR IGUAL struct_operador_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // struct_declaracion_var ::= struct_declaracion_var COMA IDENTIFICADOR 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // struc_code ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struc_code",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // struc_code ::= struct_principal struc_code 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struc_code",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // struc_code ::= struct_procedimiento struc_code 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struc_code",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // struc_code ::= struct_funcion struc_code 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struc_code",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // struc_code ::= struct_declaracion_array struc_code 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struc_code",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // struc_code ::= struct_declaracion_var struc_code 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struc_code",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // struct_extiende ::= EXTIENDE IDENTIFICADOR 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_extiende",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // struct_extiende ::= struct_extiende COMA IDENTIFICADOR 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_extiende",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // extiende_state ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("extiende_state",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // extiende_state ::= struct_extiende 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("extiende_state",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // struct_pista ::= PISTA IDENTIFICADOR extiende_state st_ind struc_code st_final 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_pista",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // codigo ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigo ::= struct_pista codigo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // st_final ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("st_final",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // st_final ::= DEDENT 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("st_final",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // st_ded ::= DEDENT 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("st_ded",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // st_ind ::= INDENT 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("st_ind",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // blanco ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("blanco",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // blanco ::= INDENT blanco DEDENT blanco 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("blanco",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= blanco codigo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

