
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Aug 28 18:44:18 CST 2021
//----------------------------------------------------

package backend.analizador;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.Stack;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Aug 28 18:44:18 CST 2021
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0139\000\002\002\004\000\002\002\004\000\002\003" +
    "\006\000\002\003\002\000\002\063\003\000\002\064\003" +
    "\000\002\065\003\000\002\065\002\000\002\004\004\000" +
    "\002\004\002\000\002\005\010\000\002\005\010\000\002" +
    "\007\003\000\002\007\002\000\002\006\005\000\002\006" +
    "\004\000\002\006\003\000\002\010\004\000\002\010\004" +
    "\000\002\010\004\000\002\010\004\000\002\010\004\000" +
    "\002\010\002\000\002\011\005\000\002\011\007\000\002" +
    "\011\010\000\002\011\006\000\002\011\006\000\002\011" +
    "\007\000\002\011\005\000\002\012\003\000\002\012\002" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\046\006\000\002\046\006\000\002\050\005" +
    "\000\002\050\003\000\002\050\005\000\002\050\004\000" +
    "\002\051\003\000\002\051\002\000\002\047\004\000\002" +
    "\047\004\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\006\000\002" +
    "\017\003\000\002\017\003\000\002\017\004\000\002\017" +
    "\004\000\002\017\004\000\002\077\003\000\002\077\003" +
    "\000\002\077\003\000\002\077\003\000\002\077\003\000" +
    "\002\060\005\000\002\060\005\000\002\060\005\000\002" +
    "\060\005\000\002\060\005\000\002\060\005\000\002\060" +
    "\004\000\002\060\004\000\002\060\004\000\002\100\003" +
    "\000\002\100\003\000\002\100\003\000\002\100\003\000" +
    "\002\100\003\000\002\100\003\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\003" +
    "\000\002\020\004\000\002\020\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\004\000\002\015\004\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\004\000\002\015\004\000\002\021\006\000\002\021\005" +
    "\000\002\021\012\000\002\021\014\000\002\021\007\000" +
    "\002\021\010\000\002\021\013\000\002\021\006\000\002" +
    "\021\007\000\002\022\006\000\002\022\005\000\002\022" +
    "\005\000\002\022\006\000\002\023\003\000\002\023\003" +
    "\000\002\075\005\000\002\075\007\000\002\075\005\000" +
    "\002\075\007\000\002\075\006\000\002\075\006\000\002" +
    "\075\004\000\002\024\005\000\002\024\003\000\002\024" +
    "\005\000\002\024\005\000\002\061\003\000\002\031\006" +
    "\000\002\031\006\000\002\031\006\000\002\031\006\000" +
    "\002\035\012\000\002\035\013\000\002\035\011\000\002" +
    "\035\012\000\002\035\013\000\002\035\007\000\002\035" +
    "\012\000\002\035\013\000\002\036\011\000\002\036\012" +
    "\000\002\036\011\000\002\036\011\000\002\036\012\000" +
    "\002\036\012\000\002\055\003\000\002\055\003\000\002" +
    "\073\006\000\002\073\004\000\002\073\004\000\002\073" +
    "\005\000\002\073\006\000\002\074\002\000\002\066\004" +
    "\000\002\066\004\000\002\066\004\000\002\066\004\000" +
    "\002\066\004\000\002\066\004\000\002\066\004\000\002" +
    "\066\004\000\002\066\004\000\002\066\004\000\002\066" +
    "\004\000\002\066\004\000\002\066\004\000\002\066\004" +
    "\000\002\066\004\000\002\066\004\000\002\066\005\000" +
    "\002\066\004\000\002\066\002\000\002\067\004\000\002" +
    "\067\004\000\002\067\004\000\002\067\004\000\002\067" +
    "\004\000\002\067\004\000\002\067\004\000\002\067\004" +
    "\000\002\067\004\000\002\067\004\000\002\067\004\000" +
    "\002\067\004\000\002\067\004\000\002\067\004\000\002" +
    "\067\004\000\002\067\004\000\002\067\002\000\002\037" +
    "\014\000\002\037\006\000\002\037\014\000\002\037\014" +
    "\000\002\037\014\000\002\037\005\000\002\040\010\000" +
    "\002\040\010\000\002\040\006\000\002\040\005\000\002" +
    "\041\010\000\002\041\006\000\002\041\010\000\002\041" +
    "\005\000\002\042\006\000\002\042\006\000\002\042\005" +
    "\000\002\043\006\000\002\043\006\000\002\043\005\000" +
    "\002\044\006\000\002\044\005\000\002\044\006\000\002" +
    "\044\005\000\002\062\005\000\002\062\003\000\002\062" +
    "\005\000\002\062\005\000\002\056\003\000\002\056\003" +
    "\000\002\056\003\000\002\056\003\000\002\056\003\000" +
    "\002\056\003\000\002\056\003\000\002\056\003\000\002" +
    "\056\003\000\002\056\003\000\002\056\003\000\002\056" +
    "\003\000\002\056\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
    "\002\057\003\000\002\045\010\000\002\045\007\000\002" +
    "\045\010\000\002\025\012\000\002\025\012\000\002\025" +
    "\012\000\002\025\010\000\002\025\011\000\002\025\006" +
    "\000\002\026\012\000\002\026\006\000\002\026\002\000" +
    "\002\026\012\000\002\026\012\000\002\026\010\000\002" +
    "\026\011\000\002\026\006\000\002\027\011\000\002\027" +
    "\011\000\002\027\007\000\002\027\011\000\002\072\011" +
    "\000\002\072\006\000\002\072\002\000\002\072\011\000" +
    "\002\072\011\000\002\072\006\000\002\070\003\000\002" +
    "\070\002\000\002\032\015\000\002\032\014\000\002\032" +
    "\014\000\002\032\015\000\002\032\011\000\002\032\015" +
    "\000\002\052\007\000\002\052\005\000\002\052\006\000" +
    "\002\052\007\000\002\052\007\000\002\052\007\000\002" +
    "\052\005\000\002\052\005\000\002\052\005\000\002\053" +
    "\003\000\002\054\005\000\002\054\005\000\002\054\004" +
    "\000\002\054\004\000\002\054\005\000\002\054\005\000" +
    "\002\054\004\000\002\054\004\000\002\033\011\000\002" +
    "\033\011\000\002\033\011\000\002\033\010\000\002\033" +
    "\005\000\002\034\013\000\002\034\013\000\002\034\011" +
    "\000\002\034\013\000\002\034\013\000\002\034\005\000" +
    "\002\071\003\000\002\071\002\000\002\076\003\000\002" +
    "\076\003\000\002\076\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02e6\000\010\002\ufffe\004\ufffe\130\006\001\002\000" +
    "\006\002\ufff8\004\015\001\002\000\004\002\012\001\002" +
    "\000\006\130\006\131\ufffe\001\002\000\004\131\010\001" +
    "\002\000\012\002\ufffe\004\ufffe\130\006\131\ufffe\001\002" +
    "\000\010\002\uffff\004\uffff\131\uffff\001\002\000\004\002" +
    "\001\001\002\000\006\002\ufff8\004\015\001\002\000\004" +
    "\002\000\001\002\000\006\003\016\005\017\001\002\000" +
    "\010\003\021\006\022\130\ufff4\001\002\000\010\003\021" +
    "\006\022\130\ufff4\001\002\000\006\007\u02e2\130\ufff5\001" +
    "\002\000\006\007\ufff1\130\ufff1\001\002\000\004\005\u02e1" +
    "\001\002\000\004\130\025\001\002\000\034\002\uffeb\003" +
    "\037\004\uffeb\005\045\011\030\012\033\013\031\014\026" +
    "\015\036\041\044\042\uffe2\113\046\131\uffeb\001\002\000" +
    "\074\002\ufffd\003\ufffd\004\ufffd\005\ufffd\011\ufffd\012\ufffd" +
    "\013\ufffd\014\ufffd\015\ufffd\041\ufffd\042\ufffd\062\ufffd\066" +
    "\ufffd\067\ufffd\070\ufffd\071\ufffd\072\ufffd\073\ufffd\074\ufffd" +
    "\075\ufffd\076\ufffd\100\ufffd\101\ufffd\102\ufffd\110\ufffd\111" +
    "\ufffd\112\ufffd\113\ufffd\131\ufffd\001\002\000\010\003\uffcb" +
    "\005\uffcb\055\uffcb\001\002\000\034\002\uffeb\003\037\004" +
    "\uffeb\005\045\011\030\012\033\013\031\014\026\015\036" +
    "\041\044\042\uffe2\113\046\131\uffeb\001\002\000\010\003" +
    "\uffcc\005\uffcc\055\uffcc\001\002\000\010\003\uffc9\005\uffc9" +
    "\055\uffc9\001\002\000\036\002\uffeb\003\037\004\uffeb\005" +
    "\045\007\u0134\011\030\012\033\013\031\014\026\015\036" +
    "\041\044\042\uffe2\113\046\131\uffeb\001\002\000\010\003" +
    "\uffcd\005\uffcd\055\uffcd\001\002\000\034\002\uffeb\003\037" +
    "\004\uffeb\005\045\011\030\012\033\013\031\014\026\015" +
    "\036\041\044\042\uffe2\113\046\131\uffeb\001\002\000\004" +
    "\042\u02d2\001\002\000\010\003\uffca\005\uffca\055\uffca\001" +
    "\002\000\024\003\355\005\uffc8\011\030\012\033\013\031" +
    "\014\026\015\036\064\u02c8\065\u02c7\001\002\000\034\002" +
    "\uffeb\003\037\004\uffeb\005\045\011\030\012\033\013\031" +
    "\014\026\015\036\041\044\042\uffe2\113\046\131\uffeb\001" +
    "\002\000\004\005\u02b8\001\002\000\010\002\ufffa\004\ufffa" +
    "\131\u02b7\001\002\000\036\002\uffeb\003\037\004\uffeb\005" +
    "\045\007\u0128\011\030\012\033\013\031\014\026\015\036" +
    "\041\044\042\uffe2\113\046\131\uffeb\001\002\000\022\003" +
    "\355\005\u0299\011\030\012\033\013\031\014\026\015\036" +
    "\042\uffe3\001\002\000\004\064\u027f\001\002\000\006\003" +
    "\047\064\050\001\002\000\004\130\025\001\002\000\004" +
    "\065\051\001\002\000\004\130\025\001\002\000\042\003" +
    "\074\005\077\041\054\042\uffe2\062\073\066\062\072\066" +
    "\073\104\074\106\100\075\101\110\102\071\110\101\111" +
    "\105\112\111\131\uff3d\001\002\000\042\003\347\005\077" +
    "\041\054\042\uffe2\062\073\066\062\072\066\073\104\074" +
    "\106\100\075\101\110\102\071\110\101\111\105\112\111" +
    "\131\uff3d\001\002\000\004\042\uffe3\001\002\000\042\003" +
    "\347\005\077\041\054\042\uffe2\062\073\066\062\072\066" +
    "\073\104\074\106\100\075\101\110\102\071\110\101\111" +
    "\105\112\111\131\uff3d\001\002\000\042\003\347\005\077" +
    "\041\054\042\uffe2\062\073\066\062\072\066\073\104\074" +
    "\106\100\075\101\110\102\071\110\101\111\105\112\111" +
    "\131\uff3d\001\002\000\042\003\347\005\077\041\054\042" +
    "\uffe2\062\073\066\062\072\066\073\104\074\106\100\075" +
    "\101\110\102\071\110\101\111\105\112\111\131\uff3d\001" +
    "\002\000\044\003\347\005\077\007\u0134\041\054\042\uffe2" +
    "\062\073\066\062\072\066\073\104\074\106\100\075\101" +
    "\110\102\071\110\101\111\105\112\111\131\uff3d\001\002" +
    "\000\042\003\347\005\077\041\054\042\uffe2\062\073\066" +
    "\062\072\066\073\104\074\106\100\075\101\110\102\071" +
    "\110\101\111\105\112\111\131\uff3d\001\002\000\006\003" +
    "\u024d\064\u024e\001\002\000\042\003\347\005\077\041\054" +
    "\042\uffe2\062\073\066\062\072\066\073\104\074\106\100" +
    "\075\101\110\102\071\110\101\111\105\112\111\131\uff3d" +
    "\001\002\000\042\003\347\005\077\041\054\042\uffe2\062" +
    "\073\066\062\072\066\073\104\074\106\100\075\101\110" +
    "\102\071\110\101\111\105\112\111\131\uff3d\001\002\000" +
    "\042\003\347\005\077\041\054\042\uffe2\062\073\066\062" +
    "\072\066\073\104\074\106\100\075\101\110\102\071\110" +
    "\101\111\105\112\111\131\uff3d\001\002\000\004\064\u0200" +
    "\001\002\000\042\003\347\005\077\041\054\042\uffe2\062" +
    "\073\066\062\072\066\073\104\074\106\100\075\101\110" +
    "\102\071\110\101\111\105\112\111\131\uff3d\001\002\000" +
    "\044\003\347\005\077\007\u0128\041\054\042\uffe2\062\073" +
    "\066\062\072\066\073\104\074\106\100\075\101\110\102" +
    "\071\110\101\111\105\112\111\131\uff3d\001\002\000\006" +
    "\003\u01ec\064\u01ed\001\002\000\042\003\347\005\077\041" +
    "\054\042\uffe2\062\073\066\062\072\066\073\104\074\106" +
    "\100\075\101\110\102\071\110\101\111\105\112\111\131" +
    "\uff3d\001\002\000\006\003\u01ae\064\u01af\001\002\000\032" +
    "\003\355\011\030\012\033\013\031\014\026\015\036\043" +
    "\354\052\353\053\350\054\351\056\200\131\317\001\002" +
    "\000\006\003\u0185\064\u0186\001\002\000\042\003\347\005" +
    "\077\041\054\042\uffe2\062\073\066\062\072\066\073\104" +
    "\074\106\100\075\101\110\102\071\110\101\111\105\112" +
    "\111\131\uff3d\001\002\000\020\003\u0177\043\u0178\052\u0175" +
    "\053\u017a\054\u0176\056\200\064\265\001\002\000\042\003" +
    "\347\005\077\041\054\042\uffe2\062\073\066\062\072\066" +
    "\073\104\074\106\100\075\101\110\102\071\110\101\111" +
    "\105\112\111\131\uff3d\001\002\000\006\003\u016d\064\u016e" +
    "\001\002\000\042\003\347\005\077\041\054\042\uffe2\062" +
    "\073\066\062\072\066\073\104\074\106\100\075\101\110" +
    "\102\071\110\101\111\105\112\111\131\uff3d\001\002\000" +
    "\042\003\347\005\077\041\054\042\uffe2\062\073\066\062" +
    "\072\066\073\104\074\106\100\075\101\110\102\071\110" +
    "\101\111\105\112\111\131\uff3d\001\002\000\006\003\u0158" +
    "\064\u0159\001\002\000\006\003\u0151\064\u0152\001\002\000" +
    "\006\003\321\130\025\001\002\000\004\131\317\001\002" +
    "\000\006\003\303\064\304\001\002\000\006\003\112\064" +
    "\113\001\002\000\004\065\302\001\002\000\066\003\140" +
    "\005\121\016\134\017\117\020\132\021\136\022\153\023" +
    "\156\024\143\025\123\026\124\027\130\030\125\031\116" +
    "\032\122\044\114\045\135\046\141\047\137\050\157\051" +
    "\126\064\147\065\145\100\075\110\101\111\105\001\002" +
    "\000\146\002\uffdd\003\uffdd\004\uffdd\005\uffdd\007\uffdd\010" +
    "\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd" +
    "\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\025\uffdd\026" +
    "\uffdd\027\uffdd\030\uffdd\031\uffdd\033\uffdd\034\uffdd\035\uffdd" +
    "\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\057\uffdd\061" +
    "\uffdd\062\uffdd\065\uffdd\066\uffdd\070\uffdd\072\uffdd\073\uffdd" +
    "\074\uffdd\075\uffdd\076\uffdd\100\uffdd\101\uffdd\102\uffdd\110" +
    "\uffdd\111\uffdd\112\uffdd\113\uffdd\130\uffdd\131\uffdd\001\002" +
    "\000\146\002\uffe0\003\uffe0\004\uffe0\005\uffe0\007\uffe0\010" +
    "\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0" +
    "\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\025\uffe0\026" +
    "\uffe0\027\uffe0\030\uffe0\031\uffe0\033\uffe0\034\uffe0\035\uffe0" +
    "\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\057\uffe0\061" +
    "\uffe0\062\uffe0\065\uffe0\066\uffe0\070\uffe0\072\uffe0\073\uffe0" +
    "\074\uffe0\075\uffe0\076\uffe0\100\uffe0\101\uffe0\102\uffe0\110" +
    "\uffe0\111\uffe0\112\uffe0\113\uffe0\130\uffe0\131\uffe0\001\002" +
    "\000\114\002\uffba\003\uffba\004\uffba\005\uffba\007\uffba\010" +
    "\uffba\011\uffba\012\uffba\013\uffba\014\uffba\015\uffba\025\uffba" +
    "\026\uffba\027\uffba\030\uffba\031\uffba\033\uffba\041\uffba\042" +
    "\uffba\061\uffba\062\uffba\065\uffba\066\uffba\070\uffba\072\uffba" +
    "\073\uffba\074\uffba\075\uffba\076\uffba\100\uffba\101\uffba\102" +
    "\uffba\110\uffba\111\uffba\112\uffba\113\uffba\131\uffba\001\002" +
    "\000\114\002\uffad\003\uffad\004\uffad\005\uffad\007\uffad\010" +
    "\uffad\011\uffad\012\uffad\013\uffad\014\uffad\015\uffad\025\uffad" +
    "\026\uffad\027\uffad\030\uffad\031\uffad\033\uffad\041\uffad\042" +
    "\uffad\061\uffad\062\uffad\065\uffad\066\uffad\070\uffad\072\uffad" +
    "\073\uffad\074\uffad\075\uffad\076\uffad\100\uffad\101\uffad\102" +
    "\uffad\110\uffad\111\uffad\112\uffad\113\uffad\131\uffad\001\002" +
    "\000\004\003\301\001\002\000\152\002\uffe1\003\uffe1\004" +
    "\uffe1\005\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1" +
    "\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022" +
    "\uffe1\023\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1" +
    "\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041" +
    "\uffe1\042\uffe1\056\200\057\uffe1\061\uffe1\062\uffe1\064\265" +
    "\065\uffe1\066\uffe1\070\uffe1\072\uffe1\073\uffe1\074\uffe1\075" +
    "\uffe1\076\uffe1\100\uffe1\101\uffe1\102\uffe1\110\uffe1\111\uffe1" +
    "\112\uffe1\113\uffe1\130\uffe1\131\uffe1\001\002\000\006\003" +
    "\260\064\261\001\002\000\114\002\uffb9\003\uffb9\004\uffb9" +
    "\005\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\014" +
    "\uffb9\015\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9" +
    "\033\uffb9\041\uffb9\042\uffb9\061\uffb9\062\uffb9\065\uffb9\066" +
    "\uffb9\070\uffb9\072\uffb9\073\uffb9\074\uffb9\075\uffb9\076\uffb9" +
    "\100\uffb9\101\uffb9\102\uffb9\110\uffb9\111\uffb9\112\uffb9\113" +
    "\uffb9\131\uffb9\001\002\000\114\002\uffb8\003\uffb8\004\uffb8" +
    "\005\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014" +
    "\uffb8\015\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8" +
    "\033\uffb8\041\uffb8\042\uffb8\061\uffb8\062\uffb8\065\uffb8\066" +
    "\uffb8\070\uffb8\072\uffb8\073\uffb8\074\uffb8\075\uffb8\076\uffb8" +
    "\100\uffb8\101\uffb8\102\uffb8\110\uffb8\111\uffb8\112\uffb8\113" +
    "\uffb8\131\uffb8\001\002\000\114\002\uffbb\003\uffbb\004\uffbb" +
    "\005\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\014" +
    "\uffbb\015\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb" +
    "\033\uffbb\041\uffbb\042\uffbb\061\uffbb\062\uffbb\065\uffbb\066" +
    "\uffbb\070\uffbb\072\uffbb\073\uffbb\074\uffbb\075\uffbb\076\uffbb" +
    "\100\uffbb\101\uffbb\102\uffbb\110\uffbb\111\uffbb\112\uffbb\113" +
    "\uffbb\131\uffbb\001\002\000\146\002\uffda\003\uffda\004\uffda" +
    "\005\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014" +
    "\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda" +
    "\023\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\033" +
    "\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda" +
    "\042\uffda\057\uffda\061\uffda\062\uffda\065\uffda\066\uffda\070" +
    "\uffda\072\uffda\073\uffda\074\uffda\075\uffda\076\uffda\100\uffda" +
    "\101\uffda\102\uffda\110\uffda\111\uffda\112\uffda\113\uffda\130" +
    "\uffda\131\uffda\001\002\000\146\002\ufecb\003\ufecb\004\ufecb" +
    "\005\ufecb\007\ufecb\010\ufecb\011\ufecb\012\ufecb\013\ufecb\014" +
    "\ufecb\015\ufecb\016\ufecb\017\ufecb\020\ufecb\021\ufecb\022\ufecb" +
    "\023\ufecb\025\ufecb\026\ufecb\027\ufecb\030\ufecb\031\ufecb\033" +
    "\ufecb\034\ufecb\035\ufecb\036\ufecb\037\ufecb\040\ufecb\041\ufecb" +
    "\042\ufecb\057\ufecb\061\ufecb\062\ufecb\065\ufecb\066\ufecb\070" +
    "\ufecb\072\ufecb\073\ufecb\074\ufecb\075\ufecb\076\ufecb\100\ufecb" +
    "\101\ufecb\102\ufecb\110\ufecb\111\ufecb\112\ufecb\113\ufecb\130" +
    "\ufecb\131\ufecb\001\002\000\114\002\uffbc\003\uffbc\004\uffbc" +
    "\005\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014" +
    "\uffbc\015\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc" +
    "\033\uffbc\041\uffbc\042\uffbc\061\uffbc\062\uffbc\065\uffbc\066" +
    "\uffbc\070\uffbc\072\uffbc\073\uffbc\074\uffbc\075\uffbc\076\uffbc" +
    "\100\uffbc\101\uffbc\102\uffbc\110\uffbc\111\uffbc\112\uffbc\113" +
    "\uffbc\131\uffbc\001\002\000\146\002\ufec9\003\ufec9\004\ufec9" +
    "\005\ufec9\007\ufec9\010\ufec9\011\ufec9\012\ufec9\013\ufec9\014" +
    "\ufec9\015\ufec9\016\ufec9\017\ufec9\020\ufec9\021\ufec9\022\ufec9" +
    "\023\ufec9\025\ufec9\026\ufec9\027\ufec9\030\ufec9\031\ufec9\033" +
    "\ufec9\034\ufec9\035\ufec9\036\ufec9\037\ufec9\040\ufec9\041\ufec9" +
    "\042\ufec9\057\ufec9\061\ufec9\062\ufec9\065\ufec9\066\ufec9\070" +
    "\ufec9\072\ufec9\073\ufec9\074\ufec9\075\ufec9\076\ufec9\100\ufec9" +
    "\101\ufec9\102\ufec9\110\ufec9\111\ufec9\112\ufec9\113\ufec9\130" +
    "\ufec9\131\ufec9\001\002\000\114\002\uffac\003\uffac\004\uffac" +
    "\005\uffac\007\uffac\010\uffac\011\uffac\012\uffac\013\uffac\014" +
    "\uffac\015\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac" +
    "\033\uffac\041\uffac\042\uffac\061\uffac\062\uffac\065\uffac\066" +
    "\uffac\070\uffac\072\uffac\073\uffac\074\uffac\075\uffac\076\uffac" +
    "\100\uffac\101\uffac\102\uffac\110\uffac\111\uffac\112\uffac\113" +
    "\uffac\131\uffac\001\002\000\010\003\254\033\253\065\255" +
    "\001\002\000\114\002\uffae\003\uffae\004\uffae\005\uffae\007" +
    "\uffae\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae\015\uffae" +
    "\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae\033\uffae\041" +
    "\uffae\042\uffae\061\uffae\062\uffae\065\uffae\066\uffae\070\uffae" +
    "\072\uffae\073\uffae\074\uffae\075\uffae\076\uffae\100\uffae\101" +
    "\uffae\102\uffae\110\uffae\111\uffae\112\uffae\113\uffae\131\uffae" +
    "\001\002\000\146\002\uffdc\003\uffdc\004\uffdc\005\uffdc\007" +
    "\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc" +
    "\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\025" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\033\uffdc\034\uffdc" +
    "\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\057" +
    "\uffdc\061\uffdc\062\uffdc\065\uffdc\066\uffdc\070\uffdc\072\uffdc" +
    "\073\uffdc\074\uffdc\075\uffdc\076\uffdc\100\uffdc\101\uffdc\102" +
    "\uffdc\110\uffdc\111\uffdc\112\uffdc\113\uffdc\130\uffdc\131\uffdc" +
    "\001\002\000\114\002\uffab\003\uffab\004\uffab\005\uffab\007" +
    "\uffab\010\uffab\011\uffab\012\uffab\013\uffab\014\uffab\015\uffab" +
    "\025\uffab\026\uffab\027\uffab\030\uffab\031\uffab\033\uffab\041" +
    "\uffab\042\uffab\061\uffab\062\uffab\065\uffab\066\uffab\070\uffab" +
    "\072\uffab\073\uffab\074\uffab\075\uffab\076\uffab\100\uffab\101" +
    "\uffab\102\uffab\110\uffab\111\uffab\112\uffab\113\uffab\131\uffab" +
    "\001\002\000\146\002\uffd9\003\uffd9\004\uffd9\005\uffd9\007" +
    "\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9" +
    "\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\025" +
    "\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\033\uffd9\034\uffd9" +
    "\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\057" +
    "\uffd9\061\uffd9\062\uffd9\065\uffd9\066\uffd9\070\uffd9\072\uffd9" +
    "\073\uffd9\074\uffd9\075\uffd9\076\uffd9\100\uffd9\101\uffd9\102" +
    "\uffd9\110\uffd9\111\uffd9\112\uffd9\113\uffd9\130\uffd9\131\uffd9" +
    "\001\002\000\066\003\175\005\121\016\134\017\117\020" +
    "\132\021\136\022\153\023\156\025\123\026\124\027\130" +
    "\030\125\031\116\033\251\044\114\045\135\046\141\047" +
    "\137\050\157\051\126\056\200\064\147\065\250\100\075" +
    "\110\101\111\105\001\002\000\146\002\uffdb\003\uffdb\004" +
    "\uffdb\005\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb" +
    "\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022" +
    "\uffdb\023\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb" +
    "\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041" +
    "\uffdb\042\uffdb\057\uffdb\061\uffdb\062\uffdb\065\uffdb\066\uffdb" +
    "\070\uffdb\072\uffdb\073\uffdb\074\uffdb\075\uffdb\076\uffdb\100" +
    "\uffdb\101\uffdb\102\uffdb\110\uffdb\111\uffdb\112\uffdb\113\uffdb" +
    "\130\uffdb\131\uffdb\001\002\000\114\002\uffc1\003\uffc1\004" +
    "\uffc1\005\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1" +
    "\014\uffc1\015\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031" +
    "\uffc1\033\uffc1\041\uffc1\042\uffc1\061\uffc1\062\uffc1\065\uffc1" +
    "\066\uffc1\070\uffc1\072\uffc1\073\uffc1\074\uffc1\075\uffc1\076" +
    "\uffc1\100\uffc1\101\uffc1\102\uffc1\110\uffc1\111\uffc1\112\uffc1" +
    "\113\uffc1\131\uffc1\001\002\000\032\003\175\005\121\044" +
    "\114\045\135\046\141\047\137\050\157\051\126\064\147" +
    "\100\075\110\101\111\105\001\002\000\146\002\uffa1\003" +
    "\uffa1\004\uffa1\005\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1" +
    "\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021" +
    "\uffa1\022\uffa1\023\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1" +
    "\031\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\040" +
    "\uffa1\041\uffa1\042\uffa1\057\uffa1\061\uffa1\062\uffa1\065\uffa1" +
    "\066\uffa1\070\uffa1\072\uffa1\073\uffa1\074\uffa1\075\uffa1\076" +
    "\uffa1\100\uffa1\101\uffa1\102\uffa1\110\uffa1\111\uffa1\112\uffa1" +
    "\113\uffa1\130\uffa1\131\uffa1\001\002\000\050\003\uff27\005" +
    "\uff27\041\uff27\042\uff27\062\uff27\066\uff27\070\uff27\072\uff27" +
    "\073\uff27\074\uff27\075\uff27\076\uff27\100\uff27\101\uff27\102" +
    "\uff27\110\uff27\111\uff27\112\uff27\131\uff27\001\002\000\022" +
    "\003\uff23\025\233\026\232\027\235\030\234\031\236\033" +
    "\uff23\065\uff23\001\002\000\032\003\226\005\121\044\114" +
    "\045\135\046\141\047\137\050\157\051\126\064\147\100" +
    "\075\110\101\111\105\001\002\000\142\002\uffc0\003\uffc0" +
    "\004\uffc0\005\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013" +
    "\uffc0\014\uffc0\015\uffc0\016\163\017\173\020\167\021\170" +
    "\022\164\023\174\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031" +
    "\uffc0\033\166\034\161\035\165\036\172\037\171\040\162" +
    "\041\uffc0\042\uffc0\061\uffc0\062\uffc0\065\uffc0\066\uffc0\070" +
    "\uffc0\072\uffc0\073\uffc0\074\uffc0\075\uffc0\076\uffc0\100\uffc0" +
    "\101\uffc0\102\uffc0\110\uffc0\111\uffc0\112\uffc0\113\uffc0\131" +
    "\uffc0\001\002\000\146\002\uffdf\003\uffdf\004\uffdf\005\uffdf" +
    "\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015" +
    "\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf" +
    "\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\033\uffdf\034" +
    "\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf" +
    "\057\uffdf\061\uffdf\062\uffdf\065\uffdf\066\uffdf\070\uffdf\072" +
    "\uffdf\073\uffdf\074\uffdf\075\uffdf\076\uffdf\100\uffdf\101\uffdf" +
    "\102\uffdf\110\uffdf\111\uffdf\112\uffdf\113\uffdf\130\uffdf\131" +
    "\uffdf\001\002\000\146\002\ufeca\003\ufeca\004\ufeca\005\ufeca" +
    "\007\ufeca\010\ufeca\011\ufeca\012\ufeca\013\ufeca\014\ufeca\015" +
    "\ufeca\016\ufeca\017\ufeca\020\ufeca\021\ufeca\022\ufeca\023\ufeca" +
    "\025\ufeca\026\ufeca\027\ufeca\030\ufeca\031\ufeca\033\ufeca\034" +
    "\ufeca\035\ufeca\036\ufeca\037\ufeca\040\ufeca\041\ufeca\042\ufeca" +
    "\057\ufeca\061\ufeca\062\ufeca\065\ufeca\066\ufeca\070\ufeca\072" +
    "\ufeca\073\ufeca\074\ufeca\075\ufeca\076\ufeca\100\ufeca\101\ufeca" +
    "\102\ufeca\110\ufeca\111\ufeca\112\ufeca\113\ufeca\130\ufeca\131" +
    "\ufeca\001\002\000\114\002\uffaa\003\uffaa\004\uffaa\005\uffaa" +
    "\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa\015" +
    "\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\033\uffaa" +
    "\041\uffaa\042\uffaa\061\uffaa\062\uffaa\065\uffaa\066\uffaa\070" +
    "\uffaa\072\uffaa\073\uffaa\074\uffaa\075\uffaa\076\uffaa\100\uffaa" +
    "\101\uffaa\102\uffaa\110\uffaa\111\uffaa\112\uffaa\113\uffaa\131" +
    "\uffaa\001\002\000\146\002\uffde\003\uffde\004\uffde\005\uffde" +
    "\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015" +
    "\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde" +
    "\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\033\uffde\034" +
    "\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde" +
    "\057\uffde\061\uffde\062\uffde\065\uffde\066\uffde\070\uffde\072" +
    "\uffde\073\uffde\074\uffde\075\uffde\076\uffde\100\uffde\101\uffde" +
    "\102\uffde\110\uffde\111\uffde\112\uffde\113\uffde\130\uffde\131" +
    "\uffde\001\002\000\004\003\160\001\002\000\114\002\uffa9" +
    "\003\uffa9\004\uffa9\005\uffa9\007\uffa9\010\uffa9\011\uffa9\012" +
    "\uffa9\013\uffa9\014\uffa9\015\uffa9\025\uffa9\026\uffa9\027\uffa9" +
    "\030\uffa9\031\uffa9\033\uffa9\041\uffa9\042\uffa9\061\uffa9\062" +
    "\uffa9\065\uffa9\066\uffa9\070\uffa9\072\uffa9\073\uffa9\074\uffa9" +
    "\075\uffa9\076\uffa9\100\uffa9\101\uffa9\102\uffa9\110\uffa9\111" +
    "\uffa9\112\uffa9\113\uffa9\131\uffa9\001\002\000\146\002\uffd8" +
    "\003\uffd8\004\uffd8\005\uffd8\007\uffd8\010\uffd8\011\uffd8\012" +
    "\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8" +
    "\021\uffd8\022\uffd8\023\uffd8\025\uffd8\026\uffd8\027\uffd8\030" +
    "\uffd8\031\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8" +
    "\040\uffd8\041\uffd8\042\uffd8\057\uffd8\061\uffd8\062\uffd8\065" +
    "\uffd8\066\uffd8\070\uffd8\072\uffd8\073\uffd8\074\uffd8\075\uffd8" +
    "\076\uffd8\100\uffd8\101\uffd8\102\uffd8\110\uffd8\111\uffd8\112" +
    "\uffd8\113\uffd8\130\uffd8\131\uffd8\001\002\000\114\002\uffb0" +
    "\003\uffb0\004\uffb0\005\uffb0\007\uffb0\010\uffb0\011\uffb0\012" +
    "\uffb0\013\uffb0\014\uffb0\015\uffb0\025\uffb0\026\uffb0\027\uffb0" +
    "\030\uffb0\031\uffb0\033\uffb0\041\uffb0\042\uffb0\061\uffb0\062" +
    "\uffb0\065\uffb0\066\uffb0\070\uffb0\072\uffb0\073\uffb0\074\uffb0" +
    "\075\uffb0\076\uffb0\100\uffb0\101\uffb0\102\uffb0\110\uffb0\111" +
    "\uffb0\112\uffb0\113\uffb0\131\uffb0\001\002\000\032\003\175" +
    "\005\121\044\114\045\135\046\141\047\137\050\157\051" +
    "\126\064\147\100\075\110\101\111\105\001\002\000\032" +
    "\003\175\005\121\044\114\045\135\046\141\047\137\050" +
    "\157\051\126\064\147\100\075\110\101\111\105\001\002" +
    "\000\032\003\175\005\121\044\114\045\135\046\141\047" +
    "\137\050\157\051\126\064\147\100\075\110\101\111\105" +
    "\001\002\000\032\003\175\005\121\044\114\045\135\046" +
    "\141\047\137\050\157\051\126\064\147\100\075\110\101" +
    "\111\105\001\002\000\032\003\175\005\121\044\114\045" +
    "\135\046\141\047\137\050\157\051\126\064\147\100\075" +
    "\110\101\111\105\001\002\000\032\003\175\005\121\044" +
    "\114\045\135\046\141\047\137\050\157\051\126\064\147" +
    "\100\075\110\101\111\105\001\002\000\032\003\175\005" +
    "\121\044\114\045\135\046\141\047\137\050\157\051\126" +
    "\064\147\100\075\110\101\111\105\001\002\000\032\003" +
    "\175\005\121\044\114\045\135\046\141\047\137\050\157" +
    "\051\126\064\147\100\075\110\101\111\105\001\002\000" +
    "\032\003\175\005\121\044\114\045\135\046\141\047\137" +
    "\050\157\051\126\064\147\100\075\110\101\111\105\001" +
    "\002\000\032\003\175\005\121\044\114\045\135\046\141" +
    "\047\137\050\157\051\126\064\147\100\075\110\101\111" +
    "\105\001\002\000\032\003\175\005\121\044\114\045\135" +
    "\046\141\047\137\050\157\051\126\064\147\100\075\110" +
    "\101\111\105\001\002\000\032\003\175\005\121\044\114" +
    "\045\135\046\141\047\137\050\157\051\126\064\147\100" +
    "\075\110\101\111\105\001\002\000\034\003\175\005\121" +
    "\044\114\045\135\046\141\047\137\050\157\051\126\056" +
    "\200\064\147\100\075\110\101\111\105\001\002\000\126" +
    "\002\uffb2\003\uffb2\004\uffb2\005\uffb2\007\uffb2\010\uffb2\011" +
    "\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\025\uffb2\026\uffb2" +
    "\027\uffb2\030\uffb2\031\uffb2\033\166\034\161\035\165\036" +
    "\172\037\171\040\162\041\uffb2\042\uffb2\061\uffb2\062\uffb2" +
    "\065\uffb2\066\uffb2\070\uffb2\072\uffb2\073\uffb2\074\uffb2\075" +
    "\uffb2\076\uffb2\100\uffb2\101\uffb2\102\uffb2\110\uffb2\111\uffb2" +
    "\112\uffb2\113\uffb2\131\uffb2\001\002\000\150\002\uffce\003" +
    "\uffce\004\uffce\005\uffce\007\uffce\010\uffce\011\uffce\012\uffce" +
    "\013\uffce\014\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021" +
    "\uffce\022\uffce\023\uffce\025\uffce\026\uffce\027\uffce\030\uffce" +
    "\031\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040" +
    "\uffce\041\uffce\042\uffce\056\206\057\uffce\061\uffce\062\uffce" +
    "\065\uffce\066\uffce\070\uffce\072\uffce\073\uffce\074\uffce\075" +
    "\uffce\076\uffce\100\uffce\101\uffce\102\uffce\110\uffce\111\uffce" +
    "\112\uffce\113\uffce\130\uffce\131\uffce\001\002\000\032\003" +
    "\202\005\121\044\114\045\135\046\141\047\137\050\157" +
    "\051\126\064\147\100\075\110\101\111\105\001\002\000" +
    "\146\002\uffa0\003\uffa0\004\uffa0\005\uffa0\007\uffa0\010\uffa0" +
    "\011\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0\017" +
    "\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\025\uffa0\026\uffa0" +
    "\027\uffa0\030\uffa0\031\uffa0\033\166\034\161\035\165\036" +
    "\172\037\171\040\162\041\uffa0\042\uffa0\057\uffa0\061\uffa0" +
    "\062\uffa0\065\uffa0\066\uffa0\070\uffa0\072\uffa0\073\uffa0\074" +
    "\uffa0\075\uffa0\076\uffa0\100\uffa0\101\uffa0\102\uffa0\110\uffa0" +
    "\111\uffa0\112\uffa0\113\uffa0\130\uffa0\131\uffa0\001\002\000" +
    "\036\003\175\005\121\044\114\045\135\046\141\047\137" +
    "\050\157\051\126\056\200\057\205\064\147\100\075\110" +
    "\101\111\105\001\002\000\020\033\166\034\161\035\165" +
    "\036\172\037\171\040\162\057\204\001\002\000\152\002" +
    "\uff8b\003\uff8b\004\uff8b\005\uff8b\007\uff8b\010\uff8b\011\uff8b" +
    "\012\uff8b\013\uff8b\014\uff8b\015\uff8b\016\uff8b\017\uff8b\020" +
    "\uff8b\021\uff8b\022\uff8b\023\uff8b\025\uff8b\026\uff8b\027\uff8b" +
    "\030\uff8b\031\uff8b\033\uff8b\034\uff8b\035\uff8b\036\uff8b\037" +
    "\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b\056\uff8b\057\uff8b" +
    "\061\uff8b\062\uff8b\065\uff8b\066\uff8b\070\uff8b\072\uff8b\073" +
    "\uff8b\074\uff8b\075\uff8b\076\uff8b\100\uff8b\101\uff8b\102\uff8b" +
    "\110\uff8b\111\uff8b\112\uff8b\113\uff8b\130\uff8b\131\uff8b\001" +
    "\002\000\152\002\uff8a\003\uff8a\004\uff8a\005\uff8a\007\uff8a" +
    "\010\uff8a\011\uff8a\012\uff8a\013\uff8a\014\uff8a\015\uff8a\016" +
    "\uff8a\017\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a\025\uff8a" +
    "\026\uff8a\027\uff8a\030\uff8a\031\uff8a\033\uff8a\034\uff8a\035" +
    "\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a\043\uff8a" +
    "\056\uff8a\057\uff8a\061\uff8a\062\uff8a\065\uff8a\066\uff8a\070" +
    "\uff8a\072\uff8a\073\uff8a\074\uff8a\075\uff8a\076\uff8a\100\uff8a" +
    "\101\uff8a\102\uff8a\110\uff8a\111\uff8a\112\uff8a\113\uff8a\130" +
    "\uff8a\131\uff8a\001\002\000\032\003\207\005\121\044\114" +
    "\045\135\046\141\047\137\050\157\051\126\064\147\100" +
    "\075\110\101\111\105\001\002\000\036\003\175\005\121" +
    "\044\114\045\135\046\141\047\137\050\157\051\126\056" +
    "\200\057\212\064\147\100\075\110\101\111\105\001\002" +
    "\000\020\033\166\034\161\035\165\036\172\037\171\040" +
    "\162\057\211\001\002\000\152\002\uff8c\003\uff8c\004\uff8c" +
    "\005\uff8c\007\uff8c\010\uff8c\011\uff8c\012\uff8c\013\uff8c\014" +
    "\uff8c\015\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c\022\uff8c" +
    "\023\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031\uff8c\033" +
    "\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c" +
    "\042\uff8c\043\uff8c\056\uff8c\057\uff8c\061\uff8c\062\uff8c\065" +
    "\uff8c\066\uff8c\070\uff8c\072\uff8c\073\uff8c\074\uff8c\075\uff8c" +
    "\076\uff8c\100\uff8c\101\uff8c\102\uff8c\110\uff8c\111\uff8c\112" +
    "\uff8c\113\uff8c\130\uff8c\131\uff8c\001\002\000\152\002\uff89" +
    "\003\uff89\004\uff89\005\uff89\007\uff89\010\uff89\011\uff89\012" +
    "\uff89\013\uff89\014\uff89\015\uff89\016\uff89\017\uff89\020\uff89" +
    "\021\uff89\022\uff89\023\uff89\025\uff89\026\uff89\027\uff89\030" +
    "\uff89\031\uff89\033\uff89\034\uff89\035\uff89\036\uff89\037\uff89" +
    "\040\uff89\041\uff89\042\uff89\043\uff89\056\uff89\057\uff89\061" +
    "\uff89\062\uff89\065\uff89\066\uff89\070\uff89\072\uff89\073\uff89" +
    "\074\uff89\075\uff89\076\uff89\100\uff89\101\uff89\102\uff89\110" +
    "\uff89\111\uff89\112\uff89\113\uff89\130\uff89\131\uff89\001\002" +
    "\000\126\002\uffb6\003\uffb6\004\uffb6\005\uffb6\007\uffb6\010" +
    "\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\025\uffb6" +
    "\026\uffb6\027\uffb6\030\uffb6\031\uffb6\033\166\034\161\035" +
    "\165\036\172\037\171\040\162\041\uffb6\042\uffb6\061\uffb6" +
    "\062\uffb6\065\uffb6\066\uffb6\070\uffb6\072\uffb6\073\uffb6\074" +
    "\uffb6\075\uffb6\076\uffb6\100\uffb6\101\uffb6\102\uffb6\110\uffb6" +
    "\111\uffb6\112\uffb6\113\uffb6\131\uffb6\001\002\000\146\002" +
    "\uffa5\003\uffa5\004\uffa5\005\uffa5\007\uffa5\010\uffa5\011\uffa5" +
    "\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5\020" +
    "\uffa5\021\uffa5\022\uffa5\023\uffa5\025\uffa5\026\uffa5\027\uffa5" +
    "\030\uffa5\031\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037" +
    "\uffa5\040\162\041\uffa5\042\uffa5\057\uffa5\061\uffa5\062\uffa5" +
    "\065\uffa5\066\uffa5\070\uffa5\072\uffa5\073\uffa5\074\uffa5\075" +
    "\uffa5\076\uffa5\100\uffa5\101\uffa5\102\uffa5\110\uffa5\111\uffa5" +
    "\112\uffa5\113\uffa5\130\uffa5\131\uffa5\001\002\000\146\002" +
    "\uffa4\003\uffa4\004\uffa4\005\uffa4\007\uffa4\010\uffa4\011\uffa4" +
    "\012\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4\020" +
    "\uffa4\021\uffa4\022\uffa4\023\uffa4\025\uffa4\026\uffa4\027\uffa4" +
    "\030\uffa4\031\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037" +
    "\uffa4\040\162\041\uffa4\042\uffa4\057\uffa4\061\uffa4\062\uffa4" +
    "\065\uffa4\066\uffa4\070\uffa4\072\uffa4\073\uffa4\074\uffa4\075" +
    "\uffa4\076\uffa4\100\uffa4\101\uffa4\102\uffa4\110\uffa4\111\uffa4" +
    "\112\uffa4\113\uffa4\130\uffa4\131\uffa4\001\002\000\126\002" +
    "\uffb4\003\uffb4\004\uffb4\005\uffb4\007\uffb4\010\uffb4\011\uffb4" +
    "\012\uffb4\013\uffb4\014\uffb4\015\uffb4\025\uffb4\026\uffb4\027" +
    "\uffb4\030\uffb4\031\uffb4\033\166\034\161\035\165\036\172" +
    "\037\171\040\162\041\uffb4\042\uffb4\061\uffb4\062\uffb4\065" +
    "\uffb4\066\uffb4\070\uffb4\072\uffb4\073\uffb4\074\uffb4\075\uffb4" +
    "\076\uffb4\100\uffb4\101\uffb4\102\uffb4\110\uffb4\111\uffb4\112" +
    "\uffb4\113\uffb4\131\uffb4\001\002\000\126\002\uffb5\003\uffb5" +
    "\004\uffb5\005\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013" +
    "\uffb5\014\uffb5\015\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5" +
    "\031\uffb5\033\166\034\161\035\165\036\172\037\171\040" +
    "\162\041\uffb5\042\uffb5\061\uffb5\062\uffb5\065\uffb5\066\uffb5" +
    "\070\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5\076\uffb5\100" +
    "\uffb5\101\uffb5\102\uffb5\110\uffb5\111\uffb5\112\uffb5\113\uffb5" +
    "\131\uffb5\001\002\000\146\002\uffa8\003\uffa8\004\uffa8\005" +
    "\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8" +
    "\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023" +
    "\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\033\uffa8" +
    "\034\uffa8\035\165\036\172\037\171\040\162\041\uffa8\042" +
    "\uffa8\057\uffa8\061\uffa8\062\uffa8\065\uffa8\066\uffa8\070\uffa8" +
    "\072\uffa8\073\uffa8\074\uffa8\075\uffa8\076\uffa8\100\uffa8\101" +
    "\uffa8\102\uffa8\110\uffa8\111\uffa8\112\uffa8\113\uffa8\130\uffa8" +
    "\131\uffa8\001\002\000\146\002\uffa6\003\uffa6\004\uffa6\005" +
    "\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\014\uffa6" +
    "\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023" +
    "\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\033\uffa6" +
    "\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040\162\041\uffa6\042" +
    "\uffa6\057\uffa6\061\uffa6\062\uffa6\065\uffa6\066\uffa6\070\uffa6" +
    "\072\uffa6\073\uffa6\074\uffa6\075\uffa6\076\uffa6\100\uffa6\101" +
    "\uffa6\102\uffa6\110\uffa6\111\uffa6\112\uffa6\113\uffa6\130\uffa6" +
    "\131\uffa6\001\002\000\126\002\uffb3\003\uffb3\004\uffb3\005" +
    "\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3" +
    "\015\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\033" +
    "\166\034\161\035\165\036\172\037\171\040\162\041\uffb3" +
    "\042\uffb3\061\uffb3\062\uffb3\065\uffb3\066\uffb3\070\uffb3\072" +
    "\uffb3\073\uffb3\074\uffb3\075\uffb3\076\uffb3\100\uffb3\101\uffb3" +
    "\102\uffb3\110\uffb3\111\uffb3\112\uffb3\113\uffb3\131\uffb3\001" +
    "\002\000\126\002\uffb7\003\uffb7\004\uffb7\005\uffb7\007\uffb7" +
    "\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\025" +
    "\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\033\166\034\161" +
    "\035\165\036\172\037\171\040\162\041\uffb7\042\uffb7\061" +
    "\uffb7\062\uffb7\065\uffb7\066\uffb7\070\uffb7\072\uffb7\073\uffb7" +
    "\074\uffb7\075\uffb7\076\uffb7\100\uffb7\101\uffb7\102\uffb7\110" +
    "\uffb7\111\uffb7\112\uffb7\113\uffb7\131\uffb7\001\002\000\146" +
    "\002\uffa3\003\uffa3\004\uffa3\005\uffa3\007\uffa3\010\uffa3\011" +
    "\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3" +
    "\020\uffa3\021\uffa3\022\uffa3\023\uffa3\025\uffa3\026\uffa3\027" +
    "\uffa3\030\uffa3\031\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3" +
    "\037\uffa3\040\uffa3\041\uffa3\042\uffa3\057\uffa3\061\uffa3\062" +
    "\uffa3\065\uffa3\066\uffa3\070\uffa3\072\uffa3\073\uffa3\074\uffa3" +
    "\075\uffa3\076\uffa3\100\uffa3\101\uffa3\102\uffa3\110\uffa3\111" +
    "\uffa3\112\uffa3\113\uffa3\130\uffa3\131\uffa3\001\002\000\146" +
    "\002\uffa7\003\uffa7\004\uffa7\005\uffa7\007\uffa7\010\uffa7\011" +
    "\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7" +
    "\020\uffa7\021\uffa7\022\uffa7\023\uffa7\025\uffa7\026\uffa7\027" +
    "\uffa7\030\uffa7\031\uffa7\033\uffa7\034\uffa7\035\165\036\172" +
    "\037\171\040\162\041\uffa7\042\uffa7\057\uffa7\061\uffa7\062" +
    "\uffa7\065\uffa7\066\uffa7\070\uffa7\072\uffa7\073\uffa7\074\uffa7" +
    "\075\uffa7\076\uffa7\100\uffa7\101\uffa7\102\uffa7\110\uffa7\111" +
    "\uffa7\112\uffa7\113\uffa7\130\uffa7\131\uffa7\001\002\000\036" +
    "\003\175\005\121\044\114\045\135\046\141\047\137\050" +
    "\157\051\126\056\200\064\147\065\231\100\075\110\101" +
    "\111\105\001\002\000\020\033\166\034\161\035\165\036" +
    "\172\037\171\040\162\065\230\001\002\000\146\002\uffa2" +
    "\003\uffa2\004\uffa2\005\uffa2\007\uffa2\010\uffa2\011\uffa2\012" +
    "\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2" +
    "\021\uffa2\022\uffa2\023\uffa2\025\uffa2\026\uffa2\027\uffa2\030" +
    "\uffa2\031\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2" +
    "\040\uffa2\041\uffa2\042\uffa2\057\uffa2\061\uffa2\062\uffa2\065" +
    "\uffa2\066\uffa2\070\uffa2\072\uffa2\073\uffa2\074\uffa2\075\uffa2" +
    "\076\uffa2\100\uffa2\101\uffa2\102\uffa2\110\uffa2\111\uffa2\112" +
    "\uffa2\113\uffa2\130\uffa2\131\uffa2\001\002\000\146\002\uff9f" +
    "\003\uff9f\004\uff9f\005\uff9f\007\uff9f\010\uff9f\011\uff9f\012" +
    "\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f" +
    "\021\uff9f\022\uff9f\023\uff9f\025\uff9f\026\uff9f\027\uff9f\030" +
    "\uff9f\031\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f" +
    "\040\uff9f\041\uff9f\042\uff9f\057\uff9f\061\uff9f\062\uff9f\065" +
    "\uff9f\066\uff9f\070\uff9f\072\uff9f\073\uff9f\074\uff9f\075\uff9f" +
    "\076\uff9f\100\uff9f\101\uff9f\102\uff9f\110\uff9f\111\uff9f\112" +
    "\uff9f\113\uff9f\130\uff9f\131\uff9f\001\002\000\064\003\237" +
    "\005\121\016\134\017\117\020\132\021\136\022\153\023" +
    "\156\024\143\025\123\026\124\027\130\030\125\031\116" +
    "\032\122\044\114\045\135\046\141\047\137\050\157\051" +
    "\126\064\147\100\075\110\101\111\105\001\002\000\064" +
    "\003\237\005\121\016\134\017\117\020\132\021\136\022" +
    "\153\023\156\024\143\025\123\026\124\027\130\030\125" +
    "\031\116\032\122\044\114\045\135\046\141\047\137\050" +
    "\157\051\126\064\147\100\075\110\101\111\105\001\002" +
    "\000\064\003\237\005\121\016\134\017\117\020\132\021" +
    "\136\022\153\023\156\024\143\025\123\026\124\027\130" +
    "\030\125\031\116\032\122\044\114\045\135\046\141\047" +
    "\137\050\157\051\126\064\147\100\075\110\101\111\105" +
    "\001\002\000\064\003\237\005\121\016\134\017\117\020" +
    "\132\021\136\022\153\023\156\024\143\025\123\026\124" +
    "\027\130\030\125\031\116\032\122\044\114\045\135\046" +
    "\141\047\137\050\157\051\126\064\147\100\075\110\101" +
    "\111\105\001\002\000\064\003\237\005\121\016\134\017" +
    "\117\020\132\021\136\022\153\023\156\024\143\025\123" +
    "\026\124\027\130\030\125\031\116\032\122\044\114\045" +
    "\135\046\141\047\137\050\157\051\126\064\147\100\075" +
    "\110\101\111\105\001\002\000\062\003\175\005\121\016" +
    "\134\017\117\020\132\021\136\022\153\023\156\025\123" +
    "\026\124\027\130\030\125\031\116\044\114\045\135\046" +
    "\141\047\137\050\157\051\126\056\200\064\147\100\075" +
    "\110\101\111\105\001\002\000\114\002\uffc5\003\uffc5\004" +
    "\uffc5\005\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5" +
    "\014\uffc5\015\uffc5\025\233\026\232\027\uffc5\030\uffc5\031" +
    "\uffc5\033\uffc5\041\uffc5\042\uffc5\061\uffc5\062\uffc5\065\uffc5" +
    "\066\uffc5\070\uffc5\072\uffc5\073\uffc5\074\uffc5\075\uffc5\076" +
    "\uffc5\100\uffc5\101\uffc5\102\uffc5\110\uffc5\111\uffc5\112\uffc5" +
    "\113\uffc5\131\uffc5\001\002\000\114\002\uffaf\003\uffaf\004" +
    "\uffaf\005\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf" +
    "\014\uffaf\015\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031" +
    "\uffaf\033\uffaf\041\uffaf\042\uffaf\061\uffaf\062\uffaf\065\uffaf" +
    "\066\uffaf\070\uffaf\072\uffaf\073\uffaf\074\uffaf\075\uffaf\076" +
    "\uffaf\100\uffaf\101\uffaf\102\uffaf\110\uffaf\111\uffaf\112\uffaf" +
    "\113\uffaf\131\uffaf\001\002\000\114\002\uffbf\003\uffbf\004" +
    "\uffbf\005\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf" +
    "\014\uffbf\015\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031" +
    "\uffbf\033\uffbf\041\uffbf\042\uffbf\061\uffbf\062\uffbf\065\uffbf" +
    "\066\uffbf\070\uffbf\072\uffbf\073\uffbf\074\uffbf\075\uffbf\076" +
    "\uffbf\100\uffbf\101\uffbf\102\uffbf\110\uffbf\111\uffbf\112\uffbf" +
    "\113\uffbf\131\uffbf\001\002\000\114\002\uffc7\003\uffc7\004" +
    "\uffc7\005\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7" +
    "\014\uffc7\015\uffc7\025\233\026\232\027\uffc7\030\uffc7\031" +
    "\uffc7\033\uffc7\041\uffc7\042\uffc7\061\uffc7\062\uffc7\065\uffc7" +
    "\066\uffc7\070\uffc7\072\uffc7\073\uffc7\074\uffc7\075\uffc7\076" +
    "\uffc7\100\uffc7\101\uffc7\102\uffc7\110\uffc7\111\uffc7\112\uffc7" +
    "\113\uffc7\131\uffc7\001\002\000\114\002\uffc6\003\uffc6\004" +
    "\uffc6\005\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6" +
    "\014\uffc6\015\uffc6\025\233\026\232\027\uffc6\030\uffc6\031" +
    "\uffc6\033\uffc6\041\uffc6\042\uffc6\061\uffc6\062\uffc6\065\uffc6" +
    "\066\uffc6\070\uffc6\072\uffc6\073\uffc6\074\uffc6\075\uffc6\076" +
    "\uffc6\100\uffc6\101\uffc6\102\uffc6\110\uffc6\111\uffc6\112\uffc6" +
    "\113\uffc6\131\uffc6\001\002\000\114\002\uffc4\003\uffc4\004" +
    "\uffc4\005\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4" +
    "\014\uffc4\015\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031" +
    "\uffc4\033\uffc4\041\uffc4\042\uffc4\061\uffc4\062\uffc4\065\uffc4" +
    "\066\uffc4\070\uffc4\072\uffc4\073\uffc4\074\uffc4\075\uffc4\076" +
    "\uffc4\100\uffc4\101\uffc4\102\uffc4\110\uffc4\111\uffc4\112\uffc4" +
    "\113\uffc4\131\uffc4\001\002\000\114\002\uffc3\003\uffc3\004" +
    "\uffc3\005\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3" +
    "\014\uffc3\015\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031" +
    "\uffc3\033\uffc3\041\uffc3\042\uffc3\061\uffc3\062\uffc3\065\uffc3" +
    "\066\uffc3\070\uffc3\072\uffc3\073\uffc3\074\uffc3\075\uffc3\076" +
    "\uffc3\100\uffc3\101\uffc3\102\uffc3\110\uffc3\111\uffc3\112\uffc3" +
    "\113\uffc3\131\uffc3\001\002\000\126\002\uffb1\003\uffb1\004" +
    "\uffb1\005\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1" +
    "\014\uffb1\015\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031" +
    "\uffb1\033\166\034\161\035\165\036\172\037\171\040\162" +
    "\041\uffb1\042\uffb1\061\uffb1\062\uffb1\065\uffb1\066\uffb1\070" +
    "\uffb1\072\uffb1\073\uffb1\074\uffb1\075\uffb1\076\uffb1\100\uffb1" +
    "\101\uffb1\102\uffb1\110\uffb1\111\uffb1\112\uffb1\113\uffb1\131" +
    "\uffb1\001\002\000\050\003\uff26\005\uff26\041\uff26\042\uff26" +
    "\062\uff26\066\uff26\070\uff26\072\uff26\073\uff26\074\uff26\075" +
    "\uff26\076\uff26\100\uff26\101\uff26\102\uff26\110\uff26\111\uff26" +
    "\112\uff26\131\uff26\001\002\000\064\003\237\005\121\016" +
    "\134\017\117\020\132\021\136\022\153\023\156\024\143" +
    "\025\123\026\124\027\130\030\125\031\116\032\122\044" +
    "\114\045\135\046\141\047\137\050\157\051\126\064\147" +
    "\100\075\110\101\111\105\001\002\000\022\003\uff22\025" +
    "\233\026\232\027\235\030\234\031\236\033\uff22\065\uff22" +
    "\001\002\000\064\003\237\005\121\016\134\017\117\020" +
    "\132\021\136\022\153\023\156\024\143\025\123\026\124" +
    "\027\130\030\125\031\116\032\122\044\114\045\135\046" +
    "\141\047\137\050\157\051\126\064\147\100\075\110\101" +
    "\111\105\001\002\000\064\003\237\005\121\016\134\017" +
    "\117\020\132\021\136\022\153\023\156\024\143\025\123" +
    "\026\124\027\130\030\125\031\116\032\122\044\114\045" +
    "\135\046\141\047\137\050\157\051\126\064\147\100\075" +
    "\110\101\111\105\001\002\000\050\003\uff28\005\uff28\041" +
    "\uff28\042\uff28\062\uff28\066\uff28\070\uff28\072\uff28\073\uff28" +
    "\074\uff28\075\uff28\076\uff28\100\uff28\101\uff28\102\uff28\110" +
    "\uff28\111\uff28\112\uff28\131\uff28\001\002\000\022\003\uff21" +
    "\025\233\026\232\027\235\030\234\031\236\033\uff21\065" +
    "\uff21\001\002\000\022\003\uff24\025\233\026\232\027\235" +
    "\030\234\031\236\033\uff24\065\uff24\001\002\000\114\002" +
    "\uffbd\003\uffbd\004\uffbd\005\uffbd\007\uffbd\010\uffbd\011\uffbd" +
    "\012\uffbd\013\uffbd\014\uffbd\015\uffbd\025\uffbd\026\uffbd\027" +
    "\uffbd\030\uffbd\031\uffbd\033\uffbd\041\uffbd\042\uffbd\061\uffbd" +
    "\062\uffbd\065\uffbd\066\uffbd\070\uffbd\072\uffbd\073\uffbd\074" +
    "\uffbd\075\uffbd\076\uffbd\100\uffbd\101\uffbd\102\uffbd\110\uffbd" +
    "\111\uffbd\112\uffbd\113\uffbd\131\uffbd\001\002\000\064\003" +
    "\237\005\121\016\134\017\117\020\132\021\136\022\153" +
    "\023\156\024\143\025\123\026\124\027\130\030\125\031" +
    "\116\032\122\044\114\045\135\046\141\047\137\050\157" +
    "\051\126\064\147\100\075\110\101\111\105\001\002\000" +
    "\016\025\233\026\232\027\235\030\234\031\236\065\263" +
    "\001\002\000\114\002\uffc2\003\uffc2\004\uffc2\005\uffc2\007" +
    "\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2" +
    "\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\033\uffc2\041" +
    "\uffc2\042\uffc2\061\uffc2\062\uffc2\065\uffc2\066\uffc2\070\uffc2" +
    "\072\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2\100\uffc2\101" +
    "\uffc2\102\uffc2\110\uffc2\111\uffc2\112\uffc2\113\uffc2\131\uffc2" +
    "\001\002\000\150\002\uffcf\003\uffcf\004\uffcf\005\uffcf\007" +
    "\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf" +
    "\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\025" +
    "\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\056" +
    "\206\057\uffcf\061\uffcf\062\uffcf\065\uffcf\066\uffcf\070\uffcf" +
    "\072\uffcf\073\uffcf\074\uffcf\075\uffcf\076\uffcf\100\uffcf\101" +
    "\uffcf\102\uffcf\110\uffcf\111\uffcf\112\uffcf\113\uffcf\130\uffcf" +
    "\131\uffcf\001\002\000\034\003\270\005\121\044\114\045" +
    "\135\046\141\047\137\050\157\051\126\064\147\065\uffd0" +
    "\100\075\110\101\111\105\001\002\000\004\065\300\001" +
    "\002\000\006\007\276\065\uffd1\001\002\000\040\003\175" +
    "\005\121\007\273\044\114\045\135\046\141\047\137\050" +
    "\157\051\126\056\200\064\147\065\274\100\075\110\101" +
    "\111\105\001\002\000\024\003\272\007\uffd4\033\166\034" +
    "\161\035\165\036\172\037\171\040\162\065\uffd4\001\002" +
    "\000\006\007\uffd2\065\uffd2\001\002\000\032\003\175\005" +
    "\121\044\114\045\135\046\141\047\137\050\157\051\126" +
    "\064\147\100\075\110\101\111\105\001\002\000\146\002" +
    "\uffd6\003\uffd6\004\uffd6\005\uffd6\007\uffd6\010\uffd6\011\uffd6" +
    "\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020" +
    "\uffd6\021\uffd6\022\uffd6\023\uffd6\025\uffd6\026\uffd6\027\uffd6" +
    "\030\uffd6\031\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037" +
    "\uffd6\040\uffd6\041\uffd6\042\uffd6\057\uffd6\061\uffd6\062\uffd6" +
    "\065\uffd6\066\uffd6\070\uffd6\072\uffd6\073\uffd6\074\uffd6\075" +
    "\uffd6\076\uffd6\100\uffd6\101\uffd6\102\uffd6\110\uffd6\111\uffd6" +
    "\112\uffd6\113\uffd6\130\uffd6\131\uffd6\001\002\000\022\007" +
    "\uffd3\033\166\034\161\035\165\036\172\037\171\040\162" +
    "\065\uffd3\001\002\000\032\003\175\005\121\044\114\045" +
    "\135\046\141\047\137\050\157\051\126\064\147\100\075" +
    "\110\101\111\105\001\002\000\022\007\uffd5\033\166\034" +
    "\161\035\165\036\172\037\171\040\162\065\uffd5\001\002" +
    "\000\146\002\uffd7\003\uffd7\004\uffd7\005\uffd7\007\uffd7\010" +
    "\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7" +
    "\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\025\uffd7\026" +
    "\uffd7\027\uffd7\030\uffd7\031\uffd7\033\uffd7\034\uffd7\035\uffd7" +
    "\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\057\uffd7\061" +
    "\uffd7\062\uffd7\065\uffd7\066\uffd7\070\uffd7\072\uffd7\073\uffd7" +
    "\074\uffd7\075\uffd7\076\uffd7\100\uffd7\101\uffd7\102\uffd7\110" +
    "\uffd7\111\uffd7\112\uffd7\113\uffd7\130\uffd7\131\uffd7\001\002" +
    "\000\114\002\uffbe\003\uffbe\004\uffbe\005\uffbe\007\uffbe\010" +
    "\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\025\uffbe" +
    "\026\uffbe\027\uffbe\030\uffbe\031\uffbe\033\uffbe\041\uffbe\042" +
    "\uffbe\061\uffbe\062\uffbe\065\uffbe\066\uffbe\070\uffbe\072\uffbe" +
    "\073\uffbe\074\uffbe\075\uffbe\076\uffbe\100\uffbe\101\uffbe\102" +
    "\uffbe\110\uffbe\111\uffbe\112\uffbe\113\uffbe\131\uffbe\001\002" +
    "\000\050\003\uff25\005\uff25\041\uff25\042\uff25\062\uff25\066" +
    "\uff25\070\uff25\072\uff25\073\uff25\074\uff25\075\uff25\076\uff25" +
    "\100\uff25\101\uff25\102\uff25\110\uff25\111\uff25\112\uff25\131" +
    "\uff25\001\002\000\004\065\316\001\002\000\032\003\305" +
    "\005\121\044\114\045\135\046\141\047\137\050\157\051" +
    "\126\064\147\100\075\110\101\111\105\001\002\000\036" +
    "\003\175\005\121\044\114\045\135\046\141\047\137\050" +
    "\157\051\126\056\200\064\147\065\315\100\075\110\101" +
    "\111\105\001\002\000\022\003\310\007\307\033\166\034" +
    "\161\035\165\036\172\037\171\040\162\001\002\000\032" +
    "\003\175\005\121\044\114\045\135\046\141\047\137\050" +
    "\157\051\126\064\147\100\075\110\101\111\105\001\002" +
    "\000\032\003\175\005\121\044\114\045\135\046\141\047" +
    "\137\050\157\051\126\064\147\100\075\110\101\111\105" +
    "\001\002\000\020\033\166\034\161\035\165\036\172\037" +
    "\171\040\162\065\312\001\002\000\050\003\uff35\005\uff35" +
    "\041\uff35\042\uff35\062\uff35\066\uff35\070\uff35\072\uff35\073" +
    "\uff35\074\uff35\075\uff35\076\uff35\100\uff35\101\uff35\102\uff35" +
    "\110\uff35\111\uff35\112\uff35\131\uff35\001\002\000\020\033" +
    "\166\034\161\035\165\036\172\037\171\040\162\065\314" +
    "\001\002\000\050\003\uff36\005\uff36\041\uff36\042\uff36\062" +
    "\uff36\066\uff36\070\uff36\072\uff36\073\uff36\074\uff36\075\uff36" +
    "\076\uff36\100\uff36\101\uff36\102\uff36\110\uff36\111\uff36\112" +
    "\uff36\131\uff36\001\002\000\050\003\uff34\005\uff34\041\uff34" +
    "\042\uff34\062\uff34\066\uff34\070\uff34\072\uff34\073\uff34\074" +
    "\uff34\075\uff34\076\uff34\100\uff34\101\uff34\102\uff34\110\uff34" +
    "\111\uff34\112\uff34\131\uff34\001\002\000\050\003\uff33\005" +
    "\uff33\041\uff33\042\uff33\062\uff33\066\uff33\070\uff33\072\uff33" +
    "\073\uff33\074\uff33\075\uff33\076\uff33\100\uff33\101\uff33\102" +
    "\uff33\110\uff33\111\uff33\112\uff33\131\uff33\001\002\000\100" +
    "\002\ufffc\003\ufffc\004\ufffc\005\ufffc\011\ufffc\012\ufffc\013" +
    "\ufffc\014\ufffc\015\ufffc\041\ufffc\042\ufffc\062\ufffc\063\ufffc" +
    "\066\ufffc\067\ufffc\070\ufffc\071\ufffc\072\ufffc\073\ufffc\074" +
    "\ufffc\075\ufffc\076\ufffc\100\ufffc\101\ufffc\102\ufffc\110\ufffc" +
    "\111\ufffc\112\ufffc\113\ufffc\127\ufffc\131\ufffc\001\002\000" +
    "\034\002\uff0d\003\uff0d\004\uff0d\005\uff0d\011\uff0d\012\uff0d" +
    "\013\uff0d\014\uff0d\015\uff0d\041\uff0d\042\uff0d\113\uff0d\131" +
    "\uff0d\001\002\000\006\065\u014b\131\317\001\002\000\046" +
    "\003\341\005\077\041\054\042\uffe2\062\073\066\062\072" +
    "\066\073\104\074\106\075\uff4e\076\337\100\075\101\110" +
    "\102\071\110\101\111\105\112\111\131\uff4e\001\002\000" +
    "\050\003\347\005\077\041\054\042\uffe2\062\073\066\062" +
    "\070\uff4e\072\066\073\104\074\106\075\uff4e\076\337\100" +
    "\075\101\110\102\071\110\101\111\105\112\111\131\uff4e" +
    "\001\002\000\050\003\347\005\077\041\054\042\uffe2\062" +
    "\073\066\062\070\uff4e\072\066\073\104\074\106\075\uff4e" +
    "\076\337\100\075\101\110\102\071\110\101\111\105\112" +
    "\111\131\uff4e\001\002\000\006\075\u011c\131\ufecc\001\002" +
    "\000\050\003\347\005\077\041\054\042\uffe2\062\073\066" +
    "\062\070\uff4e\072\066\073\104\074\106\075\uff4e\076\337" +
    "\100\075\101\110\102\071\110\101\111\105\112\111\131" +
    "\uff4e\001\002\000\050\003\347\005\077\041\054\042\uffe2" +
    "\062\073\066\062\070\uff4e\072\066\073\104\074\106\075" +
    "\uff4e\076\337\100\075\101\110\102\071\110\101\111\105" +
    "\112\111\131\uff4e\001\002\000\052\003\347\005\077\007" +
    "\u0134\041\054\042\uffe2\062\073\066\062\070\uff4e\072\066" +
    "\073\104\074\106\075\uff4e\076\337\100\075\101\110\102" +
    "\071\110\101\111\105\112\111\131\uff4e\001\002\000\050" +
    "\003\347\005\077\041\054\042\uffe2\062\073\066\062\070" +
    "\uff4e\072\066\073\104\074\106\075\uff4e\076\337\100\075" +
    "\101\110\102\071\110\101\111\105\112\111\131\uff4e\001" +
    "\002\000\050\003\347\005\077\041\054\042\uffe2\062\073" +
    "\066\062\070\uff4e\072\066\073\104\074\106\075\uff4e\076" +
    "\337\100\075\101\110\102\071\110\101\111\105\112\111" +
    "\131\uff4e\001\002\000\050\003\347\005\077\041\054\042" +
    "\uffe2\062\073\066\062\070\uff4e\072\066\073\104\074\106" +
    "\075\uff4e\076\337\100\075\101\110\102\071\110\101\111" +
    "\105\112\111\131\uff4e\001\002\000\050\003\347\005\077" +
    "\041\054\042\uffe2\062\073\066\062\070\uff4e\072\066\073" +
    "\104\074\106\075\uff4e\076\337\100\075\101\110\102\071" +
    "\110\101\111\105\112\111\131\uff4e\001\002\000\050\003" +
    "\347\005\077\041\054\042\uffe2\062\073\066\062\070\uff4e" +
    "\072\066\073\104\074\106\075\uff4e\076\337\100\075\101" +
    "\110\102\071\110\101\111\105\112\111\131\uff4e\001\002" +
    "\000\052\003\347\005\077\007\u0128\041\054\042\uffe2\062" +
    "\073\066\062\070\uff4e\072\066\073\104\074\106\075\uff4e" +
    "\076\337\100\075\101\110\102\071\110\101\111\105\112" +
    "\111\131\uff4e\001\002\000\064\003\u0124\005\121\016\134" +
    "\017\117\020\132\021\136\022\153\023\156\024\143\025" +
    "\123\026\124\027\130\030\125\031\116\032\122\044\114" +
    "\045\135\046\141\047\137\050\157\051\126\064\147\100" +
    "\075\110\101\111\105\001\002\000\050\003\347\005\077" +
    "\041\054\042\uffe2\062\073\066\062\070\uff4e\072\066\073" +
    "\104\074\106\075\uff4e\076\337\100\075\101\110\102\071" +
    "\110\101\111\105\112\111\131\uff4e\001\002\000\034\003" +
    "\355\011\030\012\033\013\031\014\026\015\036\043\354" +
    "\052\353\053\350\054\351\056\200\075\u011c\131\ufecc\001" +
    "\002\000\050\003\347\005\077\041\054\042\uffe2\062\073" +
    "\066\062\070\uff4e\072\066\073\104\074\106\075\uff4e\076" +
    "\337\100\075\101\110\102\071\110\101\111\105\112\111" +
    "\131\uff4e\001\002\000\050\003\347\005\077\041\054\042" +
    "\uffe2\062\073\066\062\070\uff4e\072\066\073\104\074\106" +
    "\075\uff4e\076\337\100\075\101\110\102\071\110\101\111" +
    "\105\112\111\131\uff4e\001\002\000\050\003\347\005\077" +
    "\041\054\042\uffe2\062\073\066\062\070\uff4e\072\066\073" +
    "\104\074\106\075\uff4e\076\337\100\075\101\110\102\071" +
    "\110\101\111\105\112\111\131\uff4e\001\002\000\050\003" +
    "\347\005\077\041\054\042\uffe2\062\073\066\062\070\uff4e" +
    "\072\066\073\104\074\106\075\uff4e\076\337\100\075\101" +
    "\110\102\071\110\101\111\105\112\111\131\uff4e\001\002" +
    "\000\010\070\uff51\075\uff51\131\uff51\001\002\000\030\003" +
    "\355\011\030\012\033\013\031\014\026\015\036\043\354" +
    "\052\353\053\350\054\351\056\200\001\002\000\050\003" +
    "\uff97\005\uff97\041\uff97\042\uff97\062\uff97\066\uff97\070\uff97" +
    "\072\uff97\073\uff97\074\uff97\075\uff97\076\uff97\100\uff97\101" +
    "\uff97\102\uff97\110\uff97\111\uff97\112\uff97\131\uff97\001\002" +
    "\000\050\003\uff96\005\uff96\041\uff96\042\uff96\062\uff96\066" +
    "\uff96\070\uff96\072\uff96\073\uff96\074\uff96\075\uff96\076\uff96" +
    "\100\uff96\101\uff96\102\uff96\110\uff96\111\uff96\112\uff96\131" +
    "\uff96\001\002\000\006\043\u0117\056\206\001\002\000\064" +
    "\003\237\005\121\016\134\017\117\020\132\021\136\022" +
    "\153\023\156\024\143\025\123\026\124\027\130\030\125" +
    "\031\116\032\122\044\114\045\135\046\141\047\137\050" +
    "\157\051\126\064\147\100\075\110\101\111\105\001\002" +
    "\000\064\003\237\005\121\016\134\017\117\020\132\021" +
    "\136\022\153\023\156\024\143\025\123\026\124\027\130" +
    "\030\125\031\116\032\122\044\114\045\135\046\141\047" +
    "\137\050\157\051\126\064\147\100\075\110\101\111\105" +
    "\001\002\000\010\003\uffc8\005\uffc8\055\uffc8\001\002\000" +
    "\006\005\357\055\360\001\002\000\074\002\uffe4\003\uffe4" +
    "\004\uffe4\005\uffe4\007\uffe4\011\uffe4\012\uffe4\013\uffe4\014" +
    "\uffe4\015\uffe4\041\uffe4\042\uffe4\043\u0113\062\uffe4\066\uffe4" +
    "\070\uffe4\072\uffe4\073\uffe4\074\uffe4\075\uffe4\076\uffe4\100" +
    "\uffe4\101\uffe4\102\uffe4\110\uffe4\111\uffe4\112\uffe4\113\uffe4" +
    "\131\uffe4\001\002\000\004\005\361\001\002\000\074\002" +
    "\uff8e\003\uff8e\004\uff8e\005\uff8e\007\uff8e\011\uff8e\012\uff8e" +
    "\013\uff8e\014\uff8e\015\uff8e\041\uff8e\042\uff8e\056\200\062" +
    "\uff8e\066\uff8e\070\uff8e\072\uff8e\073\uff8e\074\uff8e\075\uff8e" +
    "\076\uff8e\100\uff8e\101\uff8e\102\uff8e\110\uff8e\111\uff8e\112" +
    "\uff8e\113\uff8e\131\uff8e\001\002\000\076\002\uff8d\003\uff8d" +
    "\004\uff8d\005\uff8d\007\uff8d\011\uff8d\012\uff8d\013\uff8d\014" +
    "\uff8d\015\uff8d\041\uff8d\042\uff8d\043\363\056\206\062\uff8d" +
    "\066\uff8d\070\uff8d\072\uff8d\073\uff8d\074\uff8d\075\uff8d\076" +
    "\uff8d\100\uff8d\101\uff8d\102\uff8d\110\uff8d\111\uff8d\112\uff8d" +
    "\113\uff8d\131\uff8d\001\002\000\004\060\364\001\002\000" +
    "\066\003\370\005\121\016\134\017\117\020\132\021\136" +
    "\022\153\023\156\024\143\025\123\026\124\027\130\030" +
    "\125\031\116\032\122\044\114\045\135\046\141\047\137" +
    "\050\157\051\126\060\367\064\147\100\075\110\101\111" +
    "\105\001\002\000\010\003\u0102\007\u0101\061\uff87\001\002" +
    "\000\004\061\u0112\001\002\000\066\003\370\005\121\016" +
    "\134\017\117\020\132\021\136\022\153\023\156\024\143" +
    "\025\123\026\124\027\130\030\125\031\116\032\122\044" +
    "\114\045\135\046\141\047\137\050\157\051\126\060\367" +
    "\064\147\100\075\110\101\111\105\001\002\000\070\003" +
    "\175\005\121\007\u0108\016\134\017\117\020\132\021\136" +
    "\022\153\023\156\025\123\026\124\027\130\030\125\031" +
    "\116\044\114\045\135\046\141\047\137\050\157\051\126" +
    "\056\200\060\u0107\061\u0106\064\147\100\075\110\101\111" +
    "\105\001\002\000\066\003\uff7b\005\uff7b\007\uff7b\025\233" +
    "\026\232\027\235\030\234\031\236\041\uff7b\042\uff7b\061" +
    "\uff7b\062\uff7b\066\uff7b\070\uff7b\072\uff7b\073\uff7b\074\uff7b" +
    "\075\uff7b\076\uff7b\100\uff7b\101\uff7b\102\uff7b\110\uff7b\111" +
    "\uff7b\112\uff7b\131\uff7b\001\002\000\010\003\uff7e\007\uff7e" +
    "\061\uff7e\001\002\000\006\007\374\061\uff88\001\002\000" +
    "\004\060\375\001\002\000\066\003\370\005\121\016\134" +
    "\017\117\020\132\021\136\022\153\023\156\024\143\025" +
    "\123\026\124\027\130\030\125\031\116\032\122\044\114" +
    "\045\135\046\141\047\137\050\157\051\126\060\367\064" +
    "\147\100\075\110\101\111\105\001\002\000\010\003\u0102" +
    "\007\u0101\061\u0103\001\002\000\006\007\374\061\u0100\001" +
    "\002\000\006\007\uff85\061\uff85\001\002\000\064\003\237" +
    "\005\121\016\134\017\117\020\132\021\136\022\153\023" +
    "\156\024\143\025\123\026\124\027\130\030\125\031\116" +
    "\032\122\044\114\045\135\046\141\047\137\050\157\051" +
    "\126\064\147\100\075\110\101\111\105\001\002\000\064" +
    "\003\237\005\121\016\134\017\117\020\132\021\136\022" +
    "\153\023\156\024\143\025\123\026\124\027\130\030\125" +
    "\031\116\032\122\044\114\045\135\046\141\047\137\050" +
    "\157\051\126\064\147\100\075\110\101\111\105\001\002" +
    "\000\006\007\uff83\061\uff83\001\002\000\010\003\uff7c\007" +
    "\uff7c\061\uff7c\001\002\000\010\003\uff7f\007\uff7f\061\uff7f" +
    "\001\002\000\006\007\uff80\061\uff80\001\002\000\066\003" +
    "\370\005\121\016\134\017\117\020\132\021\136\022\153" +
    "\023\156\024\143\025\123\026\124\027\130\030\125\031" +
    "\116\032\122\044\114\045\135\046\141\047\137\050\157" +
    "\051\126\060\367\064\147\100\075\110\101\111\105\001" +
    "\002\000\064\003\237\005\121\016\134\017\117\020\132" +
    "\021\136\022\153\023\156\024\143\025\123\026\124\027" +
    "\130\030\125\031\116\032\122\044\114\045\135\046\141" +
    "\047\137\050\157\051\126\064\147\100\075\110\101\111" +
    "\105\001\002\000\010\003\uff7d\007\uff7d\061\uff7d\001\002" +
    "\000\010\003\u0102\007\u0101\061\u010d\001\002\000\006\007" +
    "\374\061\u010c\001\002\000\006\007\uff81\061\uff81\001\002" +
    "\000\006\007\uff82\061\uff82\001\002\000\010\003\u0102\007" +
    "\u0101\061\u0111\001\002\000\006\007\374\061\u0110\001\002" +
    "\000\006\007\uff86\061\uff86\001\002\000\006\007\uff84\061" +
    "\uff84\001\002\000\072\002\uff8f\003\uff8f\004\uff8f\005\uff8f" +
    "\007\uff8f\011\uff8f\012\uff8f\013\uff8f\014\uff8f\015\uff8f\041" +
    "\uff8f\042\uff8f\062\uff8f\066\uff8f\070\uff8f\072\uff8f\073\uff8f" +
    "\074\uff8f\075\uff8f\076\uff8f\100\uff8f\101\uff8f\102\uff8f\110" +
    "\uff8f\111\uff8f\112\uff8f\113\uff8f\131\uff8f\001\002\000\064" +
    "\003\237\005\121\016\134\017\117\020\132\021\136\022" +
    "\153\023\156\024\143\025\123\026\124\027\130\030\125" +
    "\031\116\032\122\044\114\045\135\046\141\047\137\050" +
    "\157\051\126\064\147\100\075\110\101\111\105\001\002" +
    "\000\104\002\uffe5\003\uffe5\004\uffe5\005\uffe5\007\uffe5\011" +
    "\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\025\233\026\232" +
    "\027\235\030\234\031\236\041\uffe5\042\uffe5\062\uffe5\066" +
    "\uffe5\070\uffe5\072\uffe5\073\uffe5\074\uffe5\075\uffe5\076\uffe5" +
    "\100\uffe5\101\uffe5\102\uffe5\110\uffe5\111\uffe5\112\uffe5\113" +
    "\uffe5\131\uffe5\001\002\000\062\003\uff99\005\uff99\025\233" +
    "\026\232\027\235\030\234\031\236\041\uff99\042\uff99\062" +
    "\uff99\066\uff99\070\uff99\072\uff99\073\uff99\074\uff99\075\uff99" +
    "\076\uff99\100\uff99\101\uff99\102\uff99\110\uff99\111\uff99\112" +
    "\uff99\131\uff99\001\002\000\062\003\uff98\005\uff98\025\233" +
    "\026\232\027\235\030\234\031\236\041\uff98\042\uff98\062" +
    "\uff98\066\uff98\070\uff98\072\uff98\073\uff98\074\uff98\075\uff98" +
    "\076\uff98\100\uff98\101\uff98\102\uff98\110\uff98\111\uff98\112" +
    "\uff98\131\uff98\001\002\000\064\003\237\005\121\016\134" +
    "\017\117\020\132\021\136\022\153\023\156\024\143\025" +
    "\123\026\124\027\130\030\125\031\116\032\122\044\114" +
    "\045\135\046\141\047\137\050\157\051\126\064\147\100" +
    "\075\110\101\111\105\001\002\000\050\003\uff77\005\uff77" +
    "\041\uff77\042\uff77\062\uff77\066\uff77\070\uff77\072\uff77\073" +
    "\uff77\074\uff77\075\uff77\076\uff77\100\uff77\101\uff77\102\uff77" +
    "\110\uff77\111\uff77\112\uff77\131\uff77\001\002\000\010\070" +
    "\uff55\075\uff55\131\uff55\001\002\000\010\070\uff59\075\uff59" +
    "\131\uff59\001\002\000\010\070\uff5a\075\uff5a\131\uff5a\001" +
    "\002\000\004\131\ufecd\001\002\000\004\131\317\001\002" +
    "\000\004\073\u011f\001\002\000\004\064\u0120\001\002\000" +
    "\064\003\237\005\121\016\134\017\117\020\132\021\136" +
    "\022\153\023\156\024\143\025\123\026\124\027\130\030" +
    "\125\031\116\032\122\044\114\045\135\046\141\047\137" +
    "\050\157\051\126\064\147\100\075\110\101\111\105\001" +
    "\002\000\016\025\233\026\232\027\235\030\234\031\236" +
    "\065\u0122\001\002\000\050\003\ufed2\005\ufed2\041\ufed2\042" +
    "\ufed2\062\ufed2\066\ufed2\070\ufed2\072\ufed2\073\ufed2\074\ufed2" +
    "\075\ufed2\076\ufed2\100\ufed2\101\ufed2\102\ufed2\110\ufed2\111" +
    "\ufed2\112\ufed2\131\ufed2\001\002\000\010\070\uff57\075\uff57" +
    "\131\uff57\001\002\000\070\003\175\005\121\016\134\017" +
    "\117\020\132\021\136\022\153\023\156\025\123\026\124" +
    "\027\130\030\125\031\116\044\114\045\135\046\141\047" +
    "\137\050\157\051\126\056\200\064\147\070\uff4f\075\uff4f" +
    "\100\075\110\101\111\105\131\uff4f\001\002\000\062\003" +
    "\347\005\077\025\233\026\232\027\235\030\234\031\236" +
    "\041\054\042\uffe2\062\073\066\062\070\uff4e\072\066\073" +
    "\104\074\106\075\uff4e\076\337\100\075\101\110\102\071" +
    "\110\101\111\105\112\111\131\uff4e\001\002\000\010\070" +
    "\uff50\075\uff50\131\uff50\001\002\000\010\070\uff60\075\uff60" +
    "\131\uff60\001\002\000\006\003\u0129\005\u012a\001\002\000" +
    "\064\003\237\005\121\016\134\017\117\020\132\021\136" +
    "\022\153\023\156\024\143\025\123\026\124\027\130\030" +
    "\125\031\116\032\122\044\114\045\135\046\141\047\137" +
    "\050\157\051\126\064\147\100\075\110\101\111\105\001" +
    "\002\000\074\002\uffea\003\uffea\004\uffea\005\uffea\007\uffea" +
    "\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\041\uffea\042" +
    "\uffea\043\u012b\062\uffea\066\uffea\070\uffea\072\uffea\073\uffea" +
    "\074\uffea\075\uffea\076\uffea\100\uffea\101\uffea\102\uffea\110" +
    "\uffea\111\uffea\112\uffea\113\uffea\131\uffea\001\002\000\064" +
    "\003\237\005\121\016\134\017\117\020\132\021\136\022" +
    "\153\023\156\024\143\025\123\026\124\027\130\030\125" +
    "\031\116\032\122\044\114\045\135\046\141\047\137\050" +
    "\157\051\126\064\147\100\075\110\101\111\105\001\002" +
    "\000\104\002\uffe9\003\uffe9\004\uffe9\005\uffe9\007\uffe9\011" +
    "\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\025\233\026\232" +
    "\027\235\030\234\031\236\041\uffe9\042\uffe9\062\uffe9\066" +
    "\uffe9\070\uffe9\072\uffe9\073\uffe9\074\uffe9\075\uffe9\076\uffe9" +
    "\100\uffe9\101\uffe9\102\uffe9\110\uffe9\111\uffe9\112\uffe9\113" +
    "\uffe9\131\uffe9\001\002\000\104\002\uffe6\003\uffe6\004\uffe6" +
    "\005\uffe6\007\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015" +
    "\uffe6\025\233\026\232\027\235\030\234\031\236\041\uffe6" +
    "\042\uffe6\062\uffe6\066\uffe6\070\uffe6\072\uffe6\073\uffe6\074" +
    "\uffe6\075\uffe6\076\uffe6\100\uffe6\101\uffe6\102\uffe6\110\uffe6" +
    "\111\uffe6\112\uffe6\113\uffe6\131\uffe6\001\002\000\010\070" +
    "\uff54\075\uff54\131\uff54\001\002\000\010\070\uff5c\075\uff5c" +
    "\131\uff5c\001\002\000\010\070\uff5f\075\uff5f\131\uff5f\001" +
    "\002\000\010\070\uff5d\075\uff5d\131\uff5d\001\002\000\010" +
    "\070\uff56\075\uff56\131\uff56\001\002\000\010\070\uff5e\075" +
    "\uff5e\131\uff5e\001\002\000\004\005\u0135\001\002\000\074" +
    "\002\uff94\003\uff94\004\uff94\005\uff94\007\uff94\011\uff94\012" +
    "\uff94\013\uff94\014\uff94\015\uff94\041\uff94\042\uff94\056\200" +
    "\062\uff94\066\uff94\070\uff94\072\uff94\073\uff94\074\uff94\075" +
    "\uff94\076\uff94\100\uff94\101\uff94\102\uff94\110\uff94\111\uff94" +
    "\112\uff94\113\uff94\131\uff94\001\002\000\076\002\uff95\003" +
    "\uff95\004\uff95\005\uff95\007\uff95\011\uff95\012\uff95\013\uff95" +
    "\014\uff95\015\uff95\041\uff95\042\uff95\043\u0137\056\206\062" +
    "\uff95\066\uff95\070\uff95\072\uff95\073\uff95\074\uff95\075\uff95" +
    "\076\uff95\100\uff95\101\uff95\102\uff95\110\uff95\111\uff95\112" +
    "\uff95\113\uff95\131\uff95\001\002\000\004\060\u0138\001\002" +
    "\000\066\003\370\005\121\016\134\017\117\020\132\021" +
    "\136\022\153\023\156\024\143\025\123\026\124\027\130" +
    "\030\125\031\116\032\122\044\114\045\135\046\141\047" +
    "\137\050\157\051\126\060\367\064\147\100\075\110\101" +
    "\111\105\001\002\000\004\061\u013a\001\002\000\072\002" +
    "\uff93\003\uff93\004\uff93\005\uff93\007\uff93\011\uff93\012\uff93" +
    "\013\uff93\014\uff93\015\uff93\041\uff93\042\uff93\062\uff93\066" +
    "\uff93\070\uff93\072\uff93\073\uff93\074\uff93\075\uff93\076\uff93" +
    "\100\uff93\101\uff93\102\uff93\110\uff93\111\uff93\112\uff93\113" +
    "\uff93\131\uff93\001\002\000\010\070\uff52\075\uff52\131\uff52" +
    "\001\002\000\010\070\uff58\075\uff58\131\uff58\001\002\000" +
    "\004\131\317\001\002\000\006\003\u013f\073\u0140\001\002" +
    "\000\004\064\u0146\001\002\000\004\064\u0141\001\002\000" +
    "\064\003\u0142\005\121\016\134\017\117\020\132\021\136" +
    "\022\153\023\156\024\143\025\123\026\124\027\130\030" +
    "\125\031\116\032\122\044\114\045\135\046\141\047\137" +
    "\050\157\051\126\064\147\100\075\110\101\111\105\001" +
    "\002\000\064\003\175\005\121\016\134\017\117\020\132" +
    "\021\136\022\153\023\156\025\123\026\124\027\130\030" +
    "\125\031\116\044\114\045\135\046\141\047\137\050\157" +
    "\051\126\056\200\064\147\065\u0145\100\075\110\101\111" +
    "\105\001\002\000\016\025\233\026\232\027\235\030\234" +
    "\031\236\065\u0144\001\002\000\050\003\ufed3\005\ufed3\041" +
    "\ufed3\042\ufed3\062\ufed3\066\ufed3\070\ufed3\072\ufed3\073\ufed3" +
    "\074\ufed3\075\ufed3\076\ufed3\100\ufed3\101\ufed3\102\ufed3\110" +
    "\ufed3\111\ufed3\112\ufed3\131\ufed3\001\002\000\050\003\ufecf" +
    "\005\ufecf\041\ufecf\042\ufecf\062\ufecf\066\ufecf\070\ufecf\072" +
    "\ufecf\073\ufecf\074\ufecf\075\ufecf\076\ufecf\100\ufecf\101\ufecf" +
    "\102\ufecf\110\ufecf\111\ufecf\112\ufecf\131\ufecf\001\002\000" +
    "\064\003\237\005\121\016\134\017\117\020\132\021\136" +
    "\022\153\023\156\024\143\025\123\026\124\027\130\030" +
    "\125\031\116\032\122\044\114\045\135\046\141\047\137" +
    "\050\157\051\126\064\147\100\075\110\101\111\105\001" +
    "\002\000\016\025\233\026\232\027\235\030\234\031\236" +
    "\065\u0148\001\002\000\050\003\ufed0\005\ufed0\041\ufed0\042" +
    "\ufed0\062\ufed0\066\ufed0\070\ufed0\072\ufed0\073\ufed0\074\ufed0" +
    "\075\ufed0\076\ufed0\100\ufed0\101\ufed0\102\ufed0\110\ufed0\111" +
    "\ufed0\112\ufed0\131\ufed0\001\002\000\010\070\uff53\075\uff53" +
    "\131\uff53\001\002\000\010\070\uff5b\075\uff5b\131\uff5b\001" +
    "\002\000\050\003\ufece\005\ufece\041\ufece\042\ufece\062\ufece" +
    "\066\ufece\070\ufece\072\ufece\073\ufece\074\ufece\075\ufece\076" +
    "\ufece\100\ufece\101\ufece\102\ufece\110\ufece\111\ufece\112\ufece" +
    "\131\ufece\001\002\000\004\073\u014d\001\002\000\004\064" +
    "\u014e\001\002\000\064\003\237\005\121\016\134\017\117" +
    "\020\132\021\136\022\153\023\156\024\143\025\123\026" +
    "\124\027\130\030\125\031\116\032\122\044\114\045\135" +
    "\046\141\047\137\050\157\051\126\064\147\100\075\110" +
    "\101\111\105\001\002\000\016\025\233\026\232\027\235" +
    "\030\234\031\236\065\u0150\001\002\000\050\003\ufed1\005" +
    "\ufed1\041\ufed1\042\ufed1\062\ufed1\066\ufed1\070\ufed1\072\ufed1" +
    "\073\ufed1\074\ufed1\075\ufed1\076\ufed1\100\ufed1\101\ufed1\102" +
    "\ufed1\110\ufed1\111\ufed1\112\ufed1\131\ufed1\001\002\000\004" +
    "\065\u0157\001\002\000\032\003\u0153\005\121\044\114\045" +
    "\135\046\141\047\137\050\157\051\126\064\147\100\075" +
    "\110\101\111\105\001\002\000\036\003\175\005\121\044" +
    "\114\045\135\046\141\047\137\050\157\051\126\056\200" +
    "\064\147\065\u0156\100\075\110\101\111\105\001\002\000" +
    "\020\033\166\034\161\035\165\036\172\037\171\040\162" +
    "\065\u0155\001\002\000\146\002\uff2b\003\uff2b\004\uff2b\005" +
    "\uff2b\007\uff2b\010\uff2b\011\uff2b\012\uff2b\013\uff2b\014\uff2b" +
    "\015\uff2b\016\uff2b\017\uff2b\020\uff2b\021\uff2b\022\uff2b\023" +
    "\uff2b\025\uff2b\026\uff2b\027\uff2b\030\uff2b\031\uff2b\033\uff2b" +
    "\034\uff2b\035\uff2b\036\uff2b\037\uff2b\040\uff2b\041\uff2b\042" +
    "\uff2b\057\uff2b\061\uff2b\062\uff2b\065\uff2b\066\uff2b\070\uff2b" +
    "\072\uff2b\073\uff2b\074\uff2b\075\uff2b\076\uff2b\100\uff2b\101" +
    "\uff2b\102\uff2b\110\uff2b\111\uff2b\112\uff2b\113\uff2b\130\uff2b" +
    "\131\uff2b\001\002\000\146\002\uff2a\003\uff2a\004\uff2a\005" +
    "\uff2a\007\uff2a\010\uff2a\011\uff2a\012\uff2a\013\uff2a\014\uff2a" +
    "\015\uff2a\016\uff2a\017\uff2a\020\uff2a\021\uff2a\022\uff2a\023" +
    "\uff2a\025\uff2a\026\uff2a\027\uff2a\030\uff2a\031\uff2a\033\uff2a" +
    "\034\uff2a\035\uff2a\036\uff2a\037\uff2a\040\uff2a\041\uff2a\042" +
    "\uff2a\057\uff2a\061\uff2a\062\uff2a\065\uff2a\066\uff2a\070\uff2a" +
    "\072\uff2a\073\uff2a\074\uff2a\075\uff2a\076\uff2a\100\uff2a\101" +
    "\uff2a\102\uff2a\110\uff2a\111\uff2a\112\uff2a\113\uff2a\130\uff2a" +
    "\131\uff2a\001\002\000\146\002\uff29\003\uff29\004\uff29\005" +
    "\uff29\007\uff29\010\uff29\011\uff29\012\uff29\013\uff29\014\uff29" +
    "\015\uff29\016\uff29\017\uff29\020\uff29\021\uff29\022\uff29\023" +
    "\uff29\025\uff29\026\uff29\027\uff29\030\uff29\031\uff29\033\uff29" +
    "\034\uff29\035\uff29\036\uff29\037\uff29\040\uff29\041\uff29\042" +
    "\uff29\057\uff29\061\uff29\062\uff29\065\uff29\066\uff29\070\uff29" +
    "\072\uff29\073\uff29\074\uff29\075\uff29\076\uff29\100\uff29\101" +
    "\uff29\102\uff29\110\uff29\111\uff29\112\uff29\113\uff29\130\uff29" +
    "\131\uff29\001\002\000\006\065\u0166\131\317\001\002\000" +
    "\064\003\u015a\005\121\016\134\017\117\020\132\021\136" +
    "\022\153\023\156\024\143\025\123\026\124\027\130\030" +
    "\125\031\116\032\122\044\114\045\135\046\141\047\137" +
    "\050\157\051\126\064\147\100\075\110\101\111\105\001" +
    "\002\000\064\003\175\005\121\016\134\017\117\020\132" +
    "\021\136\022\153\023\156\025\123\026\124\027\130\030" +
    "\125\031\116\044\114\045\135\046\141\047\137\050\157" +
    "\051\126\056\200\064\147\065\u0162\100\075\110\101\111" +
    "\105\001\002\000\016\025\233\026\232\027\235\030\234" +
    "\031\236\065\u015c\001\002\000\004\130\025\001\002\000" +
    "\044\003\u015f\005\077\041\054\042\uffe2\062\073\066\062" +
    "\072\066\073\104\074\106\076\337\100\075\101\110\102" +
    "\071\110\101\111\105\112\111\131\uff4e\001\002\000\004" +
    "\131\317\001\002\000\032\003\355\011\030\012\033\013" +
    "\031\014\026\015\036\043\354\052\353\053\350\054\351" +
    "\056\200\131\317\001\002\000\050\003\ufed6\005\ufed6\041" +
    "\ufed6\042\ufed6\062\ufed6\066\ufed6\070\ufed6\072\ufed6\073\ufed6" +
    "\074\ufed6\075\ufed6\076\ufed6\100\ufed6\101\ufed6\102\ufed6\110" +
    "\ufed6\111\ufed6\112\ufed6\131\ufed6\001\002\000\050\003\ufed8" +
    "\005\ufed8\041\ufed8\042\ufed8\062\ufed8\066\ufed8\070\ufed8\072" +
    "\ufed8\073\ufed8\074\ufed8\075\ufed8\076\ufed8\100\ufed8\101\ufed8" +
    "\102\ufed8\110\ufed8\111\ufed8\112\ufed8\131\ufed8\001\002\000" +
    "\004\130\025\001\002\000\044\003\347\005\077\041\054" +
    "\042\uffe2\062\073\066\062\072\066\073\104\074\106\076" +
    "\337\100\075\101\110\102\071\110\101\111\105\112\111" +
    "\131\uff4e\001\002\000\004\131\317\001\002\000\050\003" +
    "\ufed7\005\ufed7\041\ufed7\042\ufed7\062\ufed7\066\ufed7\070\ufed7" +
    "\072\ufed7\073\ufed7\074\ufed7\075\ufed7\076\ufed7\100\ufed7\101" +
    "\ufed7\102\ufed7\110\ufed7\111\ufed7\112\ufed7\131\ufed7\001\002" +
    "\000\004\130\025\001\002\000\050\003\ufed4\005\ufed4\041" +
    "\ufed4\042\ufed4\062\ufed4\066\ufed4\070\ufed4\072\ufed4\073\ufed4" +
    "\074\ufed4\075\ufed4\076\ufed4\100\ufed4\101\ufed4\102\ufed4\110" +
    "\ufed4\111\ufed4\112\ufed4\131\ufed4\001\002\000\044\003\347" +
    "\005\077\041\054\042\uffe2\062\073\066\062\072\066\073" +
    "\104\074\106\076\337\100\075\101\110\102\071\110\101" +
    "\111\105\112\111\131\uff4e\001\002\000\004\131\317\001" +
    "\002\000\050\003\ufed5\005\ufed5\041\ufed5\042\ufed5\062\ufed5" +
    "\066\ufed5\070\ufed5\072\ufed5\073\ufed5\074\ufed5\075\ufed5\076" +
    "\ufed5\100\ufed5\101\ufed5\102\ufed5\110\ufed5\111\ufed5\112\ufed5" +
    "\131\ufed5\001\002\000\004\131\uff3e\001\002\000\004\131" +
    "\uff42\001\002\000\004\065\u0173\001\002\000\006\003\u016f" +
    "\005\u0170\001\002\000\004\065\u0172\001\002\000\004\065" +
    "\u0171\001\002\000\146\002\uff2e\003\uff2e\004\uff2e\005\uff2e" +
    "\007\uff2e\010\uff2e\011\uff2e\012\uff2e\013\uff2e\014\uff2e\015" +
    "\uff2e\016\uff2e\017\uff2e\020\uff2e\021\uff2e\022\uff2e\023\uff2e" +
    "\025\uff2e\026\uff2e\027\uff2e\030\uff2e\031\uff2e\033\uff2e\034" +
    "\uff2e\035\uff2e\036\uff2e\037\uff2e\040\uff2e\041\uff2e\042\uff2e" +
    "\057\uff2e\061\uff2e\062\uff2e\065\uff2e\066\uff2e\070\uff2e\072" +
    "\uff2e\073\uff2e\074\uff2e\075\uff2e\076\uff2e\100\uff2e\101\uff2e" +
    "\102\uff2e\110\uff2e\111\uff2e\112\uff2e\113\uff2e\130\uff2e\131" +
    "\uff2e\001\002\000\146\002\uff2d\003\uff2d\004\uff2d\005\uff2d" +
    "\007\uff2d\010\uff2d\011\uff2d\012\uff2d\013\uff2d\014\uff2d\015" +
    "\uff2d\016\uff2d\017\uff2d\020\uff2d\021\uff2d\022\uff2d\023\uff2d" +
    "\025\uff2d\026\uff2d\027\uff2d\030\uff2d\031\uff2d\033\uff2d\034" +
    "\uff2d\035\uff2d\036\uff2d\037\uff2d\040\uff2d\041\uff2d\042\uff2d" +
    "\057\uff2d\061\uff2d\062\uff2d\065\uff2d\066\uff2d\070\uff2d\072" +
    "\uff2d\073\uff2d\074\uff2d\075\uff2d\076\uff2d\100\uff2d\101\uff2d" +
    "\102\uff2d\110\uff2d\111\uff2d\112\uff2d\113\uff2d\130\uff2d\131" +
    "\uff2d\001\002\000\146\002\uff2c\003\uff2c\004\uff2c\005\uff2c" +
    "\007\uff2c\010\uff2c\011\uff2c\012\uff2c\013\uff2c\014\uff2c\015" +
    "\uff2c\016\uff2c\017\uff2c\020\uff2c\021\uff2c\022\uff2c\023\uff2c" +
    "\025\uff2c\026\uff2c\027\uff2c\030\uff2c\031\uff2c\033\uff2c\034" +
    "\uff2c\035\uff2c\036\uff2c\037\uff2c\040\uff2c\041\uff2c\042\uff2c" +
    "\057\uff2c\061\uff2c\062\uff2c\065\uff2c\066\uff2c\070\uff2c\072" +
    "\uff2c\073\uff2c\074\uff2c\075\uff2c\076\uff2c\100\uff2c\101\uff2c" +
    "\102\uff2c\110\uff2c\111\uff2c\112\uff2c\113\uff2c\130\uff2c\131" +
    "\uff2c\001\002\000\004\131\uff46\001\002\000\064\003\237" +
    "\005\121\016\134\017\117\020\132\021\136\022\153\023" +
    "\156\024\143\025\123\026\124\027\130\030\125\031\116" +
    "\032\122\044\114\045\135\046\141\047\137\050\157\051" +
    "\126\064\147\100\075\110\101\111\105\001\002\000\050" +
    "\003\uff9b\005\uff9b\041\uff9b\042\uff9b\062\uff9b\066\uff9b\070" +
    "\uff9b\072\uff9b\073\uff9b\074\uff9b\075\uff9b\076\uff9b\100\uff9b" +
    "\101\uff9b\102\uff9b\110\uff9b\111\uff9b\112\uff9b\131\uff9b\001" +
    "\002\000\066\003\237\005\121\016\134\017\117\020\132" +
    "\021\136\022\153\023\156\024\143\025\123\026\124\027" +
    "\130\030\125\031\116\032\122\043\u0180\044\114\045\135" +
    "\046\141\047\137\050\157\051\126\064\147\100\075\110" +
    "\101\111\105\001\002\000\064\003\237\005\121\016\134" +
    "\017\117\020\132\021\136\022\153\023\156\024\143\025" +
    "\123\026\124\027\130\030\125\031\116\032\122\044\114" +
    "\045\135\046\141\047\137\050\157\051\126\064\147\100" +
    "\075\110\101\111\105\001\002\000\010\003\u017b\043\u017c" +
    "\056\206\001\002\000\050\003\uff9c\005\uff9c\041\uff9c\042" +
    "\uff9c\062\uff9c\066\uff9c\070\uff9c\072\uff9c\073\uff9c\074\uff9c" +
    "\075\uff9c\076\uff9c\100\uff9c\101\uff9c\102\uff9c\110\uff9c\111" +
    "\uff9c\112\uff9c\131\uff9c\001\002\000\064\003\237\005\121" +
    "\016\134\017\117\020\132\021\136\022\153\023\156\024" +
    "\143\025\123\026\124\027\130\030\125\031\116\032\122" +
    "\044\114\045\135\046\141\047\137\050\157\051\126\064" +
    "\147\100\075\110\101\111\105\001\002\000\064\003\237" +
    "\005\121\016\134\017\117\020\132\021\136\022\153\023" +
    "\156\024\143\025\123\026\124\027\130\030\125\031\116" +
    "\032\122\044\114\045\135\046\141\047\137\050\157\051" +
    "\126\064\147\100\075\110\101\111\105\001\002\000\050" +
    "\003\uff7a\005\uff7a\041\uff7a\042\uff7a\062\uff7a\066\uff7a\070" +
    "\uff7a\072\uff7a\073\uff7a\074\uff7a\075\uff7a\076\uff7a\100\uff7a" +
    "\101\uff7a\102\uff7a\110\uff7a\111\uff7a\112\uff7a\131\uff7a\001" +
    "\002\000\050\003\uff79\005\uff79\041\uff79\042\uff79\062\uff79" +
    "\066\uff79\070\uff79\072\uff79\073\uff79\074\uff79\075\uff79\076" +
    "\uff79\100\uff79\101\uff79\102\uff79\110\uff79\111\uff79\112\uff79" +
    "\131\uff79\001\002\000\062\003\uff9e\005\uff9e\025\233\026" +
    "\232\027\235\030\234\031\236\041\uff9e\042\uff9e\062\uff9e" +
    "\066\uff9e\070\uff9e\072\uff9e\073\uff9e\074\uff9e\075\uff9e\076" +
    "\uff9e\100\uff9e\101\uff9e\102\uff9e\110\uff9e\111\uff9e\112\uff9e" +
    "\131\uff9e\001\002\000\064\003\237\005\121\016\134\017" +
    "\117\020\132\021\136\022\153\023\156\024\143\025\123" +
    "\026\124\027\130\030\125\031\116\032\122\044\114\045" +
    "\135\046\141\047\137\050\157\051\126\064\147\100\075" +
    "\110\101\111\105\001\002\000\062\003\uff9a\005\uff9a\025" +
    "\233\026\232\027\235\030\234\031\236\041\uff9a\042\uff9a" +
    "\062\uff9a\066\uff9a\070\uff9a\072\uff9a\073\uff9a\074\uff9a\075" +
    "\uff9a\076\uff9a\100\uff9a\101\uff9a\102\uff9a\110\uff9a\111\uff9a" +
    "\112\uff9a\131\uff9a\001\002\000\050\003\uff78\005\uff78\041" +
    "\uff78\042\uff78\062\uff78\066\uff78\070\uff78\072\uff78\073\uff78" +
    "\074\uff78\075\uff78\076\uff78\100\uff78\101\uff78\102\uff78\110" +
    "\uff78\111\uff78\112\uff78\131\uff78\001\002\000\062\003\uff9d" +
    "\005\uff9d\025\233\026\232\027\235\030\234\031\236\041" +
    "\uff9d\042\uff9d\062\uff9d\066\uff9d\070\uff9d\072\uff9d\073\uff9d" +
    "\074\uff9d\075\uff9d\076\uff9d\100\uff9d\101\uff9d\102\uff9d\110" +
    "\uff9d\111\uff9d\112\uff9d\131\uff9d\001\002\000\004\131\uff47" +
    "\001\002\000\004\065\u01ac\001\002\000\034\003\u018d\062" +
    "\u0193\114\u0191\115\u018b\116\u0188\117\u0190\120\u018a\121\u018e" +
    "\122\u018f\123\u0194\124\u0189\125\u0187\126\u018c\001\002\000" +
    "\006\003\uff16\007\uff16\001\002\000\006\003\uff1e\007\uff1e" +
    "\001\002\000\006\003\uff17\007\uff17\001\002\000\006\003" +
    "\uff1c\007\uff1c\001\002\000\006\003\uff1f\007\uff1f\001\002" +
    "\000\006\003\uff15\007\uff15\001\002\000\010\003\uff14\007" +
    "\uff14\065\u01ab\001\002\000\006\003\uff1b\007\uff1b\001\002" +
    "\000\006\003\uff19\007\uff19\001\002\000\006\003\uff1d\007" +
    "\uff1d\001\002\000\006\003\uff20\007\uff20\001\002\000\006" +
    "\003\u0196\007\u0195\001\002\000\006\003\uff1a\007\uff1a\001" +
    "\002\000\006\003\uff18\007\uff18\001\002\000\032\003\175" +
    "\005\121\044\114\045\135\046\141\047\137\050\157\051" +
    "\126\064\147\100\075\110\101\111\105\001\002\000\032" +
    "\003\175\005\121\044\114\045\135\046\141\047\137\050" +
    "\157\051\126\064\147\100\075\110\101\111\105\001\002" +
    "\000\020\007\u0198\033\166\034\161\035\165\036\172\037" +
    "\171\040\162\001\002\000\032\003\175\005\121\044\114" +
    "\045\135\046\141\047\137\050\157\051\126\064\147\100" +
    "\075\110\101\111\105\001\002\000\020\007\u019a\033\166" +
    "\034\161\035\165\036\172\037\171\040\162\001\002\000" +
    "\032\003\175\005\121\044\114\045\135\046\141\047\137" +
    "\050\157\051\126\064\147\100\075\110\101\111\105\001" +
    "\002\000\020\033\166\034\161\035\165\036\172\037\171" +
    "\040\162\065\u019c\001\002\000\146\002\uff3a\003\uff3a\004" +
    "\uff3a\005\uff3a\007\uff3a\010\uff3a\011\uff3a\012\uff3a\013\uff3a" +
    "\014\uff3a\015\uff3a\016\uff3a\017\uff3a\020\uff3a\021\uff3a\022" +
    "\uff3a\023\uff3a\025\uff3a\026\uff3a\027\uff3a\030\uff3a\031\uff3a" +
    "\033\uff3a\034\uff3a\035\uff3a\036\uff3a\037\uff3a\040\uff3a\041" +
    "\uff3a\042\uff3a\057\uff3a\061\uff3a\062\uff3a\065\uff3a\066\uff3a" +
    "\070\uff3a\072\uff3a\073\uff3a\074\uff3a\075\uff3a\076\uff3a\100" +
    "\uff3a\101\uff3a\102\uff3a\110\uff3a\111\uff3a\112\uff3a\113\uff3a" +
    "\130\uff3a\131\uff3a\001\002\000\022\003\u019f\007\u019e\033" +
    "\166\034\161\035\165\036\172\037\171\040\162\001\002" +
    "\000\032\003\175\005\121\044\114\045\135\046\141\047" +
    "\137\050\157\051\126\064\147\100\075\110\101\111\105" +
    "\001\002\000\032\003\175\005\121\044\114\045\135\046" +
    "\141\047\137\050\157\051\126\064\147\100\075\110\101" +
    "\111\105\001\002\000\020\007\u01a1\033\166\034\161\035" +
    "\165\036\172\037\171\040\162\001\002\000\032\003\175" +
    "\005\121\044\114\045\135\046\141\047\137\050\157\051" +
    "\126\064\147\100\075\110\101\111\105\001\002\000\020" +
    "\033\166\034\161\035\165\036\172\037\171\040\162\065" +
    "\u01a3\001\002\000\146\002\uff39\003\uff39\004\uff39\005\uff39" +
    "\007\uff39\010\uff39\011\uff39\012\uff39\013\uff39\014\uff39\015" +
    "\uff39\016\uff39\017\uff39\020\uff39\021\uff39\022\uff39\023\uff39" +
    "\025\uff39\026\uff39\027\uff39\030\uff39\031\uff39\033\uff39\034" +
    "\uff39\035\uff39\036\uff39\037\uff39\040\uff39\041\uff39\042\uff39" +
    "\057\uff39\061\uff39\062\uff39\065\uff39\066\uff39\070\uff39\072" +
    "\uff39\073\uff39\074\uff39\075\uff39\076\uff39\100\uff39\101\uff39" +
    "\102\uff39\110\uff39\111\uff39\112\uff39\113\uff39\130\uff39\131" +
    "\uff39\001\002\000\022\003\u01a6\007\u01a5\033\166\034\161" +
    "\035\165\036\172\037\171\040\162\001\002\000\032\003" +
    "\175\005\121\044\114\045\135\046\141\047\137\050\157" +
    "\051\126\064\147\100\075\110\101\111\105\001\002\000" +
    "\032\003\175\005\121\044\114\045\135\046\141\047\137" +
    "\050\157\051\126\064\147\100\075\110\101\111\105\001" +
    "\002\000\020\033\166\034\161\035\165\036\172\037\171" +
    "\040\162\065\u01a8\001\002\000\146\002\uff38\003\uff38\004" +
    "\uff38\005\uff38\007\uff38\010\uff38\011\uff38\012\uff38\013\uff38" +
    "\014\uff38\015\uff38\016\uff38\017\uff38\020\uff38\021\uff38\022" +
    "\uff38\023\uff38\025\uff38\026\uff38\027\uff38\030\uff38\031\uff38" +
    "\033\uff38\034\uff38\035\uff38\036\uff38\037\uff38\040\uff38\041" +
    "\uff38\042\uff38\057\uff38\061\uff38\062\uff38\065\uff38\066\uff38" +
    "\070\uff38\072\uff38\073\uff38\074\uff38\075\uff38\076\uff38\100" +
    "\uff38\101\uff38\102\uff38\110\uff38\111\uff38\112\uff38\113\uff38" +
    "\130\uff38\131\uff38\001\002\000\020\033\166\034\161\035" +
    "\165\036\172\037\171\040\162\065\u01aa\001\002\000\146" +
    "\002\uff3c\003\uff3c\004\uff3c\005\uff3c\007\uff3c\010\uff3c\011" +
    "\uff3c\012\uff3c\013\uff3c\014\uff3c\015\uff3c\016\uff3c\017\uff3c" +
    "\020\uff3c\021\uff3c\022\uff3c\023\uff3c\025\uff3c\026\uff3c\027" +
    "\uff3c\030\uff3c\031\uff3c\033\uff3c\034\uff3c\035\uff3c\036\uff3c" +
    "\037\uff3c\040\uff3c\041\uff3c\042\uff3c\057\uff3c\061\uff3c\062" +
    "\uff3c\065\uff3c\066\uff3c\070\uff3c\072\uff3c\073\uff3c\074\uff3c" +
    "\075\uff3c\076\uff3c\100\uff3c\101\uff3c\102\uff3c\110\uff3c\111" +
    "\uff3c\112\uff3c\113\uff3c\130\uff3c\131\uff3c\001\002\000\146" +
    "\002\uff3b\003\uff3b\004\uff3b\005\uff3b\007\uff3b\010\uff3b\011" +
    "\uff3b\012\uff3b\013\uff3b\014\uff3b\015\uff3b\016\uff3b\017\uff3b" +
    "\020\uff3b\021\uff3b\022\uff3b\023\uff3b\025\uff3b\026\uff3b\027" +
    "\uff3b\030\uff3b\031\uff3b\033\uff3b\034\uff3b\035\uff3b\036\uff3b" +
    "\037\uff3b\040\uff3b\041\uff3b\042\uff3b\057\uff3b\061\uff3b\062" +
    "\uff3b\065\uff3b\066\uff3b\070\uff3b\072\uff3b\073\uff3b\074\uff3b" +
    "\075\uff3b\076\uff3b\100\uff3b\101\uff3b\102\uff3b\110\uff3b\111" +
    "\uff3b\112\uff3b\113\uff3b\130\uff3b\131\uff3b\001\002\000\146" +
    "\002\uff37\003\uff37\004\uff37\005\uff37\007\uff37\010\uff37\011" +
    "\uff37\012\uff37\013\uff37\014\uff37\015\uff37\016\uff37\017\uff37" +
    "\020\uff37\021\uff37\022\uff37\023\uff37\025\uff37\026\uff37\027" +
    "\uff37\030\uff37\031\uff37\033\uff37\034\uff37\035\uff37\036\uff37" +
    "\037\uff37\040\uff37\041\uff37\042\uff37\057\uff37\061\uff37\062" +
    "\uff37\065\uff37\066\uff37\070\uff37\072\uff37\073\uff37\074\uff37" +
    "\075\uff37\076\uff37\100\uff37\101\uff37\102\uff37\110\uff37\111" +
    "\uff37\112\uff37\113\uff37\130\uff37\131\uff37\001\002\000\034" +
    "\002\uff0b\003\uff0b\004\uff0b\005\uff0b\011\uff0b\012\uff0b\013" +
    "\uff0b\014\uff0b\015\uff0b\041\uff0b\042\uff0b\113\uff0b\131\uff0b" +
    "\001\002\000\010\065\u01e0\130\025\131\317\001\002\000" +
    "\064\003\u01b0\005\121\016\134\017\117\020\132\021\136" +
    "\022\153\023\156\024\143\025\123\026\124\027\130\030" +
    "\125\031\116\032\122\044\114\045\135\046\141\047\137" +
    "\050\157\051\126\064\147\100\075\110\101\111\105\001" +
    "\002\000\064\003\175\005\121\016\134\017\117\020\132" +
    "\021\136\022\153\023\156\025\123\026\124\027\130\030" +
    "\125\031\116\044\114\045\135\046\141\047\137\050\157" +
    "\051\126\056\200\064\147\065\u01db\100\075\110\101\111" +
    "\105\001\002\000\016\025\233\026\232\027\235\030\234" +
    "\031\236\065\u01b2\001\002\000\004\130\025\001\002\000" +
    "\044\003\u01b5\005\077\041\054\042\uffe2\062\073\066\062" +
    "\072\066\073\104\074\106\076\337\100\075\101\110\102" +
    "\071\110\101\111\105\112\111\131\uff4e\001\002\000\004" +
    "\131\317\001\002\000\032\003\355\011\030\012\033\013" +
    "\031\014\026\015\036\043\354\052\353\053\350\054\351" +
    "\056\200\131\317\001\002\000\054\003\uff02\005\uff02\041" +
    "\uff02\042\uff02\062\uff02\063\u01b9\066\uff02\070\uff02\072\uff02" +
    "\073\uff02\074\uff02\075\uff02\076\uff02\100\uff02\101\uff02\102" +
    "\uff02\110\uff02\111\uff02\112\uff02\127\u01b8\131\uff02\001\002" +
    "\000\050\003\uff08\005\uff08\041\uff08\042\uff08\062\uff08\066" +
    "\uff08\070\uff08\072\uff08\073\uff08\074\uff08\075\uff08\076\uff08" +
    "\100\uff08\101\uff08\102\uff08\110\uff08\111\uff08\112\uff08\131" +
    "\uff08\001\002\000\006\003\u01bd\064\u01be\001\002\000\004" +
    "\130\025\001\002\000\044\003\347\005\077\041\054\042" +
    "\uffe2\062\073\066\062\072\066\073\104\074\106\076\337" +
    "\100\075\101\110\102\071\110\101\111\105\112\111\131" +
    "\uff4e\001\002\000\004\131\317\001\002\000\050\003\uff03" +
    "\005\uff03\041\uff03\042\uff03\062\uff03\066\uff03\070\uff03\072" +
    "\uff03\073\uff03\074\uff03\075\uff03\076\uff03\100\uff03\101\uff03" +
    "\102\uff03\110\uff03\111\uff03\112\uff03\131\uff03\001\002\000" +
    "\010\065\u01ce\130\025\131\317\001\002\000\064\003\u01bf" +
    "\005\121\016\134\017\117\020\132\021\136\022\153\023" +
    "\156\024\143\025\123\026\124\027\130\030\125\031\116" +
    "\032\122\044\114\045\135\046\141\047\137\050\157\051" +
    "\126\064\147\100\075\110\101\111\105\001\002\000\064" +
    "\003\175\005\121\016\134\017\117\020\132\021\136\022" +
    "\153\023\156\025\123\026\124\027\130\030\125\031\116" +
    "\044\114\045\135\046\141\047\137\050\157\051\126\056" +
    "\200\064\147\065\u01c9\100\075\110\101\111\105\001\002" +
    "\000\016\025\233\026\232\027\235\030\234\031\236\065" +
    "\u01c1\001\002\000\004\130\025\001\002\000\044\003\u01c4" +
    "\005\077\041\054\042\uffe2\062\073\066\062\072\066\073" +
    "\104\074\106\076\337\100\075\101\110\102\071\110\101" +
    "\111\105\112\111\131\uff4e\001\002\000\004\131\317\001" +
    "\002\000\032\003\355\011\030\012\033\013\031\014\026" +
    "\015\036\043\354\052\353\053\350\054\351\056\200\131" +
    "\317\001\002\000\054\003\uff02\005\uff02\041\uff02\042\uff02" +
    "\062\uff02\063\u01b9\066\uff02\070\uff02\072\uff02\073\uff02\074" +
    "\uff02\075\uff02\076\uff02\100\uff02\101\uff02\102\uff02\110\uff02" +
    "\111\uff02\112\uff02\127\u01b8\131\uff02\001\002\000\050\003" +
    "\uff00\005\uff00\041\uff00\042\uff00\062\uff00\066\uff00\070\uff00" +
    "\072\uff00\073\uff00\074\uff00\075\uff00\076\uff00\100\uff00\101" +
    "\uff00\102\uff00\110\uff00\111\uff00\112\uff00\131\uff00\001\002" +
    "\000\054\003\uff02\005\uff02\041\uff02\042\uff02\062\uff02\063" +
    "\u01b9\066\uff02\070\uff02\072\uff02\073\uff02\074\uff02\075\uff02" +
    "\076\uff02\100\uff02\101\uff02\102\uff02\110\uff02\111\uff02\112" +
    "\uff02\127\u01b8\131\uff02\001\002\000\050\003\uff04\005\uff04" +
    "\041\uff04\042\uff04\062\uff04\066\uff04\070\uff04\072\uff04\073" +
    "\uff04\074\uff04\075\uff04\076\uff04\100\uff04\101\uff04\102\uff04" +
    "\110\uff04\111\uff04\112\uff04\131\uff04\001\002\000\004\130" +
    "\025\001\002\000\044\003\347\005\077\041\054\042\uffe2" +
    "\062\073\066\062\072\066\073\104\074\106\076\337\100" +
    "\075\101\110\102\071\110\101\111\105\112\111\131\uff4e" +
    "\001\002\000\004\131\317\001\002\000\054\003\uff02\005" +
    "\uff02\041\uff02\042\uff02\062\uff02\063\u01b9\066\uff02\070\uff02" +
    "\072\uff02\073\uff02\074\uff02\075\uff02\076\uff02\100\uff02\101" +
    "\uff02\102\uff02\110\uff02\111\uff02\112\uff02\127\u01b8\131\uff02" +
    "\001\002\000\050\003\uff01\005\uff01\041\uff01\042\uff01\062" +
    "\uff01\066\uff01\070\uff01\072\uff01\073\uff01\074\uff01\075\uff01" +
    "\076\uff01\100\uff01\101\uff01\102\uff01\110\uff01\111\uff01\112" +
    "\uff01\131\uff01\001\002\000\004\130\025\001\002\000\044" +
    "\003\347\005\077\041\054\042\uffe2\062\073\066\062\072" +
    "\066\073\104\074\106\076\337\100\075\101\110\102\071" +
    "\110\101\111\105\112\111\131\uff4e\001\002\000\054\003" +
    "\uff02\005\uff02\041\uff02\042\uff02\062\uff02\063\u01b9\066\uff02" +
    "\070\uff02\072\uff02\073\uff02\074\uff02\075\uff02\076\uff02\100" +
    "\uff02\101\uff02\102\uff02\110\uff02\111\uff02\112\uff02\127\u01b8" +
    "\131\uff02\001\002\000\050\003\ufefd\005\ufefd\041\ufefd\042" +
    "\ufefd\062\ufefd\066\ufefd\070\ufefd\072\ufefd\073\ufefd\074\ufefd" +
    "\075\ufefd\076\ufefd\100\ufefd\101\ufefd\102\ufefd\110\ufefd\111" +
    "\ufefd\112\ufefd\131\ufefd\001\002\000\004\131\317\001\002" +
    "\000\054\003\uff02\005\uff02\041\uff02\042\uff02\062\uff02\063" +
    "\u01b9\066\uff02\070\uff02\072\uff02\073\uff02\074\uff02\075\uff02" +
    "\076\uff02\100\uff02\101\uff02\102\uff02\110\uff02\111\uff02\112" +
    "\uff02\127\u01b8\131\uff02\001\002\000\050\003\ufeff\005\ufeff" +
    "\041\ufeff\042\ufeff\062\ufeff\066\ufeff\070\ufeff\072\ufeff\073" +
    "\ufeff\074\ufeff\075\ufeff\076\ufeff\100\ufeff\101\ufeff\102\ufeff" +
    "\110\ufeff\111\ufeff\112\ufeff\131\ufeff\001\002\000\044\003" +
    "\347\005\077\041\054\042\uffe2\062\073\066\062\072\066" +
    "\073\104\074\106\076\337\100\075\101\110\102\071\110" +
    "\101\111\105\112\111\131\uff4e\001\002\000\004\131\317" +
    "\001\002\000\054\003\uff02\005\uff02\041\uff02\042\uff02\062" +
    "\uff02\063\u01b9\066\uff02\070\uff02\072\uff02\073\uff02\074\uff02" +
    "\075\uff02\076\uff02\100\uff02\101\uff02\102\uff02\110\uff02\111" +
    "\uff02\112\uff02\127\u01b8\131\uff02\001\002\000\050\003\ufefe" +
    "\005\ufefe\041\ufefe\042\ufefe\062\ufefe\066\ufefe\070\ufefe\072" +
    "\ufefe\073\ufefe\074\ufefe\075\ufefe\076\ufefe\100\ufefe\101\ufefe" +
    "\102\ufefe\110\ufefe\111\ufefe\112\ufefe\131\ufefe\001\002\000" +
    "\054\003\uff02\005\uff02\041\uff02\042\uff02\062\uff02\063\u01b9" +
    "\066\uff02\070\uff02\072\uff02\073\uff02\074\uff02\075\uff02\076" +
    "\uff02\100\uff02\101\uff02\102\uff02\110\uff02\111\uff02\112\uff02" +
    "\127\u01b8\131\uff02\001\002\000\050\003\uff0a\005\uff0a\041" +
    "\uff0a\042\uff0a\062\uff0a\066\uff0a\070\uff0a\072\uff0a\073\uff0a" +
    "\074\uff0a\075\uff0a\076\uff0a\100\uff0a\101\uff0a\102\uff0a\110" +
    "\uff0a\111\uff0a\112\uff0a\131\uff0a\001\002\000\004\130\025" +
    "\001\002\000\044\003\347\005\077\041\054\042\uffe2\062" +
    "\073\066\062\072\066\073\104\074\106\076\337\100\075" +
    "\101\110\102\071\110\101\111\105\112\111\131\uff4e\001" +
    "\002\000\004\131\317\001\002\000\054\003\uff02\005\uff02" +
    "\041\uff02\042\uff02\062\uff02\063\u01b9\066\uff02\070\uff02\072" +
    "\uff02\073\uff02\074\uff02\075\uff02\076\uff02\100\uff02\101\uff02" +
    "\102\uff02\110\uff02\111\uff02\112\uff02\127\u01b8\131\uff02\001" +
    "\002\000\050\003\uff09\005\uff09\041\uff09\042\uff09\062\uff09" +
    "\066\uff09\070\uff09\072\uff09\073\uff09\074\uff09\075\uff09\076" +
    "\uff09\100\uff09\101\uff09\102\uff09\110\uff09\111\uff09\112\uff09" +
    "\131\uff09\001\002\000\004\130\025\001\002\000\044\003" +
    "\347\005\077\041\054\042\uffe2\062\073\066\062\072\066" +
    "\073\104\074\106\076\337\100\075\101\110\102\071\110" +
    "\101\111\105\112\111\131\uff4e\001\002\000\054\003\uff02" +
    "\005\uff02\041\uff02\042\uff02\062\uff02\063\u01b9\066\uff02\070" +
    "\uff02\072\uff02\073\uff02\074\uff02\075\uff02\076\uff02\100\uff02" +
    "\101\uff02\102\uff02\110\uff02\111\uff02\112\uff02\127\u01b8\131" +
    "\uff02\001\002\000\050\003\uff05\005\uff05\041\uff05\042\uff05" +
    "\062\uff05\066\uff05\070\uff05\072\uff05\073\uff05\074\uff05\075" +
    "\uff05\076\uff05\100\uff05\101\uff05\102\uff05\110\uff05\111\uff05" +
    "\112\uff05\131\uff05\001\002\000\004\131\317\001\002\000" +
    "\054\003\uff02\005\uff02\041\uff02\042\uff02\062\uff02\063\u01b9" +
    "\066\uff02\070\uff02\072\uff02\073\uff02\074\uff02\075\uff02\076" +
    "\uff02\100\uff02\101\uff02\102\uff02\110\uff02\111\uff02\112\uff02" +
    "\127\u01b8\131\uff02\001\002\000\050\003\uff07\005\uff07\041" +
    "\uff07\042\uff07\062\uff07\066\uff07\070\uff07\072\uff07\073\uff07" +
    "\074\uff07\075\uff07\076\uff07\100\uff07\101\uff07\102\uff07\110" +
    "\uff07\111\uff07\112\uff07\131\uff07\001\002\000\044\003\347" +
    "\005\077\041\054\042\uffe2\062\073\066\062\072\066\073" +
    "\104\074\106\076\337\100\075\101\110\102\071\110\101" +
    "\111\105\112\111\131\uff4e\001\002\000\004\131\317\001" +
    "\002\000\054\003\uff02\005\uff02\041\uff02\042\uff02\062\uff02" +
    "\063\u01b9\066\uff02\070\uff02\072\uff02\073\uff02\074\uff02\075" +
    "\uff02\076\uff02\100\uff02\101\uff02\102\uff02\110\uff02\111\uff02" +
    "\112\uff02\127\u01b8\131\uff02\001\002\000\050\003\uff06\005" +
    "\uff06\041\uff06\042\uff06\062\uff06\066\uff06\070\uff06\072\uff06" +
    "\073\uff06\074\uff06\075\uff06\076\uff06\100\uff06\101\uff06\102" +
    "\uff06\110\uff06\111\uff06\112\uff06\131\uff06\001\002\000\004" +
    "\131\uff44\001\002\000\004\065\u01fd\001\002\000\006\003" +
    "\u01ee\005\u01ef\001\002\000\004\065\u01fc\001\002\000\006" +
    "\003\u01f1\007\u01f0\001\002\000\016\003\u01f4\103\u01f3\104" +
    "\u01f7\105\u01f2\106\u01f8\107\u01f5\001\002\000\016\003\u01f4" +
    "\103\u01f3\104\u01f7\105\u01f2\106\u01f8\107\u01f5\001\002\000" +
    "\004\065\uff11\001\002\000\004\065\uff13\001\002\000\004" +
    "\065\uff0e\001\002\000\004\065\uff0f\001\002\000\004\065" +
    "\u01f9\001\002\000\004\065\uff12\001\002\000\004\065\uff10" +
    "\001\002\000\050\003\uff30\005\uff30\041\uff30\042\uff30\062" +
    "\uff30\066\uff30\070\uff30\072\uff30\073\uff30\074\uff30\075\uff30" +
    "\076\uff30\100\uff30\101\uff30\102\uff30\110\uff30\111\uff30\112" +
    "\uff30\131\uff30\001\002\000\004\065\u01fb\001\002\000\050" +
    "\003\uff32\005\uff32\041\uff32\042\uff32\062\uff32\066\uff32\070" +
    "\uff32\072\uff32\073\uff32\074\uff32\075\uff32\076\uff32\100\uff32" +
    "\101\uff32\102\uff32\110\uff32\111\uff32\112\uff32\131\uff32\001" +
    "\002\000\050\003\uff31\005\uff31\041\uff31\042\uff31\062\uff31" +
    "\066\uff31\070\uff31\072\uff31\073\uff31\074\uff31\075\uff31\076" +
    "\uff31\100\uff31\101\uff31\102\uff31\110\uff31\111\uff31\112\uff31" +
    "\131\uff31\001\002\000\050\003\uff2f\005\uff2f\041\uff2f\042" +
    "\uff2f\062\uff2f\066\uff2f\070\uff2f\072\uff2f\073\uff2f\074\uff2f" +
    "\075\uff2f\076\uff2f\100\uff2f\101\uff2f\102\uff2f\110\uff2f\111" +
    "\uff2f\112\uff2f\131\uff2f\001\002\000\004\131\uff4d\001\002" +
    "\000\004\131\uff41\001\002\000\010\003\u0202\005\u0203\042" +
    "\u0201\001\002\000\016\003\355\011\030\012\033\013\031" +
    "\014\026\015\036\001\002\000\070\003\237\005\u022f\016" +
    "\134\017\117\020\132\021\136\022\153\023\156\024\143" +
    "\025\123\026\124\027\130\030\125\031\116\032\122\043" +
    "\u0230\044\114\045\135\046\141\047\137\050\157\051\126" +
    "\064\147\065\u0231\100\075\110\101\111\105\001\002\000" +
    "\006\003\u022a\043\u022b\001\002\000\004\010\u0205\001\002" +
    "\000\064\003\u0206\005\121\016\134\017\117\020\132\021" +
    "\136\022\153\023\156\024\143\025\123\026\124\027\130" +
    "\030\125\031\116\032\122\044\114\045\135\046\141\047" +
    "\137\050\157\051\126\064\147\100\075\110\101\111\105" +
    "\001\002\000\062\003\u0224\005\u0223\016\134\017\117\020" +
    "\132\021\136\022\153\023\156\025\123\026\124\027\130" +
    "\030\125\031\116\044\114\045\135\046\141\047\137\050" +
    "\157\051\126\056\200\064\147\100\075\110\101\111\105" +
    "\001\002\000\016\010\ufee1\025\233\026\232\027\235\030" +
    "\234\031\236\001\002\000\004\010\u0209\001\002\000\006" +
    "\003\u020a\005\u020b\001\002\000\014\043\u021b\052\u0219\053" +
    "\u021c\054\u021a\065\u021d\001\002\000\012\043\u0215\052\u0213" +
    "\053\u0216\054\u0214\001\002\000\004\065\u020d\001\002\000" +
    "\004\130\025\001\002\000\044\003\u0210\005\077\041\054" +
    "\042\uffe2\062\073\066\062\072\066\073\104\074\106\076" +
    "\337\100\075\101\110\102\071\110\101\111\105\112\111" +
    "\131\uff4e\001\002\000\004\131\317\001\002\000\032\003" +
    "\355\011\030\012\033\013\031\014\026\015\036\043\354" +
    "\052\353\053\350\054\351\056\200\131\317\001\002\000" +
    "\050\003\ufeeb\005\ufeeb\041\ufeeb\042\ufeeb\062\ufeeb\066\ufeeb" +
    "\070\ufeeb\072\ufeeb\073\ufeeb\074\ufeeb\075\ufeeb\076\ufeeb\100" +
    "\ufeeb\101\ufeeb\102\ufeeb\110\ufeeb\111\ufeeb\112\ufeeb\131\ufeeb" +
    "\001\002\000\050\003\ufef0\005\ufef0\041\ufef0\042\ufef0\062" +
    "\ufef0\066\ufef0\070\ufef0\072\ufef0\073\ufef0\074\ufef0\075\ufef0" +
    "\076\ufef0\100\ufef0\101\ufef0\102\ufef0\110\ufef0\111\ufef0\112" +
    "\ufef0\131\ufef0\001\002\000\032\003\175\005\121\044\114" +
    "\045\135\046\141\047\137\050\157\051\126\064\147\100" +
    "\075\110\101\111\105\001\002\000\004\065\ufedd\001\002" +
    "\000\032\003\175\005\121\044\114\045\135\046\141\047" +
    "\137\050\157\051\126\064\147\100\075\110\101\111\105" +
    "\001\002\000\004\065\ufede\001\002\000\020\033\166\034" +
    "\161\035\165\036\172\037\171\040\162\065\ufee0\001\002" +
    "\000\020\033\166\034\161\035\165\036\172\037\171\040" +
    "\162\065\ufedf\001\002\000\032\003\175\005\121\044\114" +
    "\045\135\046\141\047\137\050\157\051\126\064\147\100" +
    "\075\110\101\111\105\001\002\000\004\065\ufed9\001\002" +
    "\000\032\003\175\005\121\044\114\045\135\046\141\047" +
    "\137\050\157\051\126\064\147\100\075\110\101\111\105" +
    "\001\002\000\004\065\ufeda\001\002\000\004\130\025\001" +
    "\002\000\044\003\347\005\077\041\054\042\uffe2\062\073" +
    "\066\062\072\066\073\104\074\106\076\337\100\075\101" +
    "\110\102\071\110\101\111\105\112\111\131\uff4e\001\002" +
    "\000\004\131\317\001\002\000\050\003\ufeed\005\ufeed\041" +
    "\ufeed\042\ufeed\062\ufeed\066\ufeed\070\ufeed\072\ufeed\073\ufeed" +
    "\074\ufeed\075\ufeed\076\ufeed\100\ufeed\101\ufeed\102\ufeed\110" +
    "\ufeed\111\ufeed\112\ufeed\131\ufeed\001\002\000\020\033\166" +
    "\034\161\035\165\036\172\037\171\040\162\065\ufedc\001" +
    "\002\000\020\033\166\034\161\035\165\036\172\037\171" +
    "\040\162\065\ufedb\001\002\000\062\010\uffe1\016\uffe1\017" +
    "\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\025\uffe1\026\uffe1" +
    "\027\uffe1\030\uffe1\031\uffe1\033\uffe1\034\uffe1\035\uffe1\036" +
    "\uffe1\037\uffe1\040\uffe1\043\u0215\052\u0213\053\u0216\054\u0214" +
    "\056\200\064\265\001\002\000\044\003\175\005\121\043" +
    "\u021b\044\114\045\135\046\141\047\137\050\157\051\126" +
    "\052\u0219\053\u021c\054\u021a\056\200\064\147\100\075\110" +
    "\101\111\105\001\002\000\004\065\u0226\001\002\000\004" +
    "\130\025\001\002\000\044\003\347\005\077\041\054\042" +
    "\uffe2\062\073\066\062\072\066\073\104\074\106\076\337" +
    "\100\075\101\110\102\071\110\101\111\105\112\111\131" +
    "\uff4e\001\002\000\004\131\317\001\002\000\050\003\ufeee" +
    "\005\ufeee\041\ufeee\042\ufeee\062\ufeee\066\ufeee\070\ufeee\072" +
    "\ufeee\073\ufeee\074\ufeee\075\ufeee\076\ufeee\100\ufeee\101\ufeee" +
    "\102\ufeee\110\ufeee\111\ufeee\112\ufeee\131\ufeee\001\002\000" +
    "\032\003\175\005\121\044\114\045\135\046\141\047\137" +
    "\050\157\051\126\064\147\100\075\110\101\111\105\001" +
    "\002\000\032\003\u022c\005\121\044\114\045\135\046\141" +
    "\047\137\050\157\051\126\064\147\100\075\110\101\111" +
    "\105\001\002\000\036\003\175\005\121\010\ufee2\044\114" +
    "\045\135\046\141\047\137\050\157\051\126\056\200\064" +
    "\147\100\075\110\101\111\105\001\002\000\020\010\ufee9" +
    "\033\166\034\161\035\165\036\172\037\171\040\162\001" +
    "\002\000\020\010\ufee3\033\166\034\161\035\165\036\172" +
    "\037\171\040\162\001\002\000\054\010\uffe1\016\uffe1\017" +
    "\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\025\uffe1\026\uffe1" +
    "\027\uffe1\030\uffe1\031\uffe1\033\uffe1\034\uffe1\035\uffe1\036" +
    "\uffe1\037\uffe1\040\uffe1\043\u023e\056\200\064\265\001\002" +
    "\000\032\003\175\005\121\044\114\045\135\046\141\047" +
    "\137\050\157\051\126\064\147\100\075\110\101\111\105" +
    "\001\002\000\004\130\025\001\002\000\004\010\u0233\001" +
    "\002\000\006\003\u0234\005\u020b\001\002\000\012\043\u021b" +
    "\052\u0219\053\u021c\054\u021a\001\002\000\004\065\u0236\001" +
    "\002\000\004\130\025\001\002\000\044\003\347\005\077" +
    "\041\054\042\uffe2\062\073\066\062\072\066\073\104\074" +
    "\106\076\337\100\075\101\110\102\071\110\101\111\105" +
    "\112\111\131\uff4e\001\002\000\004\131\317\001\002\000" +
    "\050\003\ufeef\005\ufeef\041\ufeef\042\ufeef\062\ufeef\066\ufeef" +
    "\070\ufeef\072\ufeef\073\ufeef\074\ufeef\075\ufeef\076\ufeef\100" +
    "\ufeef\101\ufeef\102\ufeef\110\ufeef\111\ufeef\112\ufeef\131\ufeef" +
    "\001\002\000\044\003\347\005\077\041\054\042\uffe2\062" +
    "\073\066\062\072\066\073\104\074\106\076\337\100\075" +
    "\101\110\102\071\110\101\111\105\112\111\131\uff4e\001" +
    "\002\000\004\131\317\001\002\000\050\003\ufeec\005\ufeec" +
    "\041\ufeec\042\ufeec\062\ufeec\066\ufeec\070\ufeec\072\ufeec\073" +
    "\ufeec\074\ufeec\075\ufeec\076\ufeec\100\ufeec\101\ufeec\102\ufeec" +
    "\110\ufeec\111\ufeec\112\ufeec\131\ufeec\001\002\000\020\010" +
    "\ufee4\033\166\034\161\035\165\036\172\037\171\040\162" +
    "\001\002\000\032\003\175\005\121\044\114\045\135\046" +
    "\141\047\137\050\157\051\126\064\147\100\075\110\101" +
    "\111\105\001\002\000\020\010\ufee8\033\166\034\161\035" +
    "\165\036\172\037\171\040\162\001\002\000\006\003\u0241" +
    "\005\u0242\001\002\000\004\043\u0248\001\002\000\006\003" +
    "\u0243\043\u0244\001\002\000\032\003\175\005\121\044\114" +
    "\045\135\046\141\047\137\050\157\051\126\064\147\100" +
    "\075\110\101\111\105\001\002\000\032\003\u0245\005\121" +
    "\044\114\045\135\046\141\047\137\050\157\051\126\064" +
    "\147\100\075\110\101\111\105\001\002\000\036\003\175" +
    "\005\121\010\ufee5\044\114\045\135\046\141\047\137\050" +
    "\157\051\126\056\200\064\147\100\075\110\101\111\105" +
    "\001\002\000\020\010\ufeea\033\166\034\161\035\165\036" +
    "\172\037\171\040\162\001\002\000\020\010\ufee6\033\166" +
    "\034\161\035\165\036\172\037\171\040\162\001\002\000" +
    "\032\003\175\005\121\044\114\045\135\046\141\047\137" +
    "\050\157\051\126\064\147\100\075\110\101\111\105\001" +
    "\002\000\020\010\ufee7\033\166\034\161\035\165\036\172" +
    "\037\171\040\162\001\002\000\004\131\uff49\001\002\000" +
    "\004\131\uff4c\001\002\000\004\131\uff4a\001\002\000\004" +
    "\130\025\001\002\000\006\003\u024f\005\u0250\001\002\000" +
    "\004\065\u026f\001\002\000\004\065\u0251\001\002\000\004" +
    "\130\025\001\002\000\012\003\u0254\067\u0256\071\u0253\131" +
    "\ufef6\001\002\000\004\130\025\001\002\000\004\131\317" +
    "\001\002\000\004\131\317\001\002\000\032\003\u0257\005" +
    "\121\044\114\045\135\046\141\047\137\050\157\051\126" +
    "\064\147\100\075\110\101\111\105\001\002\000\040\003" +
    "\175\005\121\044\114\045\135\046\141\047\137\050\157" +
    "\051\126\056\200\064\147\100\075\110\101\111\105\130" +
    "\025\131\317\001\002\000\020\033\166\034\161\035\165" +
    "\036\172\037\171\040\162\130\025\001\002\000\046\003" +
    "\u025b\005\077\041\054\042\uffe2\062\073\066\062\070\uff4e" +
    "\072\066\073\104\074\106\076\337\100\075\101\110\102" +
    "\071\110\101\111\105\112\111\131\uff4e\001\002\000\006" +
    "\070\u025c\131\ufef1\001\002\000\034\003\355\011\030\012" +
    "\033\013\031\014\026\015\036\043\354\052\353\053\350" +
    "\054\351\056\200\070\u025c\131\ufef1\001\002\000\004\131" +
    "\ufef2\001\002\000\004\131\317\001\002\000\010\067\u0256" +
    "\071\u0253\131\ufef6\001\002\000\004\131\ufef4\001\002\000" +
    "\004\131\317\001\002\000\010\067\u0256\071\u0253\131\ufef6" +
    "\001\002\000\004\131\ufef8\001\002\000\046\003\347\005" +
    "\077\041\054\042\uffe2\062\073\066\062\070\uff4e\072\066" +
    "\073\104\074\106\076\337\100\075\101\110\102\071\110" +
    "\101\111\105\112\111\131\uff4e\001\002\000\010\067\u0256" +
    "\071\u0253\131\ufef6\001\002\000\004\131\ufef3\001\002\000" +
    "\006\070\u025c\131\ufef1\001\002\000\004\131\317\001\002" +
    "\000\010\067\u0256\071\u0253\131\ufef6\001\002\000\004\131" +
    "\ufef5\001\002\000\050\003\ufefc\005\ufefc\041\ufefc\042\ufefc" +
    "\062\ufefc\066\ufefc\070\ufefc\072\ufefc\073\ufefc\074\ufefc\075" +
    "\ufefc\076\ufefc\100\ufefc\101\ufefc\102\ufefc\110\ufefc\111\ufefc" +
    "\112\ufefc\131\ufefc\001\002\000\050\003\ufef9\005\ufef9\041" +
    "\ufef9\042\ufef9\062\ufef9\066\ufef9\070\ufef9\072\ufef9\073\ufef9" +
    "\074\ufef9\075\ufef9\076\ufef9\100\ufef9\101\ufef9\102\ufef9\110" +
    "\ufef9\111\ufef9\112\ufef9\131\ufef9\001\002\000\044\003\347" +
    "\005\077\041\054\042\uffe2\062\073\066\062\072\066\073" +
    "\104\074\106\076\337\100\075\101\110\102\071\110\101" +
    "\111\105\112\111\131\uff4e\001\002\000\004\131\317\001" +
    "\002\000\004\131\ufef7\001\002\000\004\130\025\001\002" +
    "\000\010\067\u0256\071\u0253\131\ufef6\001\002\000\004\131" +
    "\317\001\002\000\050\003\ufefb\005\ufefb\041\ufefb\042\ufefb" +
    "\062\ufefb\066\ufefb\070\ufefb\072\ufefb\073\ufefb\074\ufefb\075" +
    "\ufefb\076\ufefb\100\ufefb\101\ufefb\102\ufefb\110\ufefb\111\ufefb" +
    "\112\ufefb\131\ufefb\001\002\000\010\067\u0256\071\u0253\131" +
    "\ufef6\001\002\000\004\131\317\001\002\000\050\003\ufefa" +
    "\005\ufefa\041\ufefa\042\ufefa\062\ufefa\066\ufefa\070\ufefa\072" +
    "\ufefa\073\ufefa\074\ufefa\075\ufefa\076\ufefa\100\ufefa\101\ufefa" +
    "\102\ufefa\110\ufefa\111\ufefa\112\ufefa\131\ufefa\001\002\000" +
    "\004\131\uff43\001\002\000\004\131\uff4b\001\002\000\004" +
    "\131\uff3f\001\002\000\004\131\uff45\001\002\000\004\131" +
    "\uff40\001\002\000\004\131\uff48\001\002\000\042\003\347" +
    "\005\077\041\054\042\uffe2\062\073\066\062\072\066\073" +
    "\104\074\106\100\075\101\110\102\071\110\101\111\105" +
    "\112\111\131\uff3d\001\002\000\004\131\317\001\002\000" +
    "\034\002\uff0c\003\uff0c\004\uff0c\005\uff0c\011\uff0c\012\uff0c" +
    "\013\uff0c\014\uff0c\015\uff0c\041\uff0c\042\uff0c\113\uff0c\131" +
    "\uff0c\001\002\000\022\003\u0282\007\uff61\011\030\012\033" +
    "\013\031\014\026\015\036\065\uff61\001\002\000\006\007" +
    "\u028e\065\u028f\001\002\000\006\007\uff67\065\uff67\001\002" +
    "\000\012\003\uffc8\005\uffc8\007\u0287\065\u0288\001\002\000" +
    "\006\007\uff68\065\uff68\001\002\000\006\003\u0285\005\u0286" +
    "\001\002\000\006\007\uff64\065\uff64\001\002\000\006\007" +
    "\uff65\065\uff65\001\002\000\016\003\355\011\030\012\033" +
    "\013\031\014\026\015\036\001\002\000\004\130\025\001" +
    "\002\000\042\003\347\005\077\041\054\042\uffe2\062\073" +
    "\066\062\072\066\073\104\074\106\100\075\101\110\102" +
    "\071\110\101\111\105\112\111\131\uff3d\001\002\000\004" +
    "\131\317\001\002\000\034\002\uff6c\003\uff6c\004\uff6c\005" +
    "\uff6c\011\uff6c\012\uff6c\013\uff6c\014\uff6c\015\uff6c\041\uff6c" +
    "\042\uff6c\113\uff6c\131\uff6c\001\002\000\004\005\u028d\001" +
    "\002\000\006\007\uff62\065\uff62\001\002\000\016\003\u0296" +
    "\011\030\012\033\013\031\014\026\015\036\001\002\000" +
    "\004\130\025\001\002\000\042\003\u0291\005\077\041\054" +
    "\042\uffe2\062\073\066\062\072\066\073\104\074\106\100" +
    "\075\101\110\102\071\110\101\111\105\112\111\131\uff3d" +
    "\001\002\000\032\003\355\011\030\012\033\013\031\014" +
    "\026\015\036\043\354\052\353\053\350\054\351\056\200" +
    "\131\317\001\002\000\004\131\317\001\002\000\034\002" +
    "\uff6e\003\uff6e\004\uff6e\005\uff6e\011\uff6e\012\uff6e\013\uff6e" +
    "\014\uff6e\015\uff6e\041\uff6e\042\uff6e\113\uff6e\131\uff6e\001" +
    "\002\000\034\002\uff6b\003\uff6b\004\uff6b\005\uff6b\011\uff6b" +
    "\012\uff6b\013\uff6b\014\uff6b\015\uff6b\041\uff6b\042\uff6b\113" +
    "\uff6b\131\uff6b\001\002\000\004\005\u0297\001\002\000\010" +
    "\005\uffc8\007\uff63\065\uff63\001\002\000\006\007\uff66\065" +
    "\uff66\001\002\000\004\005\u02a7\001\002\000\004\064\u029a" +
    "\001\002\000\022\003\u029c\007\uff61\011\030\012\033\013" +
    "\031\014\026\015\036\065\uff61\001\002\000\006\007\u028e" +
    "\065\u02a1\001\002\000\012\003\uffc8\005\uffc8\007\u0287\065" +
    "\u029d\001\002\000\004\130\025\001\002\000\042\003\347" +
    "\005\077\041\054\042\uffe2\062\073\066\062\072\066\073" +
    "\104\074\106\100\075\101\110\102\071\110\101\111\105" +
    "\112\111\131\uff3d\001\002\000\004\131\317\001\002\000" +
    "\034\002\uff6a\003\uff6a\004\uff6a\005\uff6a\011\uff6a\012\uff6a" +
    "\013\uff6a\014\uff6a\015\uff6a\041\uff6a\042\uff6a\113\uff6a\131" +
    "\uff6a\001\002\000\004\130\025\001\002\000\042\003\u02a3" +
    "\005\077\041\054\042\uffe2\062\073\066\062\072\066\073" +
    "\104\074\106\100\075\101\110\102\071\110\101\111\105" +
    "\112\111\131\uff3d\001\002\000\032\003\355\011\030\012" +
    "\033\013\031\014\026\015\036\043\354\052\353\053\350" +
    "\054\351\056\200\131\317\001\002\000\004\131\317\001" +
    "\002\000\034\002\uff6d\003\uff6d\004\uff6d\005\uff6d\011\uff6d" +
    "\012\uff6d\013\uff6d\014\uff6d\015\uff6d\041\uff6d\042\uff6d\113" +
    "\uff6d\131\uff6d\001\002\000\034\002\uff69\003\uff69\004\uff69" +
    "\005\uff69\011\uff69\012\uff69\013\uff69\014\uff69\015\uff69\041" +
    "\uff69\042\uff69\113\uff69\131\uff69\001\002\000\004\064\u02a8" +
    "\001\002\000\022\003\u02aa\007\uff61\011\030\012\033\013" +
    "\031\014\026\015\036\065\uff61\001\002\000\006\007\u028e" +
    "\065\u02af\001\002\000\012\003\uffc8\005\uffc8\007\u0287\065" +
    "\u02ab\001\002\000\004\130\025\001\002\000\044\003\347" +
    "\005\077\041\054\042\uffe2\062\073\066\062\072\066\073" +
    "\104\074\106\076\337\100\075\101\110\102\071\110\101" +
    "\111\105\112\111\131\uff4e\001\002\000\004\131\317\001" +
    "\002\000\034\002\uff72\003\uff72\004\uff72\005\uff72\011\uff72" +
    "\012\uff72\013\uff72\014\uff72\015\uff72\041\uff72\042\uff72\113" +
    "\uff72\131\uff72\001\002\000\004\130\025\001\002\000\044" +
    "\003\u02b2\005\077\041\054\042\uffe2\062\073\066\062\072" +
    "\066\073\104\074\106\076\337\100\075\101\110\102\071" +
    "\110\101\111\105\112\111\131\uff4e\001\002\000\004\131" +
    "\317\001\002\000\032\003\355\011\030\012\033\013\031" +
    "\014\026\015\036\043\354\052\353\053\350\054\351\056" +
    "\200\131\317\001\002\000\034\002\uff6f\003\uff6f\004\uff6f" +
    "\005\uff6f\011\uff6f\012\uff6f\013\uff6f\014\uff6f\015\uff6f\041" +
    "\uff6f\042\uff6f\113\uff6f\131\uff6f\001\002\000\034\002\uff75" +
    "\003\uff75\004\uff75\005\uff75\011\uff75\012\uff75\013\uff75\014" +
    "\uff75\015\uff75\041\uff75\042\uff75\113\uff75\131\uff75\001\002" +
    "\000\010\002\ufff0\004\ufff0\131\ufff0\001\002\000\006\002" +
    "\ufff7\004\ufff7\001\002\000\006\002\ufffb\004\ufffb\001\002" +
    "\000\004\064\u02b9\001\002\000\022\003\u02bb\007\uff61\011" +
    "\030\012\033\013\031\014\026\015\036\065\uff61\001\002" +
    "\000\006\007\u028e\065\u02c0\001\002\000\012\003\uffc8\005" +
    "\uffc8\007\u0287\065\u02bc\001\002\000\004\130\025\001\002" +
    "\000\044\003\347\005\077\041\054\042\uffe2\062\073\066" +
    "\062\072\066\073\104\074\106\076\337\100\075\101\110" +
    "\102\071\110\101\111\105\112\111\131\uff4e\001\002\000" +
    "\004\131\317\001\002\000\034\002\uff73\003\uff73\004\uff73" +
    "\005\uff73\011\uff73\012\uff73\013\uff73\014\uff73\015\uff73\041" +
    "\uff73\042\uff73\113\uff73\131\uff73\001\002\000\004\130\025" +
    "\001\002\000\044\003\u02c3\005\077\041\054\042\uffe2\062" +
    "\073\066\062\072\066\073\104\074\106\076\337\100\075" +
    "\101\110\102\071\110\101\111\105\112\111\131\uff4e\001" +
    "\002\000\004\131\317\001\002\000\032\003\355\011\030" +
    "\012\033\013\031\014\026\015\036\043\354\052\353\053" +
    "\350\054\351\056\200\131\317\001\002\000\034\002\uff70" +
    "\003\uff70\004\uff70\005\uff70\011\uff70\012\uff70\013\uff70\014" +
    "\uff70\015\uff70\041\uff70\042\uff70\113\uff70\131\uff70\001\002" +
    "\000\034\002\uff76\003\uff76\004\uff76\005\uff76\011\uff76\012" +
    "\uff76\013\uff76\014\uff76\015\uff76\041\uff76\042\uff76\113\uff76" +
    "\131\uff76\001\002\000\010\002\uffee\004\uffee\131\uffee\001" +
    "\002\000\004\130\025\001\002\000\022\003\u02ca\007\uff61" +
    "\011\030\012\033\013\031\014\026\015\036\065\uff61\001" +
    "\002\000\006\007\u028e\065\u02cb\001\002\000\010\003\uffc8" +
    "\005\uffc8\007\u0287\001\002\000\004\130\025\001\002\000" +
    "\044\003\347\005\077\041\054\042\uffe2\062\073\066\062" +
    "\072\066\073\104\074\106\076\337\100\075\101\110\102" +
    "\071\110\101\111\105\112\111\131\uff4e\001\002\000\004" +
    "\131\317\001\002\000\034\002\uff74\003\uff74\004\uff74\005" +
    "\uff74\011\uff74\012\uff74\013\uff74\014\uff74\015\uff74\041\uff74" +
    "\042\uff74\113\uff74\131\uff74\001\002\000\044\003\347\005" +
    "\077\041\054\042\uffe2\062\073\066\062\072\066\073\104" +
    "\074\106\076\337\100\075\101\110\102\071\110\101\111" +
    "\105\112\111\131\uff4e\001\002\000\004\131\317\001\002" +
    "\000\034\002\uff71\003\uff71\004\uff71\005\uff71\011\uff71\012" +
    "\uff71\013\uff71\014\uff71\015\uff71\041\uff71\042\uff71\113\uff71" +
    "\131\uff71\001\002\000\016\003\355\011\030\012\033\013" +
    "\031\014\026\015\036\001\002\000\006\005\u02d4\055\u02d5" +
    "\001\002\000\074\002\uffe7\003\uffe7\004\uffe7\005\uffe7\007" +
    "\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\041\uffe7" +
    "\042\uffe7\043\u02dc\062\uffe7\066\uffe7\070\uffe7\072\uffe7\073" +
    "\uffe7\074\uffe7\075\uffe7\076\uffe7\100\uffe7\101\uffe7\102\uffe7" +
    "\110\uffe7\111\uffe7\112\uffe7\113\uffe7\131\uffe7\001\002\000" +
    "\004\005\u02d6\001\002\000\074\002\uff91\003\uff91\004\uff91" +
    "\005\uff91\007\uff91\011\uff91\012\uff91\013\uff91\014\uff91\015" +
    "\uff91\041\uff91\042\uff91\056\200\062\uff91\066\uff91\070\uff91" +
    "\072\uff91\073\uff91\074\uff91\075\uff91\076\uff91\100\uff91\101" +
    "\uff91\102\uff91\110\uff91\111\uff91\112\uff91\113\uff91\131\uff91" +
    "\001\002\000\076\002\uff90\003\uff90\004\uff90\005\uff90\007" +
    "\uff90\011\uff90\012\uff90\013\uff90\014\uff90\015\uff90\041\uff90" +
    "\042\uff90\043\u02d8\056\206\062\uff90\066\uff90\070\uff90\072" +
    "\uff90\073\uff90\074\uff90\075\uff90\076\uff90\100\uff90\101\uff90" +
    "\102\uff90\110\uff90\111\uff90\112\uff90\113\uff90\131\uff90\001" +
    "\002\000\004\060\u02d9\001\002\000\066\003\370\005\121" +
    "\016\134\017\117\020\132\021\136\022\153\023\156\024" +
    "\143\025\123\026\124\027\130\030\125\031\116\032\122" +
    "\044\114\045\135\046\141\047\137\050\157\051\126\060" +
    "\367\064\147\100\075\110\101\111\105\001\002\000\004" +
    "\061\u02db\001\002\000\072\002\uff92\003\uff92\004\uff92\005" +
    "\uff92\007\uff92\011\uff92\012\uff92\013\uff92\014\uff92\015\uff92" +
    "\041\uff92\042\uff92\062\uff92\066\uff92\070\uff92\072\uff92\073" +
    "\uff92\074\uff92\075\uff92\076\uff92\100\uff92\101\uff92\102\uff92" +
    "\110\uff92\111\uff92\112\uff92\113\uff92\131\uff92\001\002\000" +
    "\064\003\237\005\121\016\134\017\117\020\132\021\136" +
    "\022\153\023\156\024\143\025\123\026\124\027\130\030" +
    "\125\031\116\032\122\044\114\045\135\046\141\047\137" +
    "\050\157\051\126\064\147\100\075\110\101\111\105\001" +
    "\002\000\104\002\uffe8\003\uffe8\004\uffe8\005\uffe8\007\uffe8" +
    "\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\025\233\026" +
    "\232\027\235\030\234\031\236\041\uffe8\042\uffe8\062\uffe8" +
    "\066\uffe8\070\uffe8\072\uffe8\073\uffe8\074\uffe8\075\uffe8\076" +
    "\uffe8\100\uffe8\101\uffe8\102\uffe8\110\uffe8\111\uffe8\112\uffe8" +
    "\113\uffe8\131\uffe8\001\002\000\010\002\uffed\004\uffed\131" +
    "\uffed\001\002\000\010\002\uffef\004\uffef\131\uffef\001\002" +
    "\000\010\002\uffec\004\uffec\131\uffec\001\002\000\006\007" +
    "\ufff2\130\ufff2\001\002\000\004\005\u02e3\001\002\000\006" +
    "\007\ufff3\130\ufff3\001\002\000\004\130\025\001\002\000" +
    "\034\002\uffeb\003\037\004\uffeb\005\045\011\030\012\033" +
    "\013\031\014\026\015\036\041\044\042\uffe2\113\046\131" +
    "\uffeb\001\002\000\010\002\ufffa\004\ufffa\131\u02b7\001\002" +
    "\000\006\002\ufff6\004\ufff6\001\002\000\004\002\ufff9\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02e6\000\006\002\004\003\003\001\001\000\006\004" +
    "\013\005\012\001\001\000\002\001\001\000\004\003\006" +
    "\001\001\000\002\001\001\000\004\003\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\u02e7\005\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\017\007\u02e3\001\001\000\006\006\017\007\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\063\023\001\001\000\022\010\041\011\042\012\034" +
    "\016\040\021\031\035\037\036\033\045\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\010\u02df\011\042" +
    "\012\034\016\040\021\031\035\037\036\033\045\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\010\u02de" +
    "\011\042\012\034\016\040\021\031\035\037\036\033\045" +
    "\026\001\001\000\002\001\001\000\022\010\u02dd\011\042" +
    "\012\034\016\040\021\031\035\037\036\033\045\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\355" +
    "\001\001\000\022\010\u02c5\011\042\012\034\016\040\021" +
    "\031\035\037\036\033\045\026\001\001\000\002\001\001" +
    "\000\004\065\u02b5\001\001\000\022\010\u02b4\011\042\012" +
    "\034\016\040\021\031\035\037\036\033\045\026\001\001" +
    "\000\004\016\u0297\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\063\u027b\001\001\000\002\001\001\000\004" +
    "\063\051\001\001\000\046\011\067\012\034\015\063\021" +
    "\057\025\052\027\075\031\062\032\077\033\055\034\071" +
    "\037\060\040\101\041\066\042\054\043\056\044\102\046" +
    "\064\067\106\001\001\000\046\011\067\012\034\015\063" +
    "\021\057\025\052\027\075\031\062\032\077\033\055\034" +
    "\071\037\060\040\101\041\066\042\054\043\056\044\102" +
    "\046\064\067\u027a\001\001\000\002\001\001\000\046\011" +
    "\067\012\034\015\063\021\057\025\052\027\075\031\062" +
    "\032\077\033\055\034\071\037\060\040\101\041\066\042" +
    "\054\043\056\044\102\046\064\067\u0279\001\001\000\046" +
    "\011\067\012\034\015\063\021\057\025\052\027\075\031" +
    "\062\032\077\033\055\034\071\037\060\040\101\041\066" +
    "\042\054\043\056\044\102\046\064\067\u0278\001\001\000" +
    "\046\011\067\012\034\015\063\021\057\025\052\027\075" +
    "\031\062\032\077\033\055\034\071\037\060\040\101\041" +
    "\066\042\054\043\056\044\102\046\064\067\u0277\001\001" +
    "\000\046\011\067\012\034\015\063\021\057\025\052\027" +
    "\075\031\062\032\077\033\055\034\071\037\060\040\101" +
    "\041\066\042\054\043\056\044\102\046\064\067\u0276\001" +
    "\001\000\046\011\067\012\034\015\063\021\057\025\052" +
    "\027\075\031\062\032\077\033\055\034\071\037\060\040" +
    "\101\041\066\042\054\043\056\044\102\046\064\067\u0275" +
    "\001\001\000\002\001\001\000\046\011\067\012\034\015" +
    "\063\021\057\025\052\027\075\031\062\032\077\033\055" +
    "\034\071\037\060\040\101\041\066\042\054\043\056\044" +
    "\102\046\064\067\u024b\001\001\000\046\011\067\012\034" +
    "\015\063\021\057\025\052\027\075\031\062\032\077\033" +
    "\055\034\071\037\060\040\101\041\066\042\054\043\056" +
    "\044\102\046\064\067\u024a\001\001\000\046\011\067\012" +
    "\034\015\063\021\057\025\052\027\075\031\062\032\077" +
    "\033\055\034\071\037\060\040\101\041\066\042\054\043" +
    "\056\044\102\046\064\067\u0249\001\001\000\002\001\001" +
    "\000\046\011\067\012\034\015\063\021\057\025\052\027" +
    "\075\031\062\032\077\033\055\034\071\037\060\040\101" +
    "\041\066\042\054\043\056\044\102\046\064\067\u01fe\001" +
    "\001\000\046\011\067\012\034\015\063\021\057\025\052" +
    "\027\075\031\062\032\077\033\055\034\071\037\060\040" +
    "\101\041\066\042\054\043\056\044\102\046\064\067\u01fd" +
    "\001\001\000\002\001\001\000\046\011\067\012\034\015" +
    "\063\021\057\025\052\027\075\031\062\032\077\033\055" +
    "\034\071\037\060\040\101\041\066\042\054\043\056\044" +
    "\102\046\064\067\u01ea\001\001\000\002\001\001\000\010" +
    "\016\355\022\351\064\u01ac\001\001\000\002\001\001\000" +
    "\046\011\067\012\034\015\063\021\057\025\052\027\075" +
    "\031\062\032\077\033\055\034\071\037\060\040\101\041" +
    "\066\042\054\043\056\044\102\046\064\067\u0183\001\001" +
    "\000\004\022\u0178\001\001\000\046\011\067\012\034\015" +
    "\063\021\057\025\052\027\075\031\062\032\077\033\055" +
    "\034\071\037\060\040\101\041\066\042\054\043\056\044" +
    "\102\046\064\067\u0173\001\001\000\002\001\001\000\046" +
    "\011\067\012\034\015\063\021\057\025\052\027\075\031" +
    "\062\032\077\033\055\034\071\037\060\040\101\041\066" +
    "\042\054\043\056\044\102\046\064\067\u016b\001\001\000" +
    "\046\011\067\012\034\015\063\021\057\025\052\027\075" +
    "\031\062\032\077\033\055\034\071\037\060\040\101\041" +
    "\066\042\054\043\056\044\102\046\064\067\u016a\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\063\321\001" +
    "\001\000\004\064\317\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\014\143\017\145\020" +
    "\147\037\126\042\151\043\130\046\114\047\150\060\141" +
    "\062\132\076\153\077\117\100\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\263\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\014\143\020\200\022\176\037\126\042\151" +
    "\043\130\046\114\047\150\076\153\077\241\100\240\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\014\143" +
    "\020\246\037\126\042\151\043\130\046\114\047\150\076" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\014\143\020\226\037\126\042\151\043" +
    "\130\046\114\047\150\076\153\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\014\143\020\224\037" +
    "\126\042\151\043\130\046\114\047\150\076\153\001\001" +
    "\000\022\014\143\020\223\037\126\042\151\043\130\046" +
    "\114\047\150\076\153\001\001\000\022\014\143\020\222" +
    "\037\126\042\151\043\130\046\114\047\150\076\153\001" +
    "\001\000\022\014\143\020\221\037\126\042\151\043\130" +
    "\046\114\047\150\076\153\001\001\000\022\014\143\020" +
    "\220\037\126\042\151\043\130\046\114\047\150\076\153" +
    "\001\001\000\022\014\143\020\217\037\126\042\151\043" +
    "\130\046\114\047\150\076\153\001\001\000\022\014\143" +
    "\020\216\037\126\042\151\043\130\046\114\047\150\076" +
    "\153\001\001\000\022\014\143\020\215\037\126\042\151" +
    "\043\130\046\114\047\150\076\153\001\001\000\022\014" +
    "\143\020\214\037\126\042\151\043\130\046\114\047\150" +
    "\076\153\001\001\000\022\014\143\020\213\037\126\042" +
    "\151\043\130\046\114\047\150\076\153\001\001\000\022" +
    "\014\143\020\212\037\126\042\151\043\130\046\114\047" +
    "\150\076\153\001\001\000\022\014\143\020\175\037\126" +
    "\042\151\043\130\046\114\047\150\076\153\001\001\000" +
    "\024\014\143\020\200\022\176\037\126\042\151\043\130" +
    "\046\114\047\150\076\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\014\143\020\202\037\126\042\151" +
    "\043\130\046\114\047\150\076\153\001\001\000\002\001" +
    "\001\000\024\014\143\020\200\022\176\037\126\042\151" +
    "\043\130\046\114\047\150\076\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\014\143" +
    "\020\207\037\126\042\151\043\130\046\114\047\150\076" +
    "\153\001\001\000\024\014\143\020\200\022\176\037\126" +
    "\042\151\043\130\046\114\047\150\076\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\014\143\020\200\022\176\037\126" +
    "\042\151\043\130\046\114\047\150\076\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\014\143\017\245\020\147\037\126\042\151\043\130\046" +
    "\114\047\150\060\141\076\153\077\117\100\154\001\001" +
    "\000\032\014\143\017\244\020\147\037\126\042\151\043" +
    "\130\046\114\047\150\060\141\076\153\077\117\100\154" +
    "\001\001\000\032\014\143\017\243\020\147\037\126\042" +
    "\151\043\130\046\114\047\150\060\141\076\153\077\117" +
    "\100\154\001\001\000\032\014\143\017\242\020\147\037" +
    "\126\042\151\043\130\046\114\047\150\060\141\076\153" +
    "\077\117\100\154\001\001\000\032\014\143\017\237\020" +
    "\147\037\126\042\151\043\130\046\114\047\150\060\141" +
    "\076\153\077\117\100\154\001\001\000\030\014\143\020" +
    "\200\022\176\037\126\042\151\043\130\046\114\047\150" +
    "\076\153\077\241\100\240\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\014\143\017\251\020\147" +
    "\037\126\042\151\043\130\046\114\047\150\060\141\076" +
    "\153\077\117\100\154\001\001\000\002\001\001\000\032" +
    "\014\143\017\256\020\147\037\126\042\151\043\130\046" +
    "\114\047\150\060\141\076\153\077\117\100\154\001\001" +
    "\000\032\014\143\017\255\020\147\037\126\042\151\043" +
    "\130\046\114\047\150\060\141\076\153\077\117\100\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\014\143\017\261\020\147" +
    "\037\126\042\151\043\130\046\114\047\150\060\141\076" +
    "\153\077\117\100\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\014\143\020\270\037" +
    "\126\042\151\043\130\046\114\047\150\050\266\051\265" +
    "\076\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\014\143\020\200\022\176\037\126\042\151\043\130" +
    "\046\114\047\150\076\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\014\143\020\274\037\126\042\151" +
    "\043\130\046\114\047\150\076\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\014\143\020\276\037\126" +
    "\042\151\043\130\046\114\047\150\076\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\014\143\020\305\037" +
    "\126\042\151\043\130\046\114\047\150\076\153\001\001" +
    "\000\024\014\143\020\200\022\176\037\126\042\151\043" +
    "\130\046\114\047\150\076\153\001\001\000\002\001\001" +
    "\000\022\014\143\020\312\037\126\042\151\043\130\046" +
    "\114\047\150\076\153\001\001\000\022\014\143\020\310" +
    "\037\126\042\151\043\130\046\114\047\150\076\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\064\u014b\001\001" +
    "\000\046\011\335\012\034\015\332\021\327\025\322\027" +
    "\341\031\331\032\342\033\325\034\337\037\330\040\343" +
    "\041\334\042\323\043\326\044\344\046\333\066\324\001" +
    "\001\000\046\011\335\012\034\015\332\021\327\025\322" +
    "\027\341\031\331\032\342\033\325\034\337\037\330\040" +
    "\343\041\334\042\323\043\326\044\344\046\333\066\u0149" +
    "\001\001\000\046\011\335\012\034\015\332\021\327\025" +
    "\322\027\341\031\331\032\342\033\325\034\337\037\330" +
    "\040\343\041\334\042\323\043\326\044\344\046\333\066" +
    "\u0148\001\001\000\004\071\u013c\001\001\000\046\011\335" +
    "\012\034\015\332\021\327\025\322\027\341\031\331\032" +
    "\342\033\325\034\337\037\330\040\343\041\334\042\323" +
    "\043\326\044\344\046\333\066\u013b\001\001\000\046\011" +
    "\335\012\034\015\332\021\327\025\322\027\341\031\331" +
    "\032\342\033\325\034\337\037\330\040\343\041\334\042" +
    "\323\043\326\044\344\046\333\066\u013a\001\001\000\046" +
    "\011\335\012\034\015\332\021\327\025\322\027\341\031" +
    "\331\032\342\033\325\034\337\037\330\040\343\041\334" +
    "\042\323\043\326\044\344\046\333\066\u0132\001\001\000" +
    "\046\011\335\012\034\015\332\021\327\025\322\027\341" +
    "\031\331\032\342\033\325\034\337\037\330\040\343\041" +
    "\334\042\323\043\326\044\344\046\333\066\u0131\001\001" +
    "\000\046\011\335\012\034\015\332\021\327\025\322\027" +
    "\341\031\331\032\342\033\325\034\337\037\330\040\343" +
    "\041\334\042\323\043\326\044\344\046\333\066\u0130\001" +
    "\001\000\046\011\335\012\034\015\332\021\327\025\322" +
    "\027\341\031\331\032\342\033\325\034\337\037\330\040" +
    "\343\041\334\042\323\043\326\044\344\046\333\066\u012f" +
    "\001\001\000\046\011\335\012\034\015\332\021\327\025" +
    "\322\027\341\031\331\032\342\033\325\034\337\037\330" +
    "\040\343\041\334\042\323\043\326\044\344\046\333\066" +
    "\u012e\001\001\000\046\011\335\012\034\015\332\021\327" +
    "\025\322\027\341\031\331\032\342\033\325\034\337\037" +
    "\330\040\343\041\334\042\323\043\326\044\344\046\333" +
    "\066\u012d\001\001\000\046\011\335\012\034\015\332\021" +
    "\327\025\322\027\341\031\331\032\342\033\325\034\337" +
    "\037\330\040\343\041\334\042\323\043\326\044\344\046" +
    "\333\066\u0126\001\001\000\032\014\143\017\u0124\020\147" +
    "\037\126\042\151\043\130\046\114\047\150\060\141\076" +
    "\153\077\117\100\154\001\001\000\046\011\335\012\034" +
    "\015\332\021\327\025\322\027\341\031\331\032\342\033" +
    "\325\034\337\037\330\040\343\041\334\042\323\043\326" +
    "\044\344\046\333\066\u0122\001\001\000\010\016\355\022" +
    "\351\071\u011c\001\001\000\046\011\335\012\034\015\332" +
    "\021\327\025\322\027\341\031\331\032\342\033\325\034" +
    "\337\037\330\040\343\041\334\042\323\043\326\044\344" +
    "\046\333\066\u011a\001\001\000\046\011\335\012\034\015" +
    "\332\021\327\025\322\027\341\031\331\032\342\033\325" +
    "\034\337\037\330\040\343\041\334\042\323\043\326\044" +
    "\344\046\333\066\u0119\001\001\000\046\011\335\012\034" +
    "\015\332\021\327\025\322\027\341\031\331\032\342\033" +
    "\325\034\337\037\330\040\343\041\334\042\323\043\326" +
    "\044\344\046\333\066\u0118\001\001\000\046\011\335\012" +
    "\034\015\332\021\327\025\322\027\341\031\331\032\342" +
    "\033\325\034\337\037\330\040\343\041\334\042\323\043" +
    "\326\044\344\046\333\066\345\001\001\000\002\001\001" +
    "\000\006\016\355\022\351\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\014\143\017\u0115" +
    "\020\147\037\126\042\151\043\130\046\114\047\150\060" +
    "\141\076\153\077\117\100\154\001\001\000\032\014\143" +
    "\017\u0114\020\147\037\126\042\151\043\130\046\114\047" +
    "\150\060\141\076\153\077\117\100\154\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\361\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\014\143\017\370\020\147\023\365\024" +
    "\364\037\126\042\151\043\130\046\114\047\150\060\141" +
    "\061\371\075\372\076\153\077\117\100\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\014\143\017\370" +
    "\020\147\024\u010d\037\126\042\151\043\130\046\114\047" +
    "\150\060\141\061\371\075\u010e\076\153\077\117\100\154" +
    "\001\001\000\030\014\143\020\200\022\176\037\126\042" +
    "\151\043\130\046\114\047\150\076\153\077\241\100\240" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\014\143\017\370\020\147" +
    "\024\375\037\126\042\151\043\130\046\114\047\150\060" +
    "\141\061\371\075\376\076\153\077\117\100\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\014\143\017\370\020\147\037\126\042\151\043\130" +
    "\046\114\047\150\060\141\061\u0104\076\153\077\117\100" +
    "\154\001\001\000\034\014\143\017\370\020\147\037\126" +
    "\042\151\043\130\046\114\047\150\060\141\061\u0103\076" +
    "\153\077\117\100\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\014" +
    "\143\017\370\020\147\024\u0109\037\126\042\151\043\130" +
    "\046\114\047\150\060\141\061\371\075\u010a\076\153\077" +
    "\117\100\154\001\001\000\034\014\143\017\370\020\147" +
    "\037\126\042\151\043\130\046\114\047\150\060\141\061" +
    "\u0108\076\153\077\117\100\154\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\014" +
    "\143\017\u0113\020\147\037\126\042\151\043\130\046\114" +
    "\047\150\060\141\076\153\077\117\100\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\014\143\017\370\020\147\037\126\042\151\043\130\046" +
    "\114\047\150\060\141\061\u0117\076\153\077\117\100\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\064\u011d" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\014" +
    "\143\017\u0120\020\147\037\126\042\151\043\130\046\114" +
    "\047\150\060\141\076\153\077\117\100\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\014\143\020\200\022\176\037\126\042\151\043\130\046" +
    "\114\047\150\076\153\077\241\100\240\001\001\000\046" +
    "\011\335\012\034\015\332\021\327\025\322\027\341\031" +
    "\331\032\342\033\325\034\337\037\330\040\343\041\334" +
    "\042\323\043\326\044\344\046\333\066\u0125\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\014\143\017\u012c\020\147\037\126\042\151\043\130\046" +
    "\114\047\150\060\141\076\153\077\117\100\154\001\001" +
    "\000\002\001\001\000\032\014\143\017\u012b\020\147\037" +
    "\126\042\151\043\130\046\114\047\150\060\141\076\153" +
    "\077\117\100\154\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\u0135\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\014\143\017\370\020\147\023" +
    "\u0138\024\364\037\126\042\151\043\130\046\114\047\150" +
    "\060\141\061\371\075\372\076\153\077\117\100\154\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\064\u013d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\014\143" +
    "\017\u0142\020\147\037\126\042\151\043\130\046\114\047" +
    "\150\060\141\076\153\077\117\100\154\001\001\000\030" +
    "\014\143\020\200\022\176\037\126\042\151\043\130\046" +
    "\114\047\150\076\153\077\241\100\240\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\014" +
    "\143\017\u0146\020\147\037\126\042\151\043\130\046\114" +
    "\047\150\060\141\076\153\077\117\100\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\014\143\017\u014e\020\147\037\126\042\151" +
    "\043\130\046\114\047\150\060\141\076\153\077\117\100" +
    "\154\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\014\143\020\u0153\037\126\042\151\043" +
    "\130\046\114\047\150\076\153\001\001\000\024\014\143" +
    "\020\200\022\176\037\126\042\151\043\130\046\114\047" +
    "\150\076\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\064\u0166\001" +
    "\001\000\032\014\143\017\u015a\020\147\037\126\042\151" +
    "\043\130\046\114\047\150\060\141\076\153\077\117\100" +
    "\154\001\001\000\030\014\143\020\200\022\176\037\126" +
    "\042\151\043\130\046\114\047\150\076\153\077\241\100" +
    "\240\001\001\000\002\001\001\000\004\063\u015c\001\001" +
    "\000\046\011\335\012\034\015\332\021\327\025\322\027" +
    "\341\031\331\032\342\033\325\034\337\037\330\040\343" +
    "\041\334\042\323\043\326\044\344\046\333\066\u015d\001" +
    "\001\000\004\064\u0160\001\001\000\010\016\355\022\351" +
    "\064\u015f\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\063\u0162\001\001\000\046\011\335\012\034\015\332" +
    "\021\327\025\322\027\341\031\331\032\342\033\325\034" +
    "\337\037\330\040\343\041\334\042\323\043\326\044\344" +
    "\046\333\066\u0163\001\001\000\004\064\u0164\001\001\000" +
    "\002\001\001\000\004\063\u0167\001\001\000\002\001\001" +
    "\000\046\011\335\012\034\015\332\021\327\025\322\027" +
    "\341\031\331\032\342\033\325\034\337\037\330\040\343" +
    "\041\334\042\323\043\326\044\344\046\333\066\u0168\001" +
    "\001\000\004\064\u0169\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\014\143\017\u0182\020\147\037\126\042\151\043\130" +
    "\046\114\047\150\060\141\076\153\077\117\100\154\001" +
    "\001\000\002\001\001\000\032\014\143\017\u0180\020\147" +
    "\037\126\042\151\043\130\046\114\047\150\060\141\076" +
    "\153\077\117\100\154\001\001\000\032\014\143\017\u017e" +
    "\020\147\037\126\042\151\043\130\046\114\047\150\060" +
    "\141\076\153\077\117\100\154\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\014\143\017\370\020\147\037" +
    "\126\042\151\043\130\046\114\047\150\060\141\061\u017d" +
    "\076\153\077\117\100\154\001\001\000\034\014\143\017" +
    "\370\020\147\037\126\042\151\043\130\046\114\047\150" +
    "\060\141\061\u017c\076\153\077\117\100\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\014\143\017\370\020\147\037\126\042\151\043\130\046" +
    "\114\047\150\060\141\061\u0181\076\153\077\117\100\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\056\u0191" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\014\143\020\u019c\037" +
    "\126\042\151\043\130\046\114\047\150\076\153\001\001" +
    "\000\022\014\143\020\u0196\037\126\042\151\043\130\046" +
    "\114\047\150\076\153\001\001\000\002\001\001\000\022" +
    "\014\143\020\u0198\037\126\042\151\043\130\046\114\047" +
    "\150\076\153\001\001\000\002\001\001\000\022\014\143" +
    "\020\u019a\037\126\042\151\043\130\046\114\047\150\076" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\014\143\020\u01a3\037\126\042\151\043" +
    "\130\046\114\047\150\076\153\001\001\000\022\014\143" +
    "\020\u019f\037\126\042\151\043\130\046\114\047\150\076" +
    "\153\001\001\000\002\001\001\000\022\014\143\020\u01a1" +
    "\037\126\042\151\043\130\046\114\047\150\076\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\014\143\020\u01a8\037\126\042\151\043\130\046" +
    "\114\047\150\076\153\001\001\000\022\014\143\020\u01a6" +
    "\037\126\042\151\043\130\046\114\047\150\076\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\063\u01e0\064\u01e1\001\001\000\032" +
    "\014\143\017\u01b0\020\147\037\126\042\151\043\130\046" +
    "\114\047\150\060\141\076\153\077\117\100\154\001\001" +
    "\000\030\014\143\020\200\022\176\037\126\042\151\043" +
    "\130\046\114\047\150\076\153\077\241\100\240\001\001" +
    "\000\002\001\001\000\004\063\u01b2\001\001\000\046\011" +
    "\335\012\034\015\332\021\327\025\322\027\341\031\331" +
    "\032\342\033\325\034\337\037\330\040\343\041\334\042" +
    "\323\043\326\044\344\046\333\066\u01b3\001\001\000\004" +
    "\064\u01d8\001\001\000\010\016\355\022\351\064\u01b5\001" +
    "\001\000\004\026\u01b6\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\063\u01b9\001\001\000\046\011\335\012" +
    "\034\015\332\021\327\025\322\027\341\031\331\032\342" +
    "\033\325\034\337\037\330\040\343\041\334\042\323\043" +
    "\326\044\344\046\333\066\u01ba\001\001\000\004\064\u01bb" +
    "\001\001\000\002\001\001\000\006\063\u01ce\064\u01cf\001" +
    "\001\000\032\014\143\017\u01bf\020\147\037\126\042\151" +
    "\043\130\046\114\047\150\060\141\076\153\077\117\100" +
    "\154\001\001\000\030\014\143\020\200\022\176\037\126" +
    "\042\151\043\130\046\114\047\150\076\153\077\241\100" +
    "\240\001\001\000\002\001\001\000\004\063\u01c1\001\001" +
    "\000\046\011\335\012\034\015\332\021\327\025\322\027" +
    "\341\031\331\032\342\033\325\034\337\037\330\040\343" +
    "\041\334\042\323\043\326\044\344\046\333\066\u01c2\001" +
    "\001\000\004\064\u01c6\001\001\000\010\016\355\022\351" +
    "\064\u01c4\001\001\000\004\026\u01c5\001\001\000\002\001" +
    "\001\000\004\026\u01c7\001\001\000\002\001\001\000\004" +
    "\063\u01c9\001\001\000\046\011\335\012\034\015\332\021" +
    "\327\025\322\027\341\031\331\032\342\033\325\034\337" +
    "\037\330\040\343\041\334\042\323\043\326\044\344\046" +
    "\333\066\u01ca\001\001\000\004\064\u01cb\001\001\000\004" +
    "\026\u01cc\001\001\000\002\001\001\000\004\063\u01d4\001" +
    "\001\000\046\011\335\012\034\015\332\021\327\025\322" +
    "\027\341\031\331\032\342\033\325\034\337\037\330\040" +
    "\343\041\334\042\323\043\326\044\344\046\333\066\u01d1" +
    "\001\001\000\004\026\u01d0\001\001\000\002\001\001\000" +
    "\004\064\u01d2\001\001\000\004\026\u01d3\001\001\000\002" +
    "\001\001\000\046\011\335\012\034\015\332\021\327\025" +
    "\322\027\341\031\331\032\342\033\325\034\337\037\330" +
    "\040\343\041\334\042\323\043\326\044\344\046\333\066" +
    "\u01d5\001\001\000\004\064\u01d6\001\001\000\004\026\u01d7" +
    "\001\001\000\002\001\001\000\004\026\u01d9\001\001\000" +
    "\002\001\001\000\004\063\u01db\001\001\000\046\011\335" +
    "\012\034\015\332\021\327\025\322\027\341\031\331\032" +
    "\342\033\325\034\337\037\330\040\343\041\334\042\323" +
    "\043\326\044\344\046\333\066\u01dc\001\001\000\004\064" +
    "\u01dd\001\001\000\004\026\u01de\001\001\000\002\001\001" +
    "\000\004\063\u01e6\001\001\000\046\011\335\012\034\015" +
    "\332\021\327\025\322\027\341\031\331\032\342\033\325" +
    "\034\337\037\330\040\343\041\334\042\323\043\326\044" +
    "\344\046\333\066\u01e3\001\001\000\004\026\u01e2\001\001" +
    "\000\002\001\001\000\004\064\u01e4\001\001\000\004\026" +
    "\u01e5\001\001\000\002\001\001\000\046\011\335\012\034" +
    "\015\332\021\327\025\322\027\341\031\331\032\342\033" +
    "\325\034\337\037\330\040\343\041\334\042\323\043\326" +
    "\044\344\046\333\066\u01e7\001\001\000\004\064\u01e8\001" +
    "\001\000\004\026\u01e9\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\057\u01f9\001\001\000\004" +
    "\057\u01f5\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\052\u0203\001" +
    "\001\000\004\016\u023f\001\001\000\034\014\143\017\u0206" +
    "\020\147\037\126\042\151\043\130\046\114\047\150\053" +
    "\u0231\060\141\076\153\077\117\100\154\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\014\143\017\u0206\020" +
    "\147\037\126\042\151\043\130\046\114\047\150\053\u0207" +
    "\060\141\076\153\077\117\100\154\001\001\000\032\014" +
    "\143\020\200\022\176\037\126\042\151\043\130\046\114" +
    "\047\150\054\u0224\076\153\077\241\100\240\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\054\u020b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\063\u020d\001\001\000\046\011\335\012\034\015\332" +
    "\021\327\025\322\027\341\031\331\032\342\033\325\034" +
    "\337\037\330\040\343\041\334\042\323\043\326\044\344" +
    "\046\333\066\u020e\001\001\000\004\064\u0211\001\001\000" +
    "\010\016\355\022\351\064\u0210\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\014\143\020\u0217\037\126\042" +
    "\151\043\130\046\114\047\150\076\153\001\001\000\002" +
    "\001\001\000\022\014\143\020\u0216\037\126\042\151\043" +
    "\130\046\114\047\150\076\153\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\014\143\020" +
    "\u0221\037\126\042\151\043\130\046\114\047\150\076\153" +
    "\001\001\000\002\001\001\000\022\014\143\020\u0220\037" +
    "\126\042\151\043\130\046\114\047\150\076\153\001\001" +
    "\000\002\001\001\000\004\063\u021d\001\001\000\046\011" +
    "\335\012\034\015\332\021\327\025\322\027\341\031\331" +
    "\032\342\033\325\034\337\037\330\040\343\041\334\042" +
    "\323\043\326\044\344\046\333\066\u021e\001\001\000\004" +
    "\064\u021f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\263\001\001\000\024\014\143" +
    "\020\200\022\176\037\126\042\151\043\130\046\114\047" +
    "\150\076\153\001\001\000\002\001\001\000\004\063\u0226" +
    "\001\001\000\046\011\335\012\034\015\332\021\327\025" +
    "\322\027\341\031\331\032\342\033\325\034\337\037\330" +
    "\040\343\041\334\042\323\043\326\044\344\046\333\066" +
    "\u0227\001\001\000\004\064\u0228\001\001\000\002\001\001" +
    "\000\022\014\143\020\u022d\037\126\042\151\043\130\046" +
    "\114\047\150\076\153\001\001\000\022\014\143\020\u022c" +
    "\037\126\042\151\043\130\046\114\047\150\076\153\001" +
    "\001\000\024\014\143\020\200\022\176\037\126\042\151" +
    "\043\130\046\114\047\150\076\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\263\001\001\000\022" +
    "\014\143\020\u023c\037\126\042\151\043\130\046\114\047" +
    "\150\076\153\001\001\000\004\063\u0239\001\001\000\002" +
    "\001\001\000\004\054\u0234\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\063\u0236\001\001\000\046\011\335" +
    "\012\034\015\332\021\327\025\322\027\341\031\331\032" +
    "\342\033\325\034\337\037\330\040\343\041\334\042\323" +
    "\043\326\044\344\046\333\066\u0237\001\001\000\004\064" +
    "\u0238\001\001\000\002\001\001\000\046\011\335\012\034" +
    "\015\332\021\327\025\322\027\341\031\331\032\342\033" +
    "\325\034\337\037\330\040\343\041\334\042\323\043\326" +
    "\044\344\046\333\066\u023a\001\001\000\004\064\u023b\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\014\143" +
    "\020\u023e\037\126\042\151\043\130\046\114\047\150\076" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\014\143\020\u0246\037" +
    "\126\042\151\043\130\046\114\047\150\076\153\001\001" +
    "\000\022\014\143\020\u0245\037\126\042\151\043\130\046" +
    "\114\047\150\076\153\001\001\000\024\014\143\020\200" +
    "\022\176\037\126\042\151\043\130\046\114\047\150\076" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\014\143\020\u0248\037\126\042\151\043\130\046\114\047" +
    "\150\076\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\063\u0272\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\063\u0251\001\001\000\004\072\u0254\001\001\000" +
    "\004\063\u026b\001\001\000\004\064\u026a\001\001\000\004" +
    "\064\u0269\001\001\000\022\014\143\020\u0257\037\126\042" +
    "\151\043\130\046\114\047\150\076\153\001\001\000\030" +
    "\014\143\020\200\022\176\037\126\042\151\043\130\046" +
    "\114\047\150\063\u0262\064\u0263\076\153\001\001\000\004" +
    "\063\u0258\001\001\000\046\011\335\012\034\015\332\021" +
    "\327\025\322\027\341\031\331\032\342\033\325\034\337" +
    "\037\330\040\343\041\334\042\323\043\326\044\344\046" +
    "\333\066\u0259\001\001\000\004\070\u025f\001\001\000\010" +
    "\016\355\022\351\070\u025c\001\001\000\002\001\001\000" +
    "\004\064\u025d\001\001\000\004\072\u025e\001\001\000\002" +
    "\001\001\000\004\064\u0260\001\001\000\004\072\u0261\001" +
    "\001\000\002\001\001\000\046\011\335\012\034\015\332" +
    "\021\327\025\322\027\341\031\331\032\342\033\325\034" +
    "\337\037\330\040\343\041\334\042\323\043\326\044\344" +
    "\046\333\066\u0265\001\001\000\004\072\u0264\001\001\000" +
    "\002\001\001\000\004\070\u0266\001\001\000\004\064\u0267" +
    "\001\001\000\004\072\u0268\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\011\335\012\034" +
    "\015\332\021\327\025\322\027\341\031\331\032\342\033" +
    "\325\034\337\037\330\040\343\041\334\042\323\043\326" +
    "\044\344\046\333\066\u026c\001\001\000\004\064\u026d\001" +
    "\001\000\002\001\001\000\004\063\u026f\001\001\000\004" +
    "\072\u0270\001\001\000\004\064\u0271\001\001\000\002\001" +
    "\001\000\004\072\u0273\001\001\000\004\064\u0274\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\011\067\012\034\015\063\021\057\025" +
    "\052\027\075\031\062\032\077\033\055\034\071\037\060" +
    "\040\101\041\066\042\054\043\056\044\102\046\064\067" +
    "\u027c\001\001\000\004\064\u027d\001\001\000\002\001\001" +
    "\000\012\016\u0283\055\u027f\073\u0282\074\u0280\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\u028b\001\001\000\004\063\u0288\001\001" +
    "\000\046\011\067\012\034\015\063\021\057\025\052\027" +
    "\075\031\062\032\077\033\055\034\071\037\060\040\101" +
    "\041\066\042\054\043\056\044\102\046\064\067\u0289\001" +
    "\001\000\004\064\u028a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\u0294\001\001\000" +
    "\004\063\u028f\001\001\000\046\011\067\012\034\015\063" +
    "\021\057\025\052\027\075\031\062\032\077\033\055\034" +
    "\071\037\060\040\101\041\066\042\054\043\056\044\102" +
    "\046\064\067\u0291\001\001\000\010\016\355\022\351\064" +
    "\u0293\001\001\000\004\064\u0292\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\016\u0283\055\u029a\073\u0282\074\u0280\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\063\u029d\001\001\000\046" +
    "\011\067\012\034\015\063\021\057\025\052\027\075\031" +
    "\062\032\077\033\055\034\071\037\060\040\101\041\066" +
    "\042\054\043\056\044\102\046\064\067\u029e\001\001\000" +
    "\004\064\u029f\001\001\000\002\001\001\000\004\063\u02a1" +
    "\001\001\000\046\011\067\012\034\015\063\021\057\025" +
    "\052\027\075\031\062\032\077\033\055\034\071\037\060" +
    "\040\101\041\066\042\054\043\056\044\102\046\064\067" +
    "\u02a3\001\001\000\010\016\355\022\351\064\u02a5\001\001" +
    "\000\004\064\u02a4\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\016\u0283\055\u02a8\073\u0282" +
    "\074\u0280\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\063\u02ab\001\001\000\046\011\335\012\034\015\332" +
    "\021\327\025\322\027\341\031\331\032\342\033\325\034" +
    "\337\037\330\040\343\041\334\042\323\043\326\044\344" +
    "\046\333\066\u02ac\001\001\000\004\064\u02ad\001\001\000" +
    "\002\001\001\000\004\063\u02af\001\001\000\046\011\335" +
    "\012\034\015\332\021\327\025\322\027\341\031\331\032" +
    "\342\033\325\034\337\037\330\040\343\041\334\042\323" +
    "\043\326\044\344\046\333\066\u02b0\001\001\000\004\064" +
    "\u02b3\001\001\000\010\016\355\022\351\064\u02b2\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\016\u0283\055\u02b9\073\u0282\074\u0280\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\063\u02bc\001\001\000\046" +
    "\011\335\012\034\015\332\021\327\025\322\027\341\031" +
    "\331\032\342\033\325\034\337\037\330\040\343\041\334" +
    "\042\323\043\326\044\344\046\333\066\u02bd\001\001\000" +
    "\004\064\u02be\001\001\000\002\001\001\000\004\063\u02c0" +
    "\001\001\000\046\011\335\012\034\015\332\021\327\025" +
    "\322\027\341\031\331\032\342\033\325\034\337\037\330" +
    "\040\343\041\334\042\323\043\326\044\344\046\333\066" +
    "\u02c1\001\001\000\004\064\u02c4\001\001\000\010\016\355" +
    "\022\351\064\u02c3\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\063\u02ce\001\001\000\012" +
    "\016\u0283\055\u02c8\073\u0282\074\u0280\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\063\u02cb\001\001\000\046" +
    "\011\335\012\034\015\332\021\327\025\322\027\341\031" +
    "\331\032\342\033\325\034\337\037\330\040\343\041\334" +
    "\042\323\043\326\044\344\046\333\066\u02cc\001\001\000" +
    "\004\064\u02cd\001\001\000\002\001\001\000\046\011\335" +
    "\012\034\015\332\021\327\025\322\027\341\031\331\032" +
    "\342\033\325\034\337\037\330\040\343\041\334\042\323" +
    "\043\326\044\344\046\333\066\u02cf\001\001\000\004\064" +
    "\u02d0\001\001\000\002\001\001\000\004\016\u02d2\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\u02d6\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\014\143\017\370\020\147\023\u02d9\024\364\037" +
    "\126\042\151\043\130\046\114\047\150\060\141\061\371" +
    "\075\372\076\153\077\117\100\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\014\143\017\u02dc\020\147" +
    "\037\126\042\151\043\130\046\114\047\150\060\141\076" +
    "\153\077\117\100\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\063\u02e4" +
    "\001\001\000\022\010\u02e5\011\042\012\034\016\040\021" +
    "\031\035\037\036\033\045\026\001\001\000\004\065\u02e6" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //codigo
    public ArrayList<ErrorSintactico> listaErrores = new ArrayList<>();

    public void setAccion(String tipo, String mensaje, String accion){
        //listaErrores.add(new ErrorSintactico());
    }

	private Symbol s;
	public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void syntax_error(Symbol s){
        String message = s.toString();
        StringBuilder m = new StringBuilder("Error: ");
        String cadena =  (String) s.value;
        int columna = s.left+1;
        int linea = s.right+1;
        
        agregarError("Sintactico",cadena,"No se esperaba un token tipo <"+s.value+">", linea, columna);
    }

	public void agregarError(String tipo, String cadena, String descripcion, int linea, int columna){
        System.out.println("Tipo: "+tipo+"\tCadena: "+cadena+", descripcion: "+descripcion+", Linea: "+linea+", Columna: "+columna);
		listaErrores.add(new ErrorSintactico(linea,columna,cadena,descripcion,tipo));
    }


	public void unrecovered_syntax_error(Symbol cur_token){
        if(cur_token.toString().equals("#0")){
			String message = s.toString();
			StringBuilder m = new StringBuilder("Error: ");
			String cadena =  "Fin del archivo";
			int columna = cur_token.left+1;
			int linea = cur_token.right+1;
			agregarError("Sintactico",cadena,"No se pudo recuperar y seguir analizando, no se encontraron mas tokens.", linea, columna);
            
        }else{
			String message = s.toString();
			StringBuilder m = new StringBuilder("Error: ");
			String cadena =  (String)cur_token.value;
			int columna = cur_token.left+1;
			int linea = cur_token.right+1;
			agregarError("Sintactico",cadena,"No se pudo recuperar y seguir analizando.", linea, columna);
			
        }
        System.out.println("No se pudo recuperar y seguir analizando, no se encontraron mas tokens.");
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {


    

  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // especiales_q_retornan ::= struct_longitud 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("especiales_q_retornan",60, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // especiales_q_retornan ::= struct_sumarizar 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("especiales_q_retornan",60, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // especiales_q_retornan ::= struct_reproducir 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("especiales_q_retornan",60, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // state_continuar ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("state_continuar",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // state_continuar ::= CONTINUAR 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("state_continuar",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // struct_hacer ::= HACER error PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura hacer (", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_hacer",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // struct_hacer ::= HACER st_ind code_funcion state_continuar st_ded MIENTRAS PA_A error PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura hacer, se esperaba un <condicion>", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_hacer",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // struct_hacer ::= HACER st_ind code_funcion state_continuar st_ded error PA_A struct_operador_logico PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura hacer, se esperaba un <mientras>", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_hacer",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // struct_hacer ::= HACER error st_ded MIENTRAS PA_A struct_operador_logico PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura hacer, fallo el el bloque de codigo", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_hacer",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // struct_hacer ::= HACER st_ind error state_continuar st_ded MIENTRAS PA_A struct_operador_logico PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura hacer, fallo el el bloque de codigo", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_hacer",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // struct_hacer ::= HACER st_ind code_funcion state_continuar st_ded MIENTRAS PA_A struct_operador_logico PA_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_hacer",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // struct_mientras ::= MIENTRAS error st_ded 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura mientras", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_mientras",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // struct_mientras ::= MIENTRAS error PA_C st_ind code_funcion st_ded 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura mientras, se esperaba un una \"(condicion)\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_mientras",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // struct_mientras ::= MIENTRAS PA_A struct_operador_logico PA_C st_ind error st_ded 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura mientras, fallo el bloque de codigo", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_mientras",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // struct_mientras ::= MIENTRAS PA_A error PA_C st_ind code_funcion st_ded 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura mientras, se esperaba un una condicion", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_mientras",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // struct_mientras ::= MIENTRAS PA_A struct_operador_logico PA_C st_ind code_funcion st_ded 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_mientras",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // incremento_para ::= error MENOS_MENOS 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la asignacion de variable, se esperaba un ID", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("incremento_para",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // incremento_para ::= error MAS_MAS 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la asignacion de variable, se esperaba un ID", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("incremento_para",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // incremento_para ::= error MAS_IGUAL valor_operacion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la asignacion de variable, se esperaba un ID", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("incremento_para",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // incremento_para ::= error IGUAL valor_operacion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la asignacion de variable, se esperaba un ID", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("incremento_para",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // incremento_para ::= IDENTIFICADOR MENOS_MENOS 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("incremento_para",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // incremento_para ::= IDENTIFICADOR MAS_MAS 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("incremento_para",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // incremento_para ::= IDENTIFICADOR MAS_IGUAL valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("incremento_para",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // incremento_para ::= IDENTIFICADOR IGUAL valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("incremento_para",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // condicion_para ::= struct_operador_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion_para",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // para_asig_var ::= IDENTIFICADOR IGUAL error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la asignacion de variable, se esperaba un <valor>", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("para_asig_var",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // para_asig_var ::= IDENTIFICADOR error valor_operacion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la asignacion de variable, se esperaba un <=>", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("para_asig_var",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // para_asig_var ::= error IGUAL valor_operacion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la asignacion de variable, se esperaba un <ID>", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("para_asig_var",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // para_asig_var ::= VAR tipo_dato IDENTIFICADOR IGUAL error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la asignacion de variable, se esperaba un <valor>", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("para_asig_var",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // para_asig_var ::= VAR tipo_dato IDENTIFICADOR error valor_operacion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la asignacion de variable, se esperaba un <=>", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("para_asig_var",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // para_asig_var ::= VAR tipo_dato error IGUAL valor_operacion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la asignacion de variable, se esperaba un <ID>", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("para_asig_var",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // para_asig_var ::= error IDENTIFICADOR IGUAL valor_operacion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la asignacion de variable, se esperaba un <tipoDato>", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("para_asig_var",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // para_asig_var ::= IDENTIFICADOR IGUAL valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("para_asig_var",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // para_asig_var ::= VAR tipo_dato IDENTIFICADOR IGUAL valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("para_asig_var",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // struct_para ::= PARA PA_A para_asig_var PUNTO_COMA condicion_para PUNTO_COMA incremento_para PA_C st_ind error st_ded 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura de para, fallo el el bloque de codigo", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_para",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // struct_para ::= PARA PA_A error PA_C st_ind code_funcion st_ded 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura de para, se esperaba: \"(asignacion,condicion ,incremento)\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_para",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // struct_para ::= PARA PA_A para_asig_var PUNTO_COMA condicion_para PUNTO_COMA error PA_C st_ind code_funcion st_ded 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura de para, se esperaba un \"incremento\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_para",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // struct_para ::= PARA PA_A para_asig_var PUNTO_COMA error incremento_para PA_C st_ind code_funcion st_ded 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura de para, se esperaba una \"condicion ,\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_para",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // struct_para ::= PARA PA_A error condicion_para PUNTO_COMA incremento_para PA_C st_ind code_funcion st_ded 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura de para, se esperaba una \"asignacion de variable ,\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_para",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // struct_para ::= PARA PA_A para_asig_var PUNTO_COMA condicion_para PUNTO_COMA incremento_para PA_C st_ind code_funcion st_ded 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_para",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // caso_salir ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("caso_salir",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // caso_salir ::= SALIR 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("caso_salir",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // struct_caso ::= CASO error st_ded struct_caso 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura del caso", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_caso",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // struct_caso ::= CASO valor_operacion st_ind error caso_salir st_ded struct_caso 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura del caso, fallo en el bloque de codigo", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_caso",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // struct_caso ::= CASO error st_ind code_funcion caso_salir st_ded struct_caso 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura del caso, se esperava un valor", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_caso",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // struct_caso ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_caso",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // struct_caso ::= DEFAULT st_ind code_funcion st_ded 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_caso",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // struct_caso ::= CASO valor_operacion st_ind code_funcion caso_salir st_ded struct_caso 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_caso",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // struct_switch ::= SWITCH PA_A IDENTIFICADOR PA_C st_ind error st_ded 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura del switch, fallo en el bloque de caso", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_switch",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // struct_switch ::= SWITCH error st_ind struct_caso st_ded 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura del switch, se esperaba un (ID)", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_switch",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // struct_switch ::= SWITCH PA_A error PA_C st_ind struct_caso st_ded 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura del switch, se esperaba un ID", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_switch",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // struct_switch ::= SWITCH PA_A IDENTIFICADOR PA_C st_ind struct_caso st_ded 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_switch",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // struct_sino ::= SINO_SI error st_ded struct_sino 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura de sino si", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_sino",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // struct_sino ::= SINO_SI error PA_C st_ind code_funcion st_ded struct_sino 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura de sino si, se esperaba una \"( estructura logica)\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_sino",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // struct_sino ::= SINO_SI error st_ind code_funcion st_ded struct_sino 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura de sino si, se esperaba una \"( estructura logica)\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_sino",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // struct_sino ::= SINO_SI PA_A struct_operador_logico PA_C st_ind error st_ded struct_sino 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura de sino si, fallo en el bloque de codigo", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_sino",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // struct_sino ::= SINO_SI PA_A error PA_C st_ind code_funcion st_ded struct_sino 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura de la sentencias logica, se esperaba una estructura logica", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_sino",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // struct_sino ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_sino",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // struct_sino ::= SINO st_ind code_funcion st_ded 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_sino",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // struct_sino ::= SINO_SI PA_A struct_operador_logico PA_C st_ind code_funcion st_ded struct_sino 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_sino",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // struct_si ::= SI error st_ded struct_sino 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura de Si", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_si",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // struct_si ::= SI error PA_C st_ind code_funcion st_ded struct_sino 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura de Si, se esperaba una \"( estructura logica)\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_si",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // struct_si ::= SI error st_ind code_funcion st_ded struct_sino 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura de Si, se esperaba una \"( estructura logica)\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_si",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // struct_si ::= SI PA_A struct_operador_logico PA_C st_ind error st_ded struct_sino 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura de Si, fallo en el bloque de codigo", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_si",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // struct_si ::= SI PA_A error PA_C st_ind code_funcion st_ded struct_sino 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura de la sentencias logica, se esperaba una estructura logica", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_si",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // struct_si ::= SI PA_A struct_operador_logico PA_C st_ind code_funcion st_ded struct_sino 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_si",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // struct_principal ::= PRINCIPAL PA_A PA_C st_ind error st_ded 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura del metodo Principal, fallo en el bloque de codigo", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_principal",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // struct_principal ::= PRINCIPAL error st_ind code_metodo st_ded 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura del metodo Principal, se esperaba \"< ( ) >\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_principal",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // struct_principal ::= PRINCIPAL PA_A PA_C st_ind code_metodo st_ded 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_principal",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // tipo_orden ::= error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el tipo de orden se esperaba un: \n\"<ASCENDENTE | DESCENDENTE | PARES | IMPARES | PRIMOS>\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_orden",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // tipo_orden ::= PRIMOS 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_orden",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // tipo_orden ::= IMPARES 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_orden",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // tipo_orden ::= PARES 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_orden",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // tipo_orden ::= DESCENDENTE 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_orden",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // tipo_orden ::= ASCENDENTE 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_orden",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // notas ::= error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la nota musical se esperaba una de las notas: \n\"Do, Do#, Re, Re#, Mi, Fa, Fa#, Sol, Sol#, La, La#, Si\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // notas ::= LA_S 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // notas ::= SOL_S 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // notas ::= FA_S 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // notas ::= RE_S 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // notas ::= DO_S 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // notas ::= SI 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // notas ::= LA 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // notas ::= SOL 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // notas ::= FA 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // notas ::= MI 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // notas ::= RE 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // notas ::= DO 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("notas",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // mensajes ::= mensajes error struct_operador_logico 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro de la funcion Mensaje, se esperaba un \"<+>\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mensajes",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // mensajes ::= error MAS struct_operador_logico 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro de la funcion Mensaje, se esperaba un \"<MENSAJE>\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mensajes",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // mensajes ::= struct_operador_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mensajes",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // mensajes ::= mensajes MAS struct_operador_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mensajes",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // struct_mensaje ::= MENSAJE error PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro de la funcion Mensaje, se esperaba \"(\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_mensaje",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // struct_mensaje ::= MENSAJE PA_A error PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro de la funcion Mensaje, se esperaba un \"<MENSAJE>\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_mensaje",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // struct_mensaje ::= MENSAJE PA_A PA_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_mensaje",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // struct_mensaje ::= MENSAJE PA_A mensajes PA_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_mensaje",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // struct_longitud ::= LONGITUD error PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro de la funcion Longitud, se esperaba \"(\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_longitud",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // struct_longitud ::= LONGITUD PA_A error PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro de la funcion Longitud, se esperaba un \"valor\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_longitud",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // struct_longitud ::= LONGITUD PA_A valor_operacion PA_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_longitud",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // struct_sumarizar ::= SUMARIZAR error PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro de la funcion Sumarizar, se esperaba \"(\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_sumarizar",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // struct_sumarizar ::= SUMARIZAR PA_A error PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro de la funcion Sumarizar, se esperaba un \"ID\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_sumarizar",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // struct_sumarizar ::= SUMARIZAR PA_A IDENTIFICADOR PA_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_sumarizar",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // struct_ordenar ::= ORDENAR error PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro de la funcion Ordenar, se esperaba \"(\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_ordenar",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // struct_ordenar ::= ORDENAR PA_A IDENTIFICADOR error tipo_orden PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro de la funcion Ordenar, se esperaba \",\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_ordenar",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // struct_ordenar ::= ORDENAR PA_A error PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro de la funcion Ordenar, se esperaba \"(ID , <tipoOrden>)\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_ordenar",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // struct_ordenar ::= ORDENAR PA_A IDENTIFICADOR COMA tipo_orden PA_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_ordenar",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // struct_esperar ::= ESPERAR error PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro de la funcion Esperar, se esperaba \"(\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_esperar",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // struct_esperar ::= ESPERAR PA_A error PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro de la funcion Esperar, se esperaba \"(valor , valor)\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_esperar",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // struct_esperar ::= ESPERAR PA_A valor_operacion error valor_operacion PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro de la funcion Esperar, se esperaba \",\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_esperar",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // struct_esperar ::= ESPERAR PA_A valor_operacion COMA valor_operacion PA_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_esperar",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // struct_reproducir ::= REPRODUCIR error PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro de la funcion Reproducir, se esperaba \"(\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_reproducir",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // struct_reproducir ::= REPRODUCIR PA_A notas COMA valor_operacion COMA valor_operacion error valor_operacion PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro de la funcion Reproducir, se esperaba \",\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_reproducir",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // struct_reproducir ::= REPRODUCIR PA_A notas COMA valor_operacion error valor_operacion COMA valor_operacion PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro de la funcion Reproducir, se esperaba \",\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_reproducir",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // struct_reproducir ::= REPRODUCIR PA_A notas error valor_operacion COMA valor_operacion COMA valor_operacion PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro de la funcion Reproducir, se esperaba \",\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_reproducir",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // struct_reproducir ::= REPRODUCIR PA_A error PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro de la funcion Reproducir, se esperaba \"(notas , valor , valor , valor)\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_reproducir",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // struct_reproducir ::= REPRODUCIR PA_A notas COMA valor_operacion COMA valor_operacion COMA valor_operacion PA_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_reproducir",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // code_metodo ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // code_metodo ::= struct_mensaje code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // code_metodo ::= struct_longitud code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // code_metodo ::= struct_sumarizar code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // code_metodo ::= struct_ordenar code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // code_metodo ::= struct_esperar code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // code_metodo ::= struct_reproducir code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // code_metodo ::= struct_hacer code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // code_metodo ::= struct_mientras code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // code_metodo ::= struct_para code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // code_metodo ::= struct_switch code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // code_metodo ::= struct_si code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // code_metodo ::= strunt_llamada_funcion code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // code_metodo ::= struct_asig_arreglo code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // code_metodo ::= struct_declaracion_array code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // code_metodo ::= struc_asig_var code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // code_metodo ::= struct_declaracion_var code_metodo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_metodo",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // code_funcion ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // code_funcion ::= RETORNAR error 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // code_funcion ::= RETORNAR struct_operador_logico code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // code_funcion ::= struct_mensaje code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // code_funcion ::= struct_longitud code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // code_funcion ::= struct_sumarizar code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // code_funcion ::= struct_ordenar code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // code_funcion ::= struct_esperar code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // code_funcion ::= struct_reproducir code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // code_funcion ::= struct_hacer code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // code_funcion ::= struct_mientras code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // code_funcion ::= struct_para code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // code_funcion ::= struct_switch code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // code_funcion ::= struct_si code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // code_funcion ::= strunt_llamada_funcion code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // code_funcion ::= struct_asig_arreglo code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // code_funcion ::= struct_declaracion_array code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // code_funcion ::= struc_asig_var code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // code_funcion ::= struct_declaracion_var code_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("code_funcion",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // param_vacio ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("param_vacio",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // params_lleno ::= error COMA tipo_dato IDENTIFICADOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro, se esperaba un \"<tipoDato> ID,<tipoDato> ID...\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params_lleno",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // params_lleno ::= struct_parametros COMA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro, se esperaba un ID", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params_lleno",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // params_lleno ::= tipo_dato error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el parametro, se esperaba un ID", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params_lleno",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // params_lleno ::= tipo_dato IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params_lleno",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // params_lleno ::= struct_parametros COMA tipo_dato IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params_lleno",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // struct_parametros ::= param_vacio 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_parametros",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // struct_parametros ::= params_lleno 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_parametros",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // struct_procedimiento ::= KEEP IDENTIFICADOR PA_A struct_parametros PA_C st_ind error st_ded 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura del metodo "+a+", fallo en el bloque de codigo de la metodo", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_procedimiento",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // struct_procedimiento ::= KEEP IDENTIFICADOR PA_A error PA_C st_ind code_metodo st_ded 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error el los parametros del metodo "+a, eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_procedimiento",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // struct_procedimiento ::= IDENTIFICADOR PA_A struct_parametros PA_C st_ind error st_ded 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura del metodo "+a+", fallo en el bloque de codigo de la metodo", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_procedimiento",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // struct_procedimiento ::= IDENTIFICADOR PA_A error PA_C st_ind code_metodo st_ded 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error el los parametros del metodo "+a, eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_procedimiento",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // struct_procedimiento ::= KEEP IDENTIFICADOR PA_A struct_parametros PA_C st_ind code_metodo st_ded 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_procedimiento",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // struct_procedimiento ::= IDENTIFICADOR PA_A struct_parametros PA_C st_ind code_metodo st_ded 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_procedimiento",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // struct_funcion ::= KEEP tipo_dato IDENTIFICADOR PA_A struct_parametros PA_C st_ind error st_ded 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura de la funcion "+a+", fallo en el bloque de codigo de la funcion", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_funcion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // struct_funcion ::= tipo_dato IDENTIFICADOR PA_A struct_parametros PA_C st_ind error st_ded 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura de la funcion "+a+", fallo en el bloque de codigo de la funcion", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_funcion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // struct_funcion ::= error PA_C st_ind code_funcion st_ded 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura de la funcion, se esperaba un \"<tipoDato> ID (<parametros>)\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_funcion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // struct_funcion ::= KEEP tipo_dato IDENTIFICADOR PA_A error PA_C st_ind code_funcion st_ded 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error el los parametros en la funcion "+a, eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_funcion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // struct_funcion ::= tipo_dato IDENTIFICADOR PA_A error PA_C st_ind code_funcion st_ded 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error el los parametros en la funcion "+a, eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_funcion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // struct_funcion ::= error PA_A struct_parametros PA_C st_ind code_funcion st_ded 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la estructura de la funcion, se esperaba un \"<tipoDato> ID\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_funcion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // struct_funcion ::= KEEP tipo_dato IDENTIFICADOR PA_A struct_parametros PA_C st_ind code_funcion st_ded 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_funcion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // struct_funcion ::= tipo_dato IDENTIFICADOR PA_A struct_parametros PA_C st_ind code_funcion st_ded 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_funcion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // struct_asig_arreglo ::= error dim_arreglo IGUAL tipo_valor_op_logico 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la asignacion de arreglo, se esperaba un ID", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_asig_arreglo",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // struct_asig_arreglo ::= IDENTIFICADOR error IGUAL tipo_valor_op_logico 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la asignacion de arreglo, se esperaba el valor de la dimension [num]...", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_asig_arreglo",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // struct_asig_arreglo ::= IDENTIFICADOR dim_arreglo error tipo_valor_op_logico 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la asignacion de arreglo, se esperaba un \"=\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_asig_arreglo",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // struct_asig_arreglo ::= IDENTIFICADOR dim_arreglo IGUAL tipo_valor_op_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_asig_arreglo",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // tipo_valor_op_logico ::= struct_operador_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_valor_op_logico",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // valores_array ::= valores_array error tipo_valor_op_logico 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el valor de asignacion del arreglo, se esperaba una coma \",\"", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valores_array",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // valores_array ::= error COMA tipo_valor_op_logico 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el valor de asignacion del arreglo, se esperaba un valor", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valores_array",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // valores_array ::= tipo_valor_op_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valores_array",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // valores_array ::= valores_array COMA tipo_valor_op_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valores_array",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // valores_array_mas_dim ::= error LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el valor de asignacion del arreglo", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valores_array_mas_dim",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // valores_array_mas_dim ::= error LLAVE_A valores_array_mas_dim LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el valor de asignacion del arreglo", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valores_array_mas_dim",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // valores_array_mas_dim ::= error LLAVE_A valores_array LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el valor de asignacion del arreglo", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valores_array_mas_dim",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // valores_array_mas_dim ::= valores_array_mas_dim COMA LLAVE_A valores_array LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valores_array_mas_dim",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // valores_array_mas_dim ::= LLAVE_A valores_array LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valores_array_mas_dim",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // valores_array_mas_dim ::= valores_array_mas_dim COMA LLAVE_A valores_array_mas_dim LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valores_array_mas_dim",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // valores_array_mas_dim ::= LLAVE_A valores_array_mas_dim LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valores_array_mas_dim",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // valor_arreglo ::= valores_array 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor_arreglo",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // valor_arreglo ::= valores_array_mas_dim 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor_arreglo",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // dim_arreglo ::= dim_arreglo CORCHETE_A error CORCHETE_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el valor de asignacion de la dimenasion arreglo", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("dim_arreglo",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // dim_arreglo ::= CORCHETE_A error CORCHETE_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en el valor de asignacion de la dimenasion arreglo", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("dim_arreglo",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // dim_arreglo ::= CORCHETE_A valor_operacion CORCHETE_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("dim_arreglo",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // dim_arreglo ::= dim_arreglo CORCHETE_A valor_operacion CORCHETE_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("dim_arreglo",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // struct_declaracion_array ::= error tipo_dato ARREGLO IDENTIFICADOR dim_arreglo 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		parser.agregarError("Sintactico",(String)e,"Se esperaba el Simbolo ID o fallo en la declaracion", eright+1, eleft+1);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // struct_declaracion_array ::= error tipo_dato ARREGLO IDENTIFICADOR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		parser.agregarError("Sintactico",(String)e,"Se esperaba el Simbolo ID o fallo en la declaracion", eright+1, eleft+1);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // struct_declaracion_array ::= error tipo_dato ARREGLO IDENTIFICADOR dim_arreglo IGUAL LLAVE_A valor_arreglo LLAVE_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).value;
		parser.agregarError("Sintactico",(String)e,"Se esperaba el Simbolo ID o fallo en la declaracion", eright+1, eleft+1);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // struct_declaracion_array ::= keep_state VAR tipo_dato ARREGLO IDENTIFICADOR dim_arreglo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // struct_declaracion_array ::= keep_state VAR tipo_dato ARREGLO IDENTIFICADOR 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // struct_declaracion_array ::= keep_state VAR tipo_dato ARREGLO IDENTIFICADOR dim_arreglo IGUAL LLAVE_A valor_arreglo LLAVE_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // struct_declaracion_array ::= struct_declaracion_array COMA IDENTIFICADOR dim_arreglo IGUAL LLAVE_A valor_arreglo LLAVE_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // struct_declaracion_array ::= struct_declaracion_array COMA IDENTIFICADOR 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // struct_declaracion_array ::= struct_declaracion_array COMA IDENTIFICADOR dim_arreglo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_array",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // struc_asig_var ::= error MENOS_MENOS 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la asignacion de variable, se esperaba un ID", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struc_asig_var",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // struc_asig_var ::= error MAS_MAS 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la asignacion de variable, se esperaba un ID", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struc_asig_var",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // struc_asig_var ::= error MAS_IGUAL struct_operador_logico 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la asignacion de variable, se esperaba un ID", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struc_asig_var",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // struc_asig_var ::= error IGUAL struct_operador_logico 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la asignacion de variable, se esperaba un ID", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struc_asig_var",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // struc_asig_var ::= IDENTIFICADOR error struct_operador_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struc_asig_var",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // struc_asig_var ::= IDENTIFICADOR MENOS_MENOS 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struc_asig_var",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // struc_asig_var ::= IDENTIFICADOR MAS_MAS 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struc_asig_var",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // struc_asig_var ::= IDENTIFICADOR MAS_IGUAL struct_operador_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struc_asig_var",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // struc_asig_var ::= IDENTIFICADOR IGUAL struct_operador_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struc_asig_var",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // valor_operacion ::= PA_A error PA_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error de la operacion, se esperaba un valor, u operacion", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // valor_operacion ::= error valor_operacion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error de la operacion, se esperaba s(+,-,*,/,%,^)", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // valor_operacion ::= valor 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // valor_operacion ::= PA_A valor_operacion PA_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // valor_operacion ::= valor_operacion POTENCIA valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // valor_operacion ::= valor_operacion MODULO valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // valor_operacion ::= valor_operacion DIVISION valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // valor_operacion ::= valor_operacion POR valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // valor_operacion ::= valor_operacion MENOS valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // valor_operacion ::= valor_operacion MAS valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor_operacion",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // state_op_racional ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("state_op_racional",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // state_op_racional ::= MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("state_op_racional",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // state_op_racional ::= MENOR_Q 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("state_op_racional",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // state_op_racional ::= MAYOR_Q 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("state_op_racional",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // state_op_racional ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("state_op_racional",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // state_op_racional ::= IGUAL_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("state_op_racional",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // struct_operador_relacional ::= error state_op_racional 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                parser.agregarError("Sintactico",(String)e,"Error en la estrucutra racional se esperaba un valor para comparar", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // struct_operador_relacional ::= state_op_racional error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                parser.agregarError("Sintactico",(String)e,"Error en la estrucutra racional se esperaba un valor para comparar", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // struct_operador_relacional ::= IS_NULL valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // struct_operador_relacional ::= valor_operacion MENOR_IGUAL valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // struct_operador_relacional ::= valor_operacion MAYOR_IGUAL valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // struct_operador_relacional ::= valor_operacion MENOR_Q valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // struct_operador_relacional ::= valor_operacion MAYOR_Q valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // struct_operador_relacional ::= valor_operacion DIFERENTE valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // struct_operador_relacional ::= valor_operacion IGUAL_IGUAL valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_relacional",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // state_op_logicos ::= NAND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("state_op_logicos",61, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // state_op_logicos ::= AND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("state_op_logicos",61, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // state_op_logicos ::= XOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("state_op_logicos",61, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // state_op_logicos ::= NOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("state_op_logicos",61, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // state_op_logicos ::= OR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("state_op_logicos",61, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // struct_operador_logico ::= NOT error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                parser.agregarError("Sintactico",(String)e,"Error en la estrucutra logica se esperaba un valor booleano para el NOT", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // struct_operador_logico ::= state_op_logicos error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                parser.agregarError("Sintactico",(String)e,"Error en la estrucutra logica se esperaba un valor booleano", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // struct_operador_logico ::= error state_op_logicos 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                parser.agregarError("Sintactico",(String)e,"Error en la estrucutra logica se esperaba un valor booleano", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // struct_operador_logico ::= valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // struct_operador_logico ::= struct_operador_relacional 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // struct_operador_logico ::= NOT PA_A struct_operador_logico PA_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // struct_operador_logico ::= struct_operador_logico NAND struct_operador_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // struct_operador_logico ::= struct_operador_logico AND struct_operador_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // struct_operador_logico ::= struct_operador_logico XOR struct_operador_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // struct_operador_logico ::= struct_operador_logico NOR struct_operador_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // struct_operador_logico ::= struct_operador_logico OR struct_operador_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_operador_logico",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // tipo_dato ::= error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                parser.agregarError("Sintactico",(String)e,"Se esperaba un tipo de variable o un keep", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tipo_dato ::= BOOLEAN 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tipo_dato ::= CADENA_RSV 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipo_dato ::= CARACTER_RSV 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipo_dato ::= ENTERO 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipo_dato ::= DOBLE 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // struct_llamada_arreglo ::= error dim_arreglo 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en la llamada del arreglo", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_llamada_arreglo",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // struct_llamada_arreglo ::= IDENTIFICADOR dim_arreglo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_llamada_arreglo",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // state_params ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("state_params",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // state_params ::= parametros 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("state_params",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parametros ::= valor_operacion error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en los parametros", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametros",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametros ::= error COMA valor_operacion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en los parametros", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametros",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametros ::= valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametros",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parametros ::= parametros COMA valor_operacion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametros",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // strunt_llamada_funcion ::= IDENTIFICADOR PA_A error PA_C 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en los parametros de la funcion o metodo: "+a, eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("strunt_llamada_funcion",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // strunt_llamada_funcion ::= IDENTIFICADOR PA_A state_params PA_C 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("strunt_llamada_funcion",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // valor ::= FALSE 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // valor ::= TRUE 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // valor ::= CARACTER 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // valor ::= CADENA 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // valor ::= DECIMAL 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // valor ::= NUMERO 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // valor ::= especiales_q_retornan 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // valor ::= struct_llamada_arreglo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // valor ::= strunt_llamada_funcion 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // valor ::= IDENTIFICADOR 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // keep_state ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("keep_state",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // keep_state ::= KEEP 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("keep_state",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // struct_declaracion_var ::= error tipo_dato IDENTIFICADOR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
            	parser.agregarError("Sintactico",(String)e,"Se esperaba el Simbolo var", eright+1, eleft+1); 
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // struct_declaracion_var ::= error tipo_dato IDENTIFICADOR IGUAL struct_operador_logico 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		
				parser.agregarError("Sintactico",(String)e,"Se esperaba el Simbolo var", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // struct_declaracion_var ::= struct_declaracion_var COMA error struct_operador_logico 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.agregarError("Sintactico",(String)e,"Se esperaba el Simbolo ID o fallo en la declaracion", eright+1, eleft+1);
               // System.out.println("Err: "+(eright+1)+", Col: "+(eleft+1)+", Token: "+e+", Descript: "+"Error de declaracion de variable");
                //parser.listaErrores.add(new ErrorSintactico(eright+1,eleft+1,(String) e,"Error de declaracion de variable"));
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // struct_declaracion_var ::= keep_state VAR tipo_dato IDENTIFICADOR 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // struct_declaracion_var ::= keep_state VAR tipo_dato IDENTIFICADOR IGUAL struct_operador_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // struct_declaracion_var ::= struct_declaracion_var COMA IDENTIFICADOR IGUAL struct_operador_logico 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // struct_declaracion_var ::= struct_declaracion_var COMA IDENTIFICADOR 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_declaracion_var",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // struc_code ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struc_code",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // struc_code ::= struct_principal struc_code 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struc_code",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // struc_code ::= struct_procedimiento struc_code 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struc_code",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // struc_code ::= struct_funcion struc_code 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struc_code",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // struc_code ::= struct_declaracion_array struc_code 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struc_code",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // struc_code ::= struct_declaracion_var struc_code 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struc_code",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // struct_extiende ::= error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en las Extensiones", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_extiende",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // struct_extiende ::= EXTIENDE IDENTIFICADOR 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_extiende",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // struct_extiende ::= struct_extiende COMA IDENTIFICADOR 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_extiende",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // extiende_state ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("extiende_state",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // extiende_state ::= struct_extiende 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("extiende_state",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // struct_pista ::= PISTA error extiende_state st_ind struc_code st_final 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		
				parser.agregarError("Sintactico",(String)e,"Error en nombrar Pista", eright+1, eleft+1);
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_pista",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // struct_pista ::= PISTA IDENTIFICADOR extiende_state st_ind struc_code st_final 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("struct_pista",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // codigo ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigo ::= struct_pista codigo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // st_final ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("st_final",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // st_final ::= DEDENT 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("st_final",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // st_ded ::= DEDENT 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("st_ded",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // st_ind ::= INDENT 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("st_ind",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // blanco ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("blanco",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // blanco ::= INDENT blanco DEDENT blanco 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("blanco",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= blanco codigo 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

